
HOPE_COUNTER_V3_092022.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000299c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000cc  08002a5c  08002a5c  00012a5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002b28  08002b28  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08002b28  08002b28  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002b28  08002b28  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002b28  08002b28  00012b28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002b2c  08002b2c  00012b2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08002b30  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000098  20000074  08002ba4  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000010c  08002ba4  0002010c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   000083f6  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000017fb  00000000  00000000  00028492  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000970  00000000  00000000  00029c90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008a8  00000000  00000000  0002a600  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000fcbb  00000000  00000000  0002aea8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a5c9  00000000  00000000  0003ab63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005fd07  00000000  00000000  0004512c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000a4e33  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002504  00000000  00000000  000a4e84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000074 	.word	0x20000074
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002a44 	.word	0x08002a44

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000078 	.word	0x20000078
 8000104:	08002a44 	.word	0x08002a44

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <LCD_DATA>:
extern const LCD16x2_CfgType LCD16x2_CfgParam;

//-----[ Alphanumeric LCD 16x2 Routines ]-----

void LCD_DATA(unsigned char Data)
{
 8000234:	b580      	push	{r7, lr}
 8000236:	b082      	sub	sp, #8
 8000238:	af00      	add	r7, sp, #0
 800023a:	0002      	movs	r2, r0
 800023c:	1dfb      	adds	r3, r7, #7
 800023e:	701a      	strb	r2, [r3, #0]
    if(Data & 1)
 8000240:	1dfb      	adds	r3, r7, #7
 8000242:	781b      	ldrb	r3, [r3, #0]
 8000244:	2201      	movs	r2, #1
 8000246:	4013      	ands	r3, r2
 8000248:	d008      	beq.n	800025c <LCD_DATA+0x28>
    	HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.D4_PIN, 1);
 800024a:	4b2a      	ldr	r3, [pc, #168]	; (80002f4 <LCD_DATA+0xc0>)
 800024c:	6818      	ldr	r0, [r3, #0]
 800024e:	4b29      	ldr	r3, [pc, #164]	; (80002f4 <LCD_DATA+0xc0>)
 8000250:	889b      	ldrh	r3, [r3, #4]
 8000252:	2201      	movs	r2, #1
 8000254:	0019      	movs	r1, r3
 8000256:	f001 f88b 	bl	8001370 <HAL_GPIO_WritePin>
 800025a:	e007      	b.n	800026c <LCD_DATA+0x38>
    else
    	HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.D4_PIN, 0);
 800025c:	4b25      	ldr	r3, [pc, #148]	; (80002f4 <LCD_DATA+0xc0>)
 800025e:	6818      	ldr	r0, [r3, #0]
 8000260:	4b24      	ldr	r3, [pc, #144]	; (80002f4 <LCD_DATA+0xc0>)
 8000262:	889b      	ldrh	r3, [r3, #4]
 8000264:	2200      	movs	r2, #0
 8000266:	0019      	movs	r1, r3
 8000268:	f001 f882 	bl	8001370 <HAL_GPIO_WritePin>
    if(Data & 2)
 800026c:	1dfb      	adds	r3, r7, #7
 800026e:	781b      	ldrb	r3, [r3, #0]
 8000270:	2202      	movs	r2, #2
 8000272:	4013      	ands	r3, r2
 8000274:	d008      	beq.n	8000288 <LCD_DATA+0x54>
    	HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.D5_PIN, 1);
 8000276:	4b1f      	ldr	r3, [pc, #124]	; (80002f4 <LCD_DATA+0xc0>)
 8000278:	6818      	ldr	r0, [r3, #0]
 800027a:	4b1e      	ldr	r3, [pc, #120]	; (80002f4 <LCD_DATA+0xc0>)
 800027c:	88db      	ldrh	r3, [r3, #6]
 800027e:	2201      	movs	r2, #1
 8000280:	0019      	movs	r1, r3
 8000282:	f001 f875 	bl	8001370 <HAL_GPIO_WritePin>
 8000286:	e007      	b.n	8000298 <LCD_DATA+0x64>
    else
    	HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.D5_PIN, 0);
 8000288:	4b1a      	ldr	r3, [pc, #104]	; (80002f4 <LCD_DATA+0xc0>)
 800028a:	6818      	ldr	r0, [r3, #0]
 800028c:	4b19      	ldr	r3, [pc, #100]	; (80002f4 <LCD_DATA+0xc0>)
 800028e:	88db      	ldrh	r3, [r3, #6]
 8000290:	2200      	movs	r2, #0
 8000292:	0019      	movs	r1, r3
 8000294:	f001 f86c 	bl	8001370 <HAL_GPIO_WritePin>
    if(Data & 4)
 8000298:	1dfb      	adds	r3, r7, #7
 800029a:	781b      	ldrb	r3, [r3, #0]
 800029c:	2204      	movs	r2, #4
 800029e:	4013      	ands	r3, r2
 80002a0:	d008      	beq.n	80002b4 <LCD_DATA+0x80>
    	HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.D6_PIN, 1);
 80002a2:	4b14      	ldr	r3, [pc, #80]	; (80002f4 <LCD_DATA+0xc0>)
 80002a4:	6818      	ldr	r0, [r3, #0]
 80002a6:	4b13      	ldr	r3, [pc, #76]	; (80002f4 <LCD_DATA+0xc0>)
 80002a8:	891b      	ldrh	r3, [r3, #8]
 80002aa:	2201      	movs	r2, #1
 80002ac:	0019      	movs	r1, r3
 80002ae:	f001 f85f 	bl	8001370 <HAL_GPIO_WritePin>
 80002b2:	e007      	b.n	80002c4 <LCD_DATA+0x90>
    else
    	HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.D6_PIN, 0);
 80002b4:	4b0f      	ldr	r3, [pc, #60]	; (80002f4 <LCD_DATA+0xc0>)
 80002b6:	6818      	ldr	r0, [r3, #0]
 80002b8:	4b0e      	ldr	r3, [pc, #56]	; (80002f4 <LCD_DATA+0xc0>)
 80002ba:	891b      	ldrh	r3, [r3, #8]
 80002bc:	2200      	movs	r2, #0
 80002be:	0019      	movs	r1, r3
 80002c0:	f001 f856 	bl	8001370 <HAL_GPIO_WritePin>
    if(Data & 8)
 80002c4:	1dfb      	adds	r3, r7, #7
 80002c6:	781b      	ldrb	r3, [r3, #0]
 80002c8:	2208      	movs	r2, #8
 80002ca:	4013      	ands	r3, r2
 80002cc:	d007      	beq.n	80002de <LCD_DATA+0xaa>
    	HAL_GPIO_WritePin(GPIOB, LCD16x2_CfgParam.D7_PIN, 1);
 80002ce:	4b09      	ldr	r3, [pc, #36]	; (80002f4 <LCD_DATA+0xc0>)
 80002d0:	895b      	ldrh	r3, [r3, #10]
 80002d2:	4809      	ldr	r0, [pc, #36]	; (80002f8 <LCD_DATA+0xc4>)
 80002d4:	2201      	movs	r2, #1
 80002d6:	0019      	movs	r1, r3
 80002d8:	f001 f84a 	bl	8001370 <HAL_GPIO_WritePin>
    else
    	HAL_GPIO_WritePin(GPIOB, LCD16x2_CfgParam.D7_PIN, 0);
}
 80002dc:	e006      	b.n	80002ec <LCD_DATA+0xb8>
    	HAL_GPIO_WritePin(GPIOB, LCD16x2_CfgParam.D7_PIN, 0);
 80002de:	4b05      	ldr	r3, [pc, #20]	; (80002f4 <LCD_DATA+0xc0>)
 80002e0:	895b      	ldrh	r3, [r3, #10]
 80002e2:	4805      	ldr	r0, [pc, #20]	; (80002f8 <LCD_DATA+0xc4>)
 80002e4:	2200      	movs	r2, #0
 80002e6:	0019      	movs	r1, r3
 80002e8:	f001 f842 	bl	8001370 <HAL_GPIO_WritePin>
}
 80002ec:	46c0      	nop			; (mov r8, r8)
 80002ee:	46bd      	mov	sp, r7
 80002f0:	b002      	add	sp, #8
 80002f2:	bd80      	pop	{r7, pc}
 80002f4:	08002ad0 	.word	0x08002ad0
 80002f8:	48000400 	.word	0x48000400

080002fc <LCD_CMD>:
void LCD_CMD(unsigned char a_CMD)
{
 80002fc:	b580      	push	{r7, lr}
 80002fe:	b082      	sub	sp, #8
 8000300:	af00      	add	r7, sp, #0
 8000302:	0002      	movs	r2, r0
 8000304:	1dfb      	adds	r3, r7, #7
 8000306:	701a      	strb	r2, [r3, #0]
    // Select Command Register
    HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.RS_PIN, 0);
 8000308:	4b15      	ldr	r3, [pc, #84]	; (8000360 <LCD_CMD+0x64>)
 800030a:	6818      	ldr	r0, [r3, #0]
 800030c:	4b14      	ldr	r3, [pc, #80]	; (8000360 <LCD_CMD+0x64>)
 800030e:	89db      	ldrh	r3, [r3, #14]
 8000310:	2200      	movs	r2, #0
 8000312:	0019      	movs	r1, r3
 8000314:	f001 f82c 	bl	8001370 <HAL_GPIO_WritePin>
    // Move The Command Data To LCD
    LCD_DATA(a_CMD);
 8000318:	1dfb      	adds	r3, r7, #7
 800031a:	781b      	ldrb	r3, [r3, #0]
 800031c:	0018      	movs	r0, r3
 800031e:	f7ff ff89 	bl	8000234 <LCD_DATA>
    // Send The EN Clock Signal
    HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.EN_PIN, 1);
 8000322:	4b0f      	ldr	r3, [pc, #60]	; (8000360 <LCD_CMD+0x64>)
 8000324:	6818      	ldr	r0, [r3, #0]
 8000326:	4b0e      	ldr	r3, [pc, #56]	; (8000360 <LCD_CMD+0x64>)
 8000328:	899b      	ldrh	r3, [r3, #12]
 800032a:	2201      	movs	r2, #1
 800032c:	0019      	movs	r1, r3
 800032e:	f001 f81f 	bl	8001370 <HAL_GPIO_WritePin>
    delay_ms(LCD16x2_CfgParam.LCD_EN_Delay);
 8000332:	4b0b      	ldr	r3, [pc, #44]	; (8000360 <LCD_CMD+0x64>)
 8000334:	8a1b      	ldrh	r3, [r3, #16]
 8000336:	0018      	movs	r0, r3
 8000338:	f000 f9aa 	bl	8000690 <delay_ms>
    HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.EN_PIN, 0);
 800033c:	4b08      	ldr	r3, [pc, #32]	; (8000360 <LCD_CMD+0x64>)
 800033e:	6818      	ldr	r0, [r3, #0]
 8000340:	4b07      	ldr	r3, [pc, #28]	; (8000360 <LCD_CMD+0x64>)
 8000342:	899b      	ldrh	r3, [r3, #12]
 8000344:	2200      	movs	r2, #0
 8000346:	0019      	movs	r1, r3
 8000348:	f001 f812 	bl	8001370 <HAL_GPIO_WritePin>
    delay_ms(LCD16x2_CfgParam.LCD_EN_Delay);
 800034c:	4b04      	ldr	r3, [pc, #16]	; (8000360 <LCD_CMD+0x64>)
 800034e:	8a1b      	ldrh	r3, [r3, #16]
 8000350:	0018      	movs	r0, r3
 8000352:	f000 f99d 	bl	8000690 <delay_ms>
}
 8000356:	46c0      	nop			; (mov r8, r8)
 8000358:	46bd      	mov	sp, r7
 800035a:	b002      	add	sp, #8
 800035c:	bd80      	pop	{r7, pc}
 800035e:	46c0      	nop			; (mov r8, r8)
 8000360:	08002ad0 	.word	0x08002ad0

08000364 <LCD_Clear>:
void LCD_Clear()
{
 8000364:	b580      	push	{r7, lr}
 8000366:	af00      	add	r7, sp, #0
    LCD_CMD(0);
 8000368:	2000      	movs	r0, #0
 800036a:	f7ff ffc7 	bl	80002fc <LCD_CMD>
    LCD_CMD(1);
 800036e:	2001      	movs	r0, #1
 8000370:	f7ff ffc4 	bl	80002fc <LCD_CMD>
}
 8000374:	46c0      	nop			; (mov r8, r8)
 8000376:	46bd      	mov	sp, r7
 8000378:	bd80      	pop	{r7, pc}

0800037a <LCD_Set_Cursor>:
void LCD_Set_Cursor(unsigned char c, unsigned char r)
{
 800037a:	b590      	push	{r4, r7, lr}
 800037c:	b085      	sub	sp, #20
 800037e:	af00      	add	r7, sp, #0
 8000380:	0002      	movs	r2, r0
 8000382:	1dfb      	adds	r3, r7, #7
 8000384:	701a      	strb	r2, [r3, #0]
 8000386:	1dbb      	adds	r3, r7, #6
 8000388:	1c0a      	adds	r2, r1, #0
 800038a:	701a      	strb	r2, [r3, #0]
    unsigned char Temp,Low4,High4;
    if(r == 0)
 800038c:	1dbb      	adds	r3, r7, #6
 800038e:	781b      	ldrb	r3, [r3, #0]
 8000390:	2b00      	cmp	r3, #0
 8000392:	d11c      	bne.n	80003ce <LCD_Set_Cursor+0x54>
    {
      Temp  = 0x80 + 0x00 + c; //0x80 is used to move the cursor
 8000394:	210f      	movs	r1, #15
 8000396:	187b      	adds	r3, r7, r1
 8000398:	1dfa      	adds	r2, r7, #7
 800039a:	7812      	ldrb	r2, [r2, #0]
 800039c:	3a80      	subs	r2, #128	; 0x80
 800039e:	701a      	strb	r2, [r3, #0]
      High4 = Temp >> 4;
 80003a0:	200e      	movs	r0, #14
 80003a2:	183b      	adds	r3, r7, r0
 80003a4:	187a      	adds	r2, r7, r1
 80003a6:	7812      	ldrb	r2, [r2, #0]
 80003a8:	0912      	lsrs	r2, r2, #4
 80003aa:	701a      	strb	r2, [r3, #0]
      Low4  = Temp & 0x0F;
 80003ac:	240d      	movs	r4, #13
 80003ae:	193b      	adds	r3, r7, r4
 80003b0:	187a      	adds	r2, r7, r1
 80003b2:	7812      	ldrb	r2, [r2, #0]
 80003b4:	210f      	movs	r1, #15
 80003b6:	400a      	ands	r2, r1
 80003b8:	701a      	strb	r2, [r3, #0]
      LCD_CMD(High4);
 80003ba:	183b      	adds	r3, r7, r0
 80003bc:	781b      	ldrb	r3, [r3, #0]
 80003be:	0018      	movs	r0, r3
 80003c0:	f7ff ff9c 	bl	80002fc <LCD_CMD>
      LCD_CMD(Low4);
 80003c4:	193b      	adds	r3, r7, r4
 80003c6:	781b      	ldrb	r3, [r3, #0]
 80003c8:	0018      	movs	r0, r3
 80003ca:	f7ff ff97 	bl	80002fc <LCD_CMD>
    }
    if(r == 1)
 80003ce:	1dbb      	adds	r3, r7, #6
 80003d0:	781b      	ldrb	r3, [r3, #0]
 80003d2:	2b01      	cmp	r3, #1
 80003d4:	d11c      	bne.n	8000410 <LCD_Set_Cursor+0x96>
    {
      Temp  =  0x80 + 0x40 + c;  //0xC0 + c - 1;
 80003d6:	210f      	movs	r1, #15
 80003d8:	187b      	adds	r3, r7, r1
 80003da:	1dfa      	adds	r2, r7, #7
 80003dc:	7812      	ldrb	r2, [r2, #0]
 80003de:	3a40      	subs	r2, #64	; 0x40
 80003e0:	701a      	strb	r2, [r3, #0]
      High4 = Temp >> 4;
 80003e2:	200e      	movs	r0, #14
 80003e4:	183b      	adds	r3, r7, r0
 80003e6:	187a      	adds	r2, r7, r1
 80003e8:	7812      	ldrb	r2, [r2, #0]
 80003ea:	0912      	lsrs	r2, r2, #4
 80003ec:	701a      	strb	r2, [r3, #0]
      Low4  = Temp & 0x0F;
 80003ee:	240d      	movs	r4, #13
 80003f0:	193b      	adds	r3, r7, r4
 80003f2:	187a      	adds	r2, r7, r1
 80003f4:	7812      	ldrb	r2, [r2, #0]
 80003f6:	210f      	movs	r1, #15
 80003f8:	400a      	ands	r2, r1
 80003fa:	701a      	strb	r2, [r3, #0]
      LCD_CMD(High4);
 80003fc:	183b      	adds	r3, r7, r0
 80003fe:	781b      	ldrb	r3, [r3, #0]
 8000400:	0018      	movs	r0, r3
 8000402:	f7ff ff7b 	bl	80002fc <LCD_CMD>
      LCD_CMD(Low4);
 8000406:	193b      	adds	r3, r7, r4
 8000408:	781b      	ldrb	r3, [r3, #0]
 800040a:	0018      	movs	r0, r3
 800040c:	f7ff ff76 	bl	80002fc <LCD_CMD>
    }

    if(r == 2)
 8000410:	1dbb      	adds	r3, r7, #6
 8000412:	781b      	ldrb	r3, [r3, #0]
 8000414:	2b02      	cmp	r3, #2
 8000416:	d11c      	bne.n	8000452 <LCD_Set_Cursor+0xd8>
    {
      Temp  = 0x80 + 0x14 + c;
 8000418:	210f      	movs	r1, #15
 800041a:	187b      	adds	r3, r7, r1
 800041c:	1dfa      	adds	r2, r7, #7
 800041e:	7812      	ldrb	r2, [r2, #0]
 8000420:	3a6c      	subs	r2, #108	; 0x6c
 8000422:	701a      	strb	r2, [r3, #0]
      High4 = Temp >> 4;
 8000424:	200e      	movs	r0, #14
 8000426:	183b      	adds	r3, r7, r0
 8000428:	187a      	adds	r2, r7, r1
 800042a:	7812      	ldrb	r2, [r2, #0]
 800042c:	0912      	lsrs	r2, r2, #4
 800042e:	701a      	strb	r2, [r3, #0]
      Low4  = Temp & 0x0F;
 8000430:	240d      	movs	r4, #13
 8000432:	193b      	adds	r3, r7, r4
 8000434:	187a      	adds	r2, r7, r1
 8000436:	7812      	ldrb	r2, [r2, #0]
 8000438:	210f      	movs	r1, #15
 800043a:	400a      	ands	r2, r1
 800043c:	701a      	strb	r2, [r3, #0]
      LCD_CMD(High4);
 800043e:	183b      	adds	r3, r7, r0
 8000440:	781b      	ldrb	r3, [r3, #0]
 8000442:	0018      	movs	r0, r3
 8000444:	f7ff ff5a 	bl	80002fc <LCD_CMD>
      LCD_CMD(Low4);
 8000448:	193b      	adds	r3, r7, r4
 800044a:	781b      	ldrb	r3, [r3, #0]
 800044c:	0018      	movs	r0, r3
 800044e:	f7ff ff55 	bl	80002fc <LCD_CMD>
    }

    if(r == 3)
 8000452:	1dbb      	adds	r3, r7, #6
 8000454:	781b      	ldrb	r3, [r3, #0]
 8000456:	2b03      	cmp	r3, #3
 8000458:	d11c      	bne.n	8000494 <LCD_Set_Cursor+0x11a>
    {
      Temp  = 0x80 + 0x54 + c;
 800045a:	210f      	movs	r1, #15
 800045c:	187b      	adds	r3, r7, r1
 800045e:	1dfa      	adds	r2, r7, #7
 8000460:	7812      	ldrb	r2, [r2, #0]
 8000462:	3a2c      	subs	r2, #44	; 0x2c
 8000464:	701a      	strb	r2, [r3, #0]
      High4 = Temp >> 4;
 8000466:	200e      	movs	r0, #14
 8000468:	183b      	adds	r3, r7, r0
 800046a:	187a      	adds	r2, r7, r1
 800046c:	7812      	ldrb	r2, [r2, #0]
 800046e:	0912      	lsrs	r2, r2, #4
 8000470:	701a      	strb	r2, [r3, #0]
      Low4  = Temp & 0x0F;
 8000472:	240d      	movs	r4, #13
 8000474:	193b      	adds	r3, r7, r4
 8000476:	187a      	adds	r2, r7, r1
 8000478:	7812      	ldrb	r2, [r2, #0]
 800047a:	210f      	movs	r1, #15
 800047c:	400a      	ands	r2, r1
 800047e:	701a      	strb	r2, [r3, #0]
      LCD_CMD(High4);
 8000480:	183b      	adds	r3, r7, r0
 8000482:	781b      	ldrb	r3, [r3, #0]
 8000484:	0018      	movs	r0, r3
 8000486:	f7ff ff39 	bl	80002fc <LCD_CMD>
      LCD_CMD(Low4);
 800048a:	193b      	adds	r3, r7, r4
 800048c:	781b      	ldrb	r3, [r3, #0]
 800048e:	0018      	movs	r0, r3
 8000490:	f7ff ff34 	bl	80002fc <LCD_CMD>
    }
    delay_ms(1);
 8000494:	2001      	movs	r0, #1
 8000496:	f000 f8fb 	bl	8000690 <delay_ms>
}
 800049a:	46c0      	nop			; (mov r8, r8)
 800049c:	46bd      	mov	sp, r7
 800049e:	b005      	add	sp, #20
 80004a0:	bd90      	pop	{r4, r7, pc}
	...

080004a4 <LCD_Init>:
void LCD_Init()
{
 80004a4:	b580      	push	{r7, lr}
 80004a6:	af00      	add	r7, sp, #0
//	    __HAL_RCC_GPIOB_CLK_ENABLE();
//	else if(LCD16x2_CfgParam.LCD_GPIO == GPIOC)
//		__HAL_RCC_GPIOC_CLK_ENABLE();
//	else if(LCD16x2_CfgParam.LCD_GPIO == GPIOD)
//		__HAL_RCC_GPIOD_CLK_ENABLE();
	HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.D4_PIN, GPIO_PIN_RESET);
 80004a8:	4b39      	ldr	r3, [pc, #228]	; (8000590 <LCD_Init+0xec>)
 80004aa:	6818      	ldr	r0, [r3, #0]
 80004ac:	4b38      	ldr	r3, [pc, #224]	; (8000590 <LCD_Init+0xec>)
 80004ae:	889b      	ldrh	r3, [r3, #4]
 80004b0:	2200      	movs	r2, #0
 80004b2:	0019      	movs	r1, r3
 80004b4:	f000 ff5c 	bl	8001370 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.D5_PIN, GPIO_PIN_RESET);
 80004b8:	4b35      	ldr	r3, [pc, #212]	; (8000590 <LCD_Init+0xec>)
 80004ba:	6818      	ldr	r0, [r3, #0]
 80004bc:	4b34      	ldr	r3, [pc, #208]	; (8000590 <LCD_Init+0xec>)
 80004be:	88db      	ldrh	r3, [r3, #6]
 80004c0:	2200      	movs	r2, #0
 80004c2:	0019      	movs	r1, r3
 80004c4:	f000 ff54 	bl	8001370 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.D6_PIN, GPIO_PIN_RESET);
 80004c8:	4b31      	ldr	r3, [pc, #196]	; (8000590 <LCD_Init+0xec>)
 80004ca:	6818      	ldr	r0, [r3, #0]
 80004cc:	4b30      	ldr	r3, [pc, #192]	; (8000590 <LCD_Init+0xec>)
 80004ce:	891b      	ldrh	r3, [r3, #8]
 80004d0:	2200      	movs	r2, #0
 80004d2:	0019      	movs	r1, r3
 80004d4:	f000 ff4c 	bl	8001370 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.D7_PIN, GPIO_PIN_RESET);
 80004d8:	4b2d      	ldr	r3, [pc, #180]	; (8000590 <LCD_Init+0xec>)
 80004da:	6818      	ldr	r0, [r3, #0]
 80004dc:	4b2c      	ldr	r3, [pc, #176]	; (8000590 <LCD_Init+0xec>)
 80004de:	895b      	ldrh	r3, [r3, #10]
 80004e0:	2200      	movs	r2, #0
 80004e2:	0019      	movs	r1, r3
 80004e4:	f000 ff44 	bl	8001370 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.RS_PIN, GPIO_PIN_RESET);
 80004e8:	4b29      	ldr	r3, [pc, #164]	; (8000590 <LCD_Init+0xec>)
 80004ea:	6818      	ldr	r0, [r3, #0]
 80004ec:	4b28      	ldr	r3, [pc, #160]	; (8000590 <LCD_Init+0xec>)
 80004ee:	89db      	ldrh	r3, [r3, #14]
 80004f0:	2200      	movs	r2, #0
 80004f2:	0019      	movs	r1, r3
 80004f4:	f000 ff3c 	bl	8001370 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.EN_PIN, GPIO_PIN_RESET);
 80004f8:	4b25      	ldr	r3, [pc, #148]	; (8000590 <LCD_Init+0xec>)
 80004fa:	6818      	ldr	r0, [r3, #0]
 80004fc:	4b24      	ldr	r3, [pc, #144]	; (8000590 <LCD_Init+0xec>)
 80004fe:	899b      	ldrh	r3, [r3, #12]
 8000500:	2200      	movs	r2, #0
 8000502:	0019      	movs	r1, r3
 8000504:	f000 ff34 	bl	8001370 <HAL_GPIO_WritePin>
//	GPIO_InitStruct.Pull = GPIO_NOPULL;
//	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
//	HAL_GPIO_Init(LCD16x2_CfgParam.LCD_GPIO, &GPIO_InitStruct);

	// The Init. Procedure As Described In The Datasheet
    HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.RS_PIN, GPIO_PIN_RESET);
 8000508:	4b21      	ldr	r3, [pc, #132]	; (8000590 <LCD_Init+0xec>)
 800050a:	6818      	ldr	r0, [r3, #0]
 800050c:	4b20      	ldr	r3, [pc, #128]	; (8000590 <LCD_Init+0xec>)
 800050e:	89db      	ldrh	r3, [r3, #14]
 8000510:	2200      	movs	r2, #0
 8000512:	0019      	movs	r1, r3
 8000514:	f000 ff2c 	bl	8001370 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.EN_PIN, GPIO_PIN_RESET);
 8000518:	4b1d      	ldr	r3, [pc, #116]	; (8000590 <LCD_Init+0xec>)
 800051a:	6818      	ldr	r0, [r3, #0]
 800051c:	4b1c      	ldr	r3, [pc, #112]	; (8000590 <LCD_Init+0xec>)
 800051e:	899b      	ldrh	r3, [r3, #12]
 8000520:	2200      	movs	r2, #0
 8000522:	0019      	movs	r1, r3
 8000524:	f000 ff24 	bl	8001370 <HAL_GPIO_WritePin>
    LCD_DATA(0x00);
 8000528:	2000      	movs	r0, #0
 800052a:	f7ff fe83 	bl	8000234 <LCD_DATA>
    delay_ms(150);
 800052e:	2096      	movs	r0, #150	; 0x96
 8000530:	f000 f8ae 	bl	8000690 <delay_ms>
    LCD_CMD(0x03);
 8000534:	2003      	movs	r0, #3
 8000536:	f7ff fee1 	bl	80002fc <LCD_CMD>
    delay_ms(5);
 800053a:	2005      	movs	r0, #5
 800053c:	f000 f8a8 	bl	8000690 <delay_ms>
    LCD_CMD(0x03);
 8000540:	2003      	movs	r0, #3
 8000542:	f7ff fedb 	bl	80002fc <LCD_CMD>
    delay_ms(150);
 8000546:	2096      	movs	r0, #150	; 0x96
 8000548:	f000 f8a2 	bl	8000690 <delay_ms>
    LCD_CMD(0x03);
 800054c:	2003      	movs	r0, #3
 800054e:	f7ff fed5 	bl	80002fc <LCD_CMD>
    LCD_CMD(0x02);
 8000552:	2002      	movs	r0, #2
 8000554:	f7ff fed2 	bl	80002fc <LCD_CMD>
    LCD_CMD(0x02);
 8000558:	2002      	movs	r0, #2
 800055a:	f7ff fecf 	bl	80002fc <LCD_CMD>
    LCD_CMD(0x08);
 800055e:	2008      	movs	r0, #8
 8000560:	f7ff fecc 	bl	80002fc <LCD_CMD>
    LCD_CMD(0x00);
 8000564:	2000      	movs	r0, #0
 8000566:	f7ff fec9 	bl	80002fc <LCD_CMD>
    LCD_CMD(0x0C);
 800056a:	200c      	movs	r0, #12
 800056c:	f7ff fec6 	bl	80002fc <LCD_CMD>
    LCD_CMD(0x00);
 8000570:	2000      	movs	r0, #0
 8000572:	f7ff fec3 	bl	80002fc <LCD_CMD>
    LCD_CMD(0x06);
 8000576:	2006      	movs	r0, #6
 8000578:	f7ff fec0 	bl	80002fc <LCD_CMD>
    LCD_CMD(0x00);
 800057c:	2000      	movs	r0, #0
 800057e:	f7ff febd 	bl	80002fc <LCD_CMD>
    LCD_CMD(0x01);
 8000582:	2001      	movs	r0, #1
 8000584:	f7ff feba 	bl	80002fc <LCD_CMD>
}
 8000588:	46c0      	nop			; (mov r8, r8)
 800058a:	46bd      	mov	sp, r7
 800058c:	bd80      	pop	{r7, pc}
 800058e:	46c0      	nop			; (mov r8, r8)
 8000590:	08002ad0 	.word	0x08002ad0

08000594 <LCD_Write_Char>:
void LCD_Write_Char(char Data)
{
 8000594:	b5b0      	push	{r4, r5, r7, lr}
 8000596:	b084      	sub	sp, #16
 8000598:	af00      	add	r7, sp, #0
 800059a:	0002      	movs	r2, r0
 800059c:	1dfb      	adds	r3, r7, #7
 800059e:	701a      	strb	r2, [r3, #0]
   char Low4,High4;
   Low4  = Data & 0x0F;
 80005a0:	240f      	movs	r4, #15
 80005a2:	193b      	adds	r3, r7, r4
 80005a4:	1dfa      	adds	r2, r7, #7
 80005a6:	7812      	ldrb	r2, [r2, #0]
 80005a8:	210f      	movs	r1, #15
 80005aa:	400a      	ands	r2, r1
 80005ac:	701a      	strb	r2, [r3, #0]
   High4 = Data & 0xF0;
 80005ae:	250e      	movs	r5, #14
 80005b0:	197b      	adds	r3, r7, r5
 80005b2:	1dfa      	adds	r2, r7, #7
 80005b4:	7812      	ldrb	r2, [r2, #0]
 80005b6:	210f      	movs	r1, #15
 80005b8:	438a      	bics	r2, r1
 80005ba:	701a      	strb	r2, [r3, #0]

   HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.RS_PIN, 1);
 80005bc:	4b25      	ldr	r3, [pc, #148]	; (8000654 <LCD_Write_Char+0xc0>)
 80005be:	6818      	ldr	r0, [r3, #0]
 80005c0:	4b24      	ldr	r3, [pc, #144]	; (8000654 <LCD_Write_Char+0xc0>)
 80005c2:	89db      	ldrh	r3, [r3, #14]
 80005c4:	2201      	movs	r2, #1
 80005c6:	0019      	movs	r1, r3
 80005c8:	f000 fed2 	bl	8001370 <HAL_GPIO_WritePin>

   LCD_DATA(High4>>4);
 80005cc:	197b      	adds	r3, r7, r5
 80005ce:	781b      	ldrb	r3, [r3, #0]
 80005d0:	091b      	lsrs	r3, r3, #4
 80005d2:	b2db      	uxtb	r3, r3
 80005d4:	0018      	movs	r0, r3
 80005d6:	f7ff fe2d 	bl	8000234 <LCD_DATA>
   HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.EN_PIN, 1);
 80005da:	4b1e      	ldr	r3, [pc, #120]	; (8000654 <LCD_Write_Char+0xc0>)
 80005dc:	6818      	ldr	r0, [r3, #0]
 80005de:	4b1d      	ldr	r3, [pc, #116]	; (8000654 <LCD_Write_Char+0xc0>)
 80005e0:	899b      	ldrh	r3, [r3, #12]
 80005e2:	2201      	movs	r2, #1
 80005e4:	0019      	movs	r1, r3
 80005e6:	f000 fec3 	bl	8001370 <HAL_GPIO_WritePin>
   delay_ms(LCD16x2_CfgParam.LCD_EN_Delay);
 80005ea:	4b1a      	ldr	r3, [pc, #104]	; (8000654 <LCD_Write_Char+0xc0>)
 80005ec:	8a1b      	ldrh	r3, [r3, #16]
 80005ee:	0018      	movs	r0, r3
 80005f0:	f000 f84e 	bl	8000690 <delay_ms>
   HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.EN_PIN, 0);
 80005f4:	4b17      	ldr	r3, [pc, #92]	; (8000654 <LCD_Write_Char+0xc0>)
 80005f6:	6818      	ldr	r0, [r3, #0]
 80005f8:	4b16      	ldr	r3, [pc, #88]	; (8000654 <LCD_Write_Char+0xc0>)
 80005fa:	899b      	ldrh	r3, [r3, #12]
 80005fc:	2200      	movs	r2, #0
 80005fe:	0019      	movs	r1, r3
 8000600:	f000 feb6 	bl	8001370 <HAL_GPIO_WritePin>
   delay_ms(LCD16x2_CfgParam.LCD_EN_Delay);
 8000604:	4b13      	ldr	r3, [pc, #76]	; (8000654 <LCD_Write_Char+0xc0>)
 8000606:	8a1b      	ldrh	r3, [r3, #16]
 8000608:	0018      	movs	r0, r3
 800060a:	f000 f841 	bl	8000690 <delay_ms>

   LCD_DATA(Low4);
 800060e:	193b      	adds	r3, r7, r4
 8000610:	781b      	ldrb	r3, [r3, #0]
 8000612:	0018      	movs	r0, r3
 8000614:	f7ff fe0e 	bl	8000234 <LCD_DATA>
   HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.EN_PIN, 1);
 8000618:	4b0e      	ldr	r3, [pc, #56]	; (8000654 <LCD_Write_Char+0xc0>)
 800061a:	6818      	ldr	r0, [r3, #0]
 800061c:	4b0d      	ldr	r3, [pc, #52]	; (8000654 <LCD_Write_Char+0xc0>)
 800061e:	899b      	ldrh	r3, [r3, #12]
 8000620:	2201      	movs	r2, #1
 8000622:	0019      	movs	r1, r3
 8000624:	f000 fea4 	bl	8001370 <HAL_GPIO_WritePin>
   delay_ms(LCD16x2_CfgParam.LCD_EN_Delay);
 8000628:	4b0a      	ldr	r3, [pc, #40]	; (8000654 <LCD_Write_Char+0xc0>)
 800062a:	8a1b      	ldrh	r3, [r3, #16]
 800062c:	0018      	movs	r0, r3
 800062e:	f000 f82f 	bl	8000690 <delay_ms>
   HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.EN_PIN, 0);
 8000632:	4b08      	ldr	r3, [pc, #32]	; (8000654 <LCD_Write_Char+0xc0>)
 8000634:	6818      	ldr	r0, [r3, #0]
 8000636:	4b07      	ldr	r3, [pc, #28]	; (8000654 <LCD_Write_Char+0xc0>)
 8000638:	899b      	ldrh	r3, [r3, #12]
 800063a:	2200      	movs	r2, #0
 800063c:	0019      	movs	r1, r3
 800063e:	f000 fe97 	bl	8001370 <HAL_GPIO_WritePin>
   delay_ms(LCD16x2_CfgParam.LCD_EN_Delay);
 8000642:	4b04      	ldr	r3, [pc, #16]	; (8000654 <LCD_Write_Char+0xc0>)
 8000644:	8a1b      	ldrh	r3, [r3, #16]
 8000646:	0018      	movs	r0, r3
 8000648:	f000 f822 	bl	8000690 <delay_ms>
}
 800064c:	46c0      	nop			; (mov r8, r8)
 800064e:	46bd      	mov	sp, r7
 8000650:	b004      	add	sp, #16
 8000652:	bdb0      	pop	{r4, r5, r7, pc}
 8000654:	08002ad0 	.word	0x08002ad0

08000658 <LCD_Write_String>:
void LCD_Write_String(char *str)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b084      	sub	sp, #16
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]
    int i;
    for(i=0;str[i]!='\0';i++)
 8000660:	2300      	movs	r3, #0
 8000662:	60fb      	str	r3, [r7, #12]
 8000664:	e009      	b.n	800067a <LCD_Write_String+0x22>
       LCD_Write_Char(str[i]);
 8000666:	68fb      	ldr	r3, [r7, #12]
 8000668:	687a      	ldr	r2, [r7, #4]
 800066a:	18d3      	adds	r3, r2, r3
 800066c:	781b      	ldrb	r3, [r3, #0]
 800066e:	0018      	movs	r0, r3
 8000670:	f7ff ff90 	bl	8000594 <LCD_Write_Char>
    for(i=0;str[i]!='\0';i++)
 8000674:	68fb      	ldr	r3, [r7, #12]
 8000676:	3301      	adds	r3, #1
 8000678:	60fb      	str	r3, [r7, #12]
 800067a:	68fb      	ldr	r3, [r7, #12]
 800067c:	687a      	ldr	r2, [r7, #4]
 800067e:	18d3      	adds	r3, r2, r3
 8000680:	781b      	ldrb	r3, [r3, #0]
 8000682:	2b00      	cmp	r3, #0
 8000684:	d1ef      	bne.n	8000666 <LCD_Write_String+0xe>
}
 8000686:	46c0      	nop			; (mov r8, r8)
 8000688:	46c0      	nop			; (mov r8, r8)
 800068a:	46bd      	mov	sp, r7
 800068c:	b004      	add	sp, #16
 800068e:	bd80      	pop	{r7, pc}

08000690 <delay_ms>:

const LCD16x2_CfgType LCD16x2_CfgParam;


void delay_ms (uint16_t ms)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b082      	sub	sp, #8
 8000694:	af00      	add	r7, sp, #0
 8000696:	0002      	movs	r2, r0
 8000698:	1dbb      	adds	r3, r7, #6
 800069a:	801a      	strh	r2, [r3, #0]
	__HAL_TIM_SET_COUNTER(&htim14,0);  // set the counter value a 0
 800069c:	4b08      	ldr	r3, [pc, #32]	; (80006c0 <delay_ms+0x30>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	2200      	movs	r2, #0
 80006a2:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim14) < ms);  // wait for the counter to reach the us input in the parameter
 80006a4:	46c0      	nop			; (mov r8, r8)
 80006a6:	4b06      	ldr	r3, [pc, #24]	; (80006c0 <delay_ms+0x30>)
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80006ac:	1dbb      	adds	r3, r7, #6
 80006ae:	881b      	ldrh	r3, [r3, #0]
 80006b0:	429a      	cmp	r2, r3
 80006b2:	d3f8      	bcc.n	80006a6 <delay_ms+0x16>
}
 80006b4:	46c0      	nop			; (mov r8, r8)
 80006b6:	46c0      	nop			; (mov r8, r8)
 80006b8:	46bd      	mov	sp, r7
 80006ba:	b002      	add	sp, #8
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	46c0      	nop			; (mov r8, r8)
 80006c0:	20000090 	.word	0x20000090

080006c4 <HAL_GPIO_EXTI_Callback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b084      	sub	sp, #16
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	0002      	movs	r2, r0
 80006cc:	1dbb      	adds	r3, r7, #6
 80006ce:	801a      	strh	r2, [r3, #0]
    if(GPIO_Pin == GPIO_PIN_3) // If The INT Source Is EXTI Line9 (A9 Pin)
 80006d0:	1dbb      	adds	r3, r7, #6
 80006d2:	881b      	ldrh	r3, [r3, #0]
 80006d4:	2b08      	cmp	r3, #8
 80006d6:	d113      	bne.n	8000700 <HAL_GPIO_EXTI_Callback+0x3c>
    {

    	  static uint32_t last_interrupt_time = 0;
    	  uint32_t interrupt_time = HAL_GetTick(); //millis();
 80006d8:	f000 fbce 	bl	8000e78 <HAL_GetTick>
 80006dc:	0003      	movs	r3, r0
 80006de:	60fb      	str	r3, [r7, #12]

    	  // If interrupts come faster than 200ms, assume it's a bounce and ignore
    	  //   noInterrupts();
    	  if ((interrupt_time - last_interrupt_time) > timeout)
 80006e0:	4b15      	ldr	r3, [pc, #84]	; (8000738 <HAL_GPIO_EXTI_Callback+0x74>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	68fa      	ldr	r2, [r7, #12]
 80006e6:	1ad2      	subs	r2, r2, r3
 80006e8:	4b14      	ldr	r3, [pc, #80]	; (800073c <HAL_GPIO_EXTI_Callback+0x78>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	429a      	cmp	r2, r3
 80006ee:	d904      	bls.n	80006fa <HAL_GPIO_EXTI_Callback+0x36>
    	  {
    	    t1 = HAL_GetTick(); //millis();
 80006f0:	f000 fbc2 	bl	8000e78 <HAL_GetTick>
 80006f4:	0002      	movs	r2, r0
 80006f6:	4b12      	ldr	r3, [pc, #72]	; (8000740 <HAL_GPIO_EXTI_Callback+0x7c>)
 80006f8:	601a      	str	r2, [r3, #0]
    	  }
    	  last_interrupt_time = interrupt_time;
 80006fa:	4b0f      	ldr	r3, [pc, #60]	; (8000738 <HAL_GPIO_EXTI_Callback+0x74>)
 80006fc:	68fa      	ldr	r2, [r7, #12]
 80006fe:	601a      	str	r2, [r3, #0]
    }

    if(GPIO_Pin == GPIO_PIN_4) // If The INT Source Is EXTI Line9 (A9 Pin)
 8000700:	1dbb      	adds	r3, r7, #6
 8000702:	881b      	ldrh	r3, [r3, #0]
 8000704:	2b10      	cmp	r3, #16
 8000706:	d113      	bne.n	8000730 <HAL_GPIO_EXTI_Callback+0x6c>
    {
    	  static uint32_t last_interrupt_time = 0;
    	  uint32_t interrupt_time = HAL_GetTick();  //millis();
 8000708:	f000 fbb6 	bl	8000e78 <HAL_GetTick>
 800070c:	0003      	movs	r3, r0
 800070e:	60bb      	str	r3, [r7, #8]
    	  // noInterrupts();
    	  // If interrupts come faster than 200ms, assume it's a bounce and ignore
    	  if ((interrupt_time - last_interrupt_time) > timeout) // && (int0_flag == 0
 8000710:	4b0c      	ldr	r3, [pc, #48]	; (8000744 <HAL_GPIO_EXTI_Callback+0x80>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	68ba      	ldr	r2, [r7, #8]
 8000716:	1ad2      	subs	r2, r2, r3
 8000718:	4b08      	ldr	r3, [pc, #32]	; (800073c <HAL_GPIO_EXTI_Callback+0x78>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	429a      	cmp	r2, r3
 800071e:	d904      	bls.n	800072a <HAL_GPIO_EXTI_Callback+0x66>
    	  {
    	    t0 = HAL_GetTick(); //millis();
 8000720:	f000 fbaa 	bl	8000e78 <HAL_GetTick>
 8000724:	0002      	movs	r2, r0
 8000726:	4b08      	ldr	r3, [pc, #32]	; (8000748 <HAL_GPIO_EXTI_Callback+0x84>)
 8000728:	601a      	str	r2, [r3, #0]
    	  }
    	  last_interrupt_time = interrupt_time;
 800072a:	4b06      	ldr	r3, [pc, #24]	; (8000744 <HAL_GPIO_EXTI_Callback+0x80>)
 800072c:	68ba      	ldr	r2, [r7, #8]
 800072e:	601a      	str	r2, [r3, #0]
    }
}
 8000730:	46c0      	nop			; (mov r8, r8)
 8000732:	46bd      	mov	sp, r7
 8000734:	b004      	add	sp, #16
 8000736:	bd80      	pop	{r7, pc}
 8000738:	200000ec 	.word	0x200000ec
 800073c:	20000000 	.word	0x20000000
 8000740:	200000e4 	.word	0x200000e4
 8000744:	200000f0 	.word	0x200000f0
 8000748:	200000e8 	.word	0x200000e8

0800074c <print_value>:


/************************** LCD function *****************************/
void print_value(int val)
{
 800074c:	b590      	push	{r4, r7, lr}
 800074e:	b091      	sub	sp, #68	; 0x44
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
  char buff[50];
  sprintf(buff, "%06d", val);
 8000754:	687a      	ldr	r2, [r7, #4]
 8000756:	4907      	ldr	r1, [pc, #28]	; (8000774 <print_value+0x28>)
 8000758:	240c      	movs	r4, #12
 800075a:	193b      	adds	r3, r7, r4
 800075c:	0018      	movs	r0, r3
 800075e:	f001 fd07 	bl	8002170 <siprintf>
  LCD_Write_String(buff);
 8000762:	193b      	adds	r3, r7, r4
 8000764:	0018      	movs	r0, r3
 8000766:	f7ff ff77 	bl	8000658 <LCD_Write_String>
}
 800076a:	46c0      	nop			; (mov r8, r8)
 800076c:	46bd      	mov	sp, r7
 800076e:	b011      	add	sp, #68	; 0x44
 8000770:	bd90      	pop	{r4, r7, pc}
 8000772:	46c0      	nop			; (mov r8, r8)
 8000774:	08002a5c 	.word	0x08002a5c

08000778 <lcd_print_data>:

void lcd_print_data()
{
 8000778:	b580      	push	{r7, lr}
 800077a:	af00      	add	r7, sp, #0
  net = in - out;
 800077c:	4b1b      	ldr	r3, [pc, #108]	; (80007ec <lcd_print_data+0x74>)
 800077e:	881b      	ldrh	r3, [r3, #0]
 8000780:	001a      	movs	r2, r3
 8000782:	4b1b      	ldr	r3, [pc, #108]	; (80007f0 <lcd_print_data+0x78>)
 8000784:	881b      	ldrh	r3, [r3, #0]
 8000786:	1ad2      	subs	r2, r2, r3
 8000788:	4b1a      	ldr	r3, [pc, #104]	; (80007f4 <lcd_print_data+0x7c>)
 800078a:	601a      	str	r2, [r3, #0]

//  if(net < 0)
//  {
//	  net = 0;
//  }
  total = in + out;
 800078c:	4b17      	ldr	r3, [pc, #92]	; (80007ec <lcd_print_data+0x74>)
 800078e:	881b      	ldrh	r3, [r3, #0]
 8000790:	001a      	movs	r2, r3
 8000792:	4b17      	ldr	r3, [pc, #92]	; (80007f0 <lcd_print_data+0x78>)
 8000794:	881b      	ldrh	r3, [r3, #0]
 8000796:	18d3      	adds	r3, r2, r3
 8000798:	001a      	movs	r2, r3
 800079a:	4b17      	ldr	r3, [pc, #92]	; (80007f8 <lcd_print_data+0x80>)
 800079c:	601a      	str	r2, [r3, #0]
  // lcd.clear();
  LCD_Set_Cursor(5, 1);
 800079e:	2101      	movs	r1, #1
 80007a0:	2005      	movs	r0, #5
 80007a2:	f7ff fdea 	bl	800037a <LCD_Set_Cursor>
  // LCD_Write_String(in);
  print_value(in);
 80007a6:	4b11      	ldr	r3, [pc, #68]	; (80007ec <lcd_print_data+0x74>)
 80007a8:	881b      	ldrh	r3, [r3, #0]
 80007aa:	0018      	movs	r0, r3
 80007ac:	f7ff ffce 	bl	800074c <print_value>

  LCD_Set_Cursor(5, 2);
 80007b0:	2102      	movs	r1, #2
 80007b2:	2005      	movs	r0, #5
 80007b4:	f7ff fde1 	bl	800037a <LCD_Set_Cursor>
  // LCD_Write_String(out);
  print_value(out);
 80007b8:	4b0d      	ldr	r3, [pc, #52]	; (80007f0 <lcd_print_data+0x78>)
 80007ba:	881b      	ldrh	r3, [r3, #0]
 80007bc:	0018      	movs	r0, r3
 80007be:	f7ff ffc5 	bl	800074c <print_value>

  //  count= count_in-count_out;
  LCD_Set_Cursor(5, 3);
 80007c2:	2103      	movs	r1, #3
 80007c4:	2005      	movs	r0, #5
 80007c6:	f7ff fdd8 	bl	800037a <LCD_Set_Cursor>
  print_value(net);
 80007ca:	4b0a      	ldr	r3, [pc, #40]	; (80007f4 <lcd_print_data+0x7c>)
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	0018      	movs	r0, r3
 80007d0:	f7ff ffbc 	bl	800074c <print_value>

  LCD_Set_Cursor(14, 3);
 80007d4:	2103      	movs	r1, #3
 80007d6:	200e      	movs	r0, #14
 80007d8:	f7ff fdcf 	bl	800037a <LCD_Set_Cursor>
  print_value(total);
 80007dc:	4b06      	ldr	r3, [pc, #24]	; (80007f8 <lcd_print_data+0x80>)
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	0018      	movs	r0, r3
 80007e2:	f7ff ffb3 	bl	800074c <print_value>
}
 80007e6:	46c0      	nop			; (mov r8, r8)
 80007e8:	46bd      	mov	sp, r7
 80007ea:	bd80      	pop	{r7, pc}
 80007ec:	200000e0 	.word	0x200000e0
 80007f0:	200000e2 	.word	0x200000e2
 80007f4:	200000d8 	.word	0x200000d8
 80007f8:	200000dc 	.word	0x200000dc

080007fc <lcd_default>:
  print_value(total);
  // LCD_Write_String(0);
}

void lcd_default()
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	af00      	add	r7, sp, #0

//  lcd.begin(20, 4);
  LCD_Set_Cursor(0, 0);
 8000800:	2100      	movs	r1, #0
 8000802:	2000      	movs	r0, #0
 8000804:	f7ff fdb9 	bl	800037a <LCD_Set_Cursor>
  // lcd.scrollDisplayLeft(&title[0]);
  LCD_Write_String("HOPE SEC EQP PVT LTD");
 8000808:	4b21      	ldr	r3, [pc, #132]	; (8000890 <lcd_default+0x94>)
 800080a:	0018      	movs	r0, r3
 800080c:	f7ff ff24 	bl	8000658 <LCD_Write_String>
  LCD_Set_Cursor(0, 1);
 8000810:	2101      	movs	r1, #1
 8000812:	2000      	movs	r0, #0
 8000814:	f7ff fdb1 	bl	800037a <LCD_Set_Cursor>
  LCD_Write_String("IN ");
 8000818:	4b1e      	ldr	r3, [pc, #120]	; (8000894 <lcd_default+0x98>)
 800081a:	0018      	movs	r0, r3
 800081c:	f7ff ff1c 	bl	8000658 <LCD_Write_String>
  LCD_Set_Cursor(5, 1);
 8000820:	2101      	movs	r1, #1
 8000822:	2005      	movs	r0, #5
 8000824:	f7ff fda9 	bl	800037a <LCD_Set_Cursor>
  // LCD_Write_String(0);
  print_value(0);
 8000828:	2000      	movs	r0, #0
 800082a:	f7ff ff8f 	bl	800074c <print_value>
  LCD_Set_Cursor(0, 2);
 800082e:	2102      	movs	r1, #2
 8000830:	2000      	movs	r0, #0
 8000832:	f7ff fda2 	bl	800037a <LCD_Set_Cursor>
  LCD_Write_String("OUT ");
 8000836:	4b18      	ldr	r3, [pc, #96]	; (8000898 <lcd_default+0x9c>)
 8000838:	0018      	movs	r0, r3
 800083a:	f7ff ff0d 	bl	8000658 <LCD_Write_String>
  LCD_Set_Cursor(5, 2);
 800083e:	2102      	movs	r1, #2
 8000840:	2005      	movs	r0, #5
 8000842:	f7ff fd9a 	bl	800037a <LCD_Set_Cursor>
  // LCD_Write_String(0);
  print_value(0);
 8000846:	2000      	movs	r0, #0
 8000848:	f7ff ff80 	bl	800074c <print_value>
  LCD_Set_Cursor(0, 3);
 800084c:	2103      	movs	r1, #3
 800084e:	2000      	movs	r0, #0
 8000850:	f7ff fd93 	bl	800037a <LCD_Set_Cursor>
  LCD_Write_String("NET ");
 8000854:	4b11      	ldr	r3, [pc, #68]	; (800089c <lcd_default+0xa0>)
 8000856:	0018      	movs	r0, r3
 8000858:	f7ff fefe 	bl	8000658 <LCD_Write_String>
  LCD_Set_Cursor(5, 3);
 800085c:	2103      	movs	r1, #3
 800085e:	2005      	movs	r0, #5
 8000860:	f7ff fd8b 	bl	800037a <LCD_Set_Cursor>
  // LCD_Write_String(0);
  print_value(0);
 8000864:	2000      	movs	r0, #0
 8000866:	f7ff ff71 	bl	800074c <print_value>

  LCD_Set_Cursor(15, 2);
 800086a:	2102      	movs	r1, #2
 800086c:	200f      	movs	r0, #15
 800086e:	f7ff fd84 	bl	800037a <LCD_Set_Cursor>
  LCD_Write_String("TOTAL");
 8000872:	4b0b      	ldr	r3, [pc, #44]	; (80008a0 <lcd_default+0xa4>)
 8000874:	0018      	movs	r0, r3
 8000876:	f7ff feef 	bl	8000658 <LCD_Write_String>

  LCD_Set_Cursor(14, 3);
 800087a:	2103      	movs	r1, #3
 800087c:	200e      	movs	r0, #14
 800087e:	f7ff fd7c 	bl	800037a <LCD_Set_Cursor>
  // LCD_Write_String(0);
  print_value(0);
 8000882:	2000      	movs	r0, #0
 8000884:	f7ff ff62 	bl	800074c <print_value>
}
 8000888:	46c0      	nop			; (mov r8, r8)
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}
 800088e:	46c0      	nop			; (mov r8, r8)
 8000890:	08002a64 	.word	0x08002a64
 8000894:	08002a7c 	.word	0x08002a7c
 8000898:	08002a80 	.word	0x08002a80
 800089c:	08002a88 	.word	0x08002a88
 80008a0:	08002a90 	.word	0x08002a90

080008a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b082      	sub	sp, #8
 80008a8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008aa:	f000 fa8b 	bl	8000dc4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008ae:	f000 f899 	bl	80009e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008b2:	f000 f915 	bl	8000ae0 <MX_GPIO_Init>
  MX_TIM14_Init();
 80008b6:	f000 f8eb 	bl	8000a90 <MX_TIM14_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 80008ba:	f000 f8d3 	bl	8000a64 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim14); // START TIMER
 80008be:	4b3e      	ldr	r3, [pc, #248]	; (80009b8 <main+0x114>)
 80008c0:	0018      	movs	r0, r3
 80008c2:	f001 fa2b 	bl	8001d1c <HAL_TIM_Base_Start>
//  uint8_t Test[] = ".............Setup Ready........... !!!\r\n"; //Data to send
//  HAL_UART_Transmit(&huart1,Test,sizeof(Test),10);// Sending in normal mode
//  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
  LCD_Init();
 80008c6:	f7ff fded 	bl	80004a4 <LCD_Init>
  LCD_Clear();
 80008ca:	f7ff fd4b 	bl	8000364 <LCD_Clear>

  LCD_Set_Cursor(5, 0);
 80008ce:	2100      	movs	r1, #0
 80008d0:	2005      	movs	r0, #5
 80008d2:	f7ff fd52 	bl	800037a <LCD_Set_Cursor>
  LCD_Write_String("BOOTING");
 80008d6:	4b39      	ldr	r3, [pc, #228]	; (80009bc <main+0x118>)
 80008d8:	0018      	movs	r0, r3
 80008da:	f7ff febd 	bl	8000658 <LCD_Write_String>

  LCD_Set_Cursor(5, 1);
 80008de:	2101      	movs	r1, #1
 80008e0:	2005      	movs	r0, #5
 80008e2:	f7ff fd4a 	bl	800037a <LCD_Set_Cursor>
  LCD_Write_String("PLEASE");
 80008e6:	4b36      	ldr	r3, [pc, #216]	; (80009c0 <main+0x11c>)
 80008e8:	0018      	movs	r0, r3
 80008ea:	f7ff feb5 	bl	8000658 <LCD_Write_String>

  LCD_Set_Cursor(5, 2);
 80008ee:	2102      	movs	r1, #2
 80008f0:	2005      	movs	r0, #5
 80008f2:	f7ff fd42 	bl	800037a <LCD_Set_Cursor>
  LCD_Write_String("WAIT");
 80008f6:	4b33      	ldr	r3, [pc, #204]	; (80009c4 <main+0x120>)
 80008f8:	0018      	movs	r0, r3
 80008fa:	f7ff fead 	bl	8000658 <LCD_Write_String>
  delay_ms(7000);
 80008fe:	4b32      	ldr	r3, [pc, #200]	; (80009c8 <main+0x124>)
 8000900:	0018      	movs	r0, r3
 8000902:	f7ff fec5 	bl	8000690 <delay_ms>
  lcd_default();
 8000906:	f7ff ff79 	bl	80007fc <lcd_default>
  /* USER CODE END 2 */
uint8_t flag = 0;
 800090a:	1dfb      	adds	r3, r7, #7
 800090c:	2200      	movs	r2, #0
 800090e:	701a      	strb	r2, [r3, #0]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(flag)
 8000910:	1dfb      	adds	r3, r7, #7
 8000912:	781b      	ldrb	r3, [r3, #0]
 8000914:	2b00      	cmp	r3, #0
 8000916:	d013      	beq.n	8000940 <main+0x9c>
	  {
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 1);
 8000918:	4b2c      	ldr	r3, [pc, #176]	; (80009cc <main+0x128>)
 800091a:	2201      	movs	r2, #1
 800091c:	2120      	movs	r1, #32
 800091e:	0018      	movs	r0, r3
 8000920:	f000 fd26 	bl	8001370 <HAL_GPIO_WritePin>
		  HAL_Delay(1000);
 8000924:	23fa      	movs	r3, #250	; 0xfa
 8000926:	009b      	lsls	r3, r3, #2
 8000928:	0018      	movs	r0, r3
 800092a:	f000 faaf 	bl	8000e8c <HAL_Delay>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 0);
 800092e:	4b27      	ldr	r3, [pc, #156]	; (80009cc <main+0x128>)
 8000930:	2200      	movs	r2, #0
 8000932:	2120      	movs	r1, #32
 8000934:	0018      	movs	r0, r3
 8000936:	f000 fd1b 	bl	8001370 <HAL_GPIO_WritePin>
		  flag = 0;
 800093a:	1dfb      	adds	r3, r7, #7
 800093c:	2200      	movs	r2, #0
 800093e:	701a      	strb	r2, [r3, #0]
	  }
//	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_5);

//	  HAL_Delay(500);
	  if ((HAL_GetTick() - t1) < timeout && (HAL_GetTick() - t0) < timeout)
 8000940:	f000 fa9a 	bl	8000e78 <HAL_GetTick>
 8000944:	0002      	movs	r2, r0
 8000946:	4b22      	ldr	r3, [pc, #136]	; (80009d0 <main+0x12c>)
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	1ad2      	subs	r2, r2, r3
 800094c:	4b21      	ldr	r3, [pc, #132]	; (80009d4 <main+0x130>)
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	429a      	cmp	r2, r3
 8000952:	d22e      	bcs.n	80009b2 <main+0x10e>
 8000954:	f000 fa90 	bl	8000e78 <HAL_GetTick>
 8000958:	0002      	movs	r2, r0
 800095a:	4b1f      	ldr	r3, [pc, #124]	; (80009d8 <main+0x134>)
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	1ad2      	subs	r2, r2, r3
 8000960:	4b1c      	ldr	r3, [pc, #112]	; (80009d4 <main+0x130>)
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	429a      	cmp	r2, r3
 8000966:	d224      	bcs.n	80009b2 <main+0x10e>
	  {
	    if (t1 > t0)
 8000968:	4b19      	ldr	r3, [pc, #100]	; (80009d0 <main+0x12c>)
 800096a:	681a      	ldr	r2, [r3, #0]
 800096c:	4b1a      	ldr	r3, [pc, #104]	; (80009d8 <main+0x134>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	429a      	cmp	r2, r3
 8000972:	d90f      	bls.n	8000994 <main+0xf0>
	    {
	      in++;
 8000974:	4b19      	ldr	r3, [pc, #100]	; (80009dc <main+0x138>)
 8000976:	881b      	ldrh	r3, [r3, #0]
 8000978:	3301      	adds	r3, #1
 800097a:	b29a      	uxth	r2, r3
 800097c:	4b17      	ldr	r3, [pc, #92]	; (80009dc <main+0x138>)
 800097e:	801a      	strh	r2, [r3, #0]
//	      Serial.print("IN :");
//	      Serial.println(in);
	      t0 = 0;
 8000980:	4b15      	ldr	r3, [pc, #84]	; (80009d8 <main+0x134>)
 8000982:	2200      	movs	r2, #0
 8000984:	601a      	str	r2, [r3, #0]
	      t1 = 0;
 8000986:	4b12      	ldr	r3, [pc, #72]	; (80009d0 <main+0x12c>)
 8000988:	2200      	movs	r2, #0
 800098a:	601a      	str	r2, [r3, #0]
	      flag = 1;
 800098c:	1dfb      	adds	r3, r7, #7
 800098e:	2201      	movs	r2, #1
 8000990:	701a      	strb	r2, [r3, #0]
 8000992:	e00e      	b.n	80009b2 <main+0x10e>
	    }

	    else
	    {
	      out++;
 8000994:	4b12      	ldr	r3, [pc, #72]	; (80009e0 <main+0x13c>)
 8000996:	881b      	ldrh	r3, [r3, #0]
 8000998:	3301      	adds	r3, #1
 800099a:	b29a      	uxth	r2, r3
 800099c:	4b10      	ldr	r3, [pc, #64]	; (80009e0 <main+0x13c>)
 800099e:	801a      	strh	r2, [r3, #0]

//	      Serial.print("OUT :");
//	      Serial.println(out);
	      t0 = 0;
 80009a0:	4b0d      	ldr	r3, [pc, #52]	; (80009d8 <main+0x134>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	601a      	str	r2, [r3, #0]
	      t1 = 0;
 80009a6:	4b0a      	ldr	r3, [pc, #40]	; (80009d0 <main+0x12c>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	601a      	str	r2, [r3, #0]
	      flag = 1;
 80009ac:	1dfb      	adds	r3, r7, #7
 80009ae:	2201      	movs	r2, #1
 80009b0:	701a      	strb	r2, [r3, #0]
	    }
	  }

	  lcd_print_data();
 80009b2:	f7ff fee1 	bl	8000778 <lcd_print_data>
	  if(flag)
 80009b6:	e7ab      	b.n	8000910 <main+0x6c>
 80009b8:	20000090 	.word	0x20000090
 80009bc:	08002a98 	.word	0x08002a98
 80009c0:	08002aa0 	.word	0x08002aa0
 80009c4:	08002aa8 	.word	0x08002aa8
 80009c8:	00001b58 	.word	0x00001b58
 80009cc:	48000400 	.word	0x48000400
 80009d0:	200000e4 	.word	0x200000e4
 80009d4:	20000000 	.word	0x20000000
 80009d8:	200000e8 	.word	0x200000e8
 80009dc:	200000e0 	.word	0x200000e0
 80009e0:	200000e2 	.word	0x200000e2

080009e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009e4:	b590      	push	{r4, r7, lr}
 80009e6:	b091      	sub	sp, #68	; 0x44
 80009e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009ea:	2410      	movs	r4, #16
 80009ec:	193b      	adds	r3, r7, r4
 80009ee:	0018      	movs	r0, r3
 80009f0:	2330      	movs	r3, #48	; 0x30
 80009f2:	001a      	movs	r2, r3
 80009f4:	2100      	movs	r1, #0
 80009f6:	f001 fbb3 	bl	8002160 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009fa:	003b      	movs	r3, r7
 80009fc:	0018      	movs	r0, r3
 80009fe:	2310      	movs	r3, #16
 8000a00:	001a      	movs	r2, r3
 8000a02:	2100      	movs	r1, #0
 8000a04:	f001 fbac 	bl	8002160 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a08:	0021      	movs	r1, r4
 8000a0a:	187b      	adds	r3, r7, r1
 8000a0c:	2202      	movs	r2, #2
 8000a0e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a10:	187b      	adds	r3, r7, r1
 8000a12:	2201      	movs	r2, #1
 8000a14:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a16:	187b      	adds	r3, r7, r1
 8000a18:	2210      	movs	r2, #16
 8000a1a:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000a1c:	187b      	adds	r3, r7, r1
 8000a1e:	2200      	movs	r2, #0
 8000a20:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a22:	187b      	adds	r3, r7, r1
 8000a24:	0018      	movs	r0, r3
 8000a26:	f000 fcdd 	bl	80013e4 <HAL_RCC_OscConfig>
 8000a2a:	1e03      	subs	r3, r0, #0
 8000a2c:	d001      	beq.n	8000a32 <SystemClock_Config+0x4e>
  {
    Error_Handler();
 8000a2e:	f000 f8dd 	bl	8000bec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a32:	003b      	movs	r3, r7
 8000a34:	2207      	movs	r2, #7
 8000a36:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000a38:	003b      	movs	r3, r7
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a3e:	003b      	movs	r3, r7
 8000a40:	2200      	movs	r2, #0
 8000a42:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a44:	003b      	movs	r3, r7
 8000a46:	2200      	movs	r2, #0
 8000a48:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000a4a:	003b      	movs	r3, r7
 8000a4c:	2100      	movs	r1, #0
 8000a4e:	0018      	movs	r0, r3
 8000a50:	f000 ffe2 	bl	8001a18 <HAL_RCC_ClockConfig>
 8000a54:	1e03      	subs	r3, r0, #0
 8000a56:	d001      	beq.n	8000a5c <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000a58:	f000 f8c8 	bl	8000bec <Error_Handler>
  }
}
 8000a5c:	46c0      	nop			; (mov r8, r8)
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	b011      	add	sp, #68	; 0x44
 8000a62:	bd90      	pop	{r4, r7, pc}

08000a64 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	af00      	add	r7, sp, #0
  /* EXTI2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 0, 0);
 8000a68:	2200      	movs	r2, #0
 8000a6a:	2100      	movs	r1, #0
 8000a6c:	2006      	movs	r0, #6
 8000a6e:	f000 fadd 	bl	800102c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 8000a72:	2006      	movs	r0, #6
 8000a74:	f000 faef 	bl	8001056 <HAL_NVIC_EnableIRQ>
  /* EXTI4_15_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8000a78:	2200      	movs	r2, #0
 8000a7a:	2100      	movs	r1, #0
 8000a7c:	2007      	movs	r0, #7
 8000a7e:	f000 fad5 	bl	800102c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8000a82:	2007      	movs	r0, #7
 8000a84:	f000 fae7 	bl	8001056 <HAL_NVIC_EnableIRQ>
}
 8000a88:	46c0      	nop			; (mov r8, r8)
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}
	...

08000a90 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8000a94:	4b0e      	ldr	r3, [pc, #56]	; (8000ad0 <MX_TIM14_Init+0x40>)
 8000a96:	4a0f      	ldr	r2, [pc, #60]	; (8000ad4 <MX_TIM14_Init+0x44>)
 8000a98:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 16000-1;
 8000a9a:	4b0d      	ldr	r3, [pc, #52]	; (8000ad0 <MX_TIM14_Init+0x40>)
 8000a9c:	4a0e      	ldr	r2, [pc, #56]	; (8000ad8 <MX_TIM14_Init+0x48>)
 8000a9e:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000aa0:	4b0b      	ldr	r3, [pc, #44]	; (8000ad0 <MX_TIM14_Init+0x40>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 65535;
 8000aa6:	4b0a      	ldr	r3, [pc, #40]	; (8000ad0 <MX_TIM14_Init+0x40>)
 8000aa8:	4a0c      	ldr	r2, [pc, #48]	; (8000adc <MX_TIM14_Init+0x4c>)
 8000aaa:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000aac:	4b08      	ldr	r3, [pc, #32]	; (8000ad0 <MX_TIM14_Init+0x40>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000ab2:	4b07      	ldr	r3, [pc, #28]	; (8000ad0 <MX_TIM14_Init+0x40>)
 8000ab4:	2280      	movs	r2, #128	; 0x80
 8000ab6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8000ab8:	4b05      	ldr	r3, [pc, #20]	; (8000ad0 <MX_TIM14_Init+0x40>)
 8000aba:	0018      	movs	r0, r3
 8000abc:	f001 f8de 	bl	8001c7c <HAL_TIM_Base_Init>
 8000ac0:	1e03      	subs	r3, r0, #0
 8000ac2:	d001      	beq.n	8000ac8 <MX_TIM14_Init+0x38>
  {
    Error_Handler();
 8000ac4:	f000 f892 	bl	8000bec <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8000ac8:	46c0      	nop			; (mov r8, r8)
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	46c0      	nop			; (mov r8, r8)
 8000ad0:	20000090 	.word	0x20000090
 8000ad4:	40002000 	.word	0x40002000
 8000ad8:	00003e7f 	.word	0x00003e7f
 8000adc:	0000ffff 	.word	0x0000ffff

08000ae0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ae0:	b590      	push	{r4, r7, lr}
 8000ae2:	b089      	sub	sp, #36	; 0x24
 8000ae4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ae6:	240c      	movs	r4, #12
 8000ae8:	193b      	adds	r3, r7, r4
 8000aea:	0018      	movs	r0, r3
 8000aec:	2314      	movs	r3, #20
 8000aee:	001a      	movs	r2, r3
 8000af0:	2100      	movs	r1, #0
 8000af2:	f001 fb35 	bl	8002160 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000af6:	4b3b      	ldr	r3, [pc, #236]	; (8000be4 <MX_GPIO_Init+0x104>)
 8000af8:	695a      	ldr	r2, [r3, #20]
 8000afa:	4b3a      	ldr	r3, [pc, #232]	; (8000be4 <MX_GPIO_Init+0x104>)
 8000afc:	2180      	movs	r1, #128	; 0x80
 8000afe:	03c9      	lsls	r1, r1, #15
 8000b00:	430a      	orrs	r2, r1
 8000b02:	615a      	str	r2, [r3, #20]
 8000b04:	4b37      	ldr	r3, [pc, #220]	; (8000be4 <MX_GPIO_Init+0x104>)
 8000b06:	695a      	ldr	r2, [r3, #20]
 8000b08:	2380      	movs	r3, #128	; 0x80
 8000b0a:	03db      	lsls	r3, r3, #15
 8000b0c:	4013      	ands	r3, r2
 8000b0e:	60bb      	str	r3, [r7, #8]
 8000b10:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b12:	4b34      	ldr	r3, [pc, #208]	; (8000be4 <MX_GPIO_Init+0x104>)
 8000b14:	695a      	ldr	r2, [r3, #20]
 8000b16:	4b33      	ldr	r3, [pc, #204]	; (8000be4 <MX_GPIO_Init+0x104>)
 8000b18:	2180      	movs	r1, #128	; 0x80
 8000b1a:	0289      	lsls	r1, r1, #10
 8000b1c:	430a      	orrs	r2, r1
 8000b1e:	615a      	str	r2, [r3, #20]
 8000b20:	4b30      	ldr	r3, [pc, #192]	; (8000be4 <MX_GPIO_Init+0x104>)
 8000b22:	695a      	ldr	r2, [r3, #20]
 8000b24:	2380      	movs	r3, #128	; 0x80
 8000b26:	029b      	lsls	r3, r3, #10
 8000b28:	4013      	ands	r3, r2
 8000b2a:	607b      	str	r3, [r7, #4]
 8000b2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b2e:	4b2d      	ldr	r3, [pc, #180]	; (8000be4 <MX_GPIO_Init+0x104>)
 8000b30:	695a      	ldr	r2, [r3, #20]
 8000b32:	4b2c      	ldr	r3, [pc, #176]	; (8000be4 <MX_GPIO_Init+0x104>)
 8000b34:	2180      	movs	r1, #128	; 0x80
 8000b36:	02c9      	lsls	r1, r1, #11
 8000b38:	430a      	orrs	r2, r1
 8000b3a:	615a      	str	r2, [r3, #20]
 8000b3c:	4b29      	ldr	r3, [pc, #164]	; (8000be4 <MX_GPIO_Init+0x104>)
 8000b3e:	695a      	ldr	r2, [r3, #20]
 8000b40:	2380      	movs	r3, #128	; 0x80
 8000b42:	02db      	lsls	r3, r3, #11
 8000b44:	4013      	ands	r3, r2
 8000b46:	603b      	str	r3, [r7, #0]
 8000b48:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, EN_Pin|RS_Pin|D5_Pin|D6_Pin
 8000b4a:	23f8      	movs	r3, #248	; 0xf8
 8000b4c:	0159      	lsls	r1, r3, #5
 8000b4e:	2390      	movs	r3, #144	; 0x90
 8000b50:	05db      	lsls	r3, r3, #23
 8000b52:	2200      	movs	r2, #0
 8000b54:	0018      	movs	r0, r3
 8000b56:	f000 fc0b 	bl	8001370 <HAL_GPIO_WritePin>
                          |D4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D7_Pin|GPIO_PIN_5, GPIO_PIN_RESET);
 8000b5a:	4b23      	ldr	r3, [pc, #140]	; (8000be8 <MX_GPIO_Init+0x108>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	2128      	movs	r1, #40	; 0x28
 8000b60:	0018      	movs	r0, r3
 8000b62:	f000 fc05 	bl	8001370 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : INT1_Pin INT2_Pin */
  GPIO_InitStruct.Pin = INT1_Pin|INT2_Pin;
 8000b66:	193b      	adds	r3, r7, r4
 8000b68:	2218      	movs	r2, #24
 8000b6a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b6c:	193b      	adds	r3, r7, r4
 8000b6e:	2288      	movs	r2, #136	; 0x88
 8000b70:	0352      	lsls	r2, r2, #13
 8000b72:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b74:	193b      	adds	r3, r7, r4
 8000b76:	2200      	movs	r2, #0
 8000b78:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b7a:	193a      	adds	r2, r7, r4
 8000b7c:	2390      	movs	r3, #144	; 0x90
 8000b7e:	05db      	lsls	r3, r3, #23
 8000b80:	0011      	movs	r1, r2
 8000b82:	0018      	movs	r0, r3
 8000b84:	f000 fa84 	bl	8001090 <HAL_GPIO_Init>

  /*Configure GPIO pins : EN_Pin RS_Pin D5_Pin D6_Pin
                           D4_Pin */
  GPIO_InitStruct.Pin = EN_Pin|RS_Pin|D5_Pin|D6_Pin
 8000b88:	0021      	movs	r1, r4
 8000b8a:	187b      	adds	r3, r7, r1
 8000b8c:	22f8      	movs	r2, #248	; 0xf8
 8000b8e:	0152      	lsls	r2, r2, #5
 8000b90:	601a      	str	r2, [r3, #0]
                          |D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b92:	000c      	movs	r4, r1
 8000b94:	193b      	adds	r3, r7, r4
 8000b96:	2201      	movs	r2, #1
 8000b98:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9a:	193b      	adds	r3, r7, r4
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba0:	193b      	adds	r3, r7, r4
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ba6:	193a      	adds	r2, r7, r4
 8000ba8:	2390      	movs	r3, #144	; 0x90
 8000baa:	05db      	lsls	r3, r3, #23
 8000bac:	0011      	movs	r1, r2
 8000bae:	0018      	movs	r0, r3
 8000bb0:	f000 fa6e 	bl	8001090 <HAL_GPIO_Init>

  /*Configure GPIO pins : D7_Pin PB5 */
  GPIO_InitStruct.Pin = D7_Pin|GPIO_PIN_5;
 8000bb4:	0021      	movs	r1, r4
 8000bb6:	187b      	adds	r3, r7, r1
 8000bb8:	2228      	movs	r2, #40	; 0x28
 8000bba:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bbc:	187b      	adds	r3, r7, r1
 8000bbe:	2201      	movs	r2, #1
 8000bc0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc2:	187b      	adds	r3, r7, r1
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bc8:	187b      	adds	r3, r7, r1
 8000bca:	2200      	movs	r2, #0
 8000bcc:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bce:	187b      	adds	r3, r7, r1
 8000bd0:	4a05      	ldr	r2, [pc, #20]	; (8000be8 <MX_GPIO_Init+0x108>)
 8000bd2:	0019      	movs	r1, r3
 8000bd4:	0010      	movs	r0, r2
 8000bd6:	f000 fa5b 	bl	8001090 <HAL_GPIO_Init>

}
 8000bda:	46c0      	nop			; (mov r8, r8)
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	b009      	add	sp, #36	; 0x24
 8000be0:	bd90      	pop	{r4, r7, pc}
 8000be2:	46c0      	nop			; (mov r8, r8)
 8000be4:	40021000 	.word	0x40021000
 8000be8:	48000400 	.word	0x48000400

08000bec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bf0:	b672      	cpsid	i
}
 8000bf2:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bf4:	e7fe      	b.n	8000bf4 <Error_Handler+0x8>
	...

08000bf8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b082      	sub	sp, #8
 8000bfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bfe:	4b0f      	ldr	r3, [pc, #60]	; (8000c3c <HAL_MspInit+0x44>)
 8000c00:	699a      	ldr	r2, [r3, #24]
 8000c02:	4b0e      	ldr	r3, [pc, #56]	; (8000c3c <HAL_MspInit+0x44>)
 8000c04:	2101      	movs	r1, #1
 8000c06:	430a      	orrs	r2, r1
 8000c08:	619a      	str	r2, [r3, #24]
 8000c0a:	4b0c      	ldr	r3, [pc, #48]	; (8000c3c <HAL_MspInit+0x44>)
 8000c0c:	699b      	ldr	r3, [r3, #24]
 8000c0e:	2201      	movs	r2, #1
 8000c10:	4013      	ands	r3, r2
 8000c12:	607b      	str	r3, [r7, #4]
 8000c14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c16:	4b09      	ldr	r3, [pc, #36]	; (8000c3c <HAL_MspInit+0x44>)
 8000c18:	69da      	ldr	r2, [r3, #28]
 8000c1a:	4b08      	ldr	r3, [pc, #32]	; (8000c3c <HAL_MspInit+0x44>)
 8000c1c:	2180      	movs	r1, #128	; 0x80
 8000c1e:	0549      	lsls	r1, r1, #21
 8000c20:	430a      	orrs	r2, r1
 8000c22:	61da      	str	r2, [r3, #28]
 8000c24:	4b05      	ldr	r3, [pc, #20]	; (8000c3c <HAL_MspInit+0x44>)
 8000c26:	69da      	ldr	r2, [r3, #28]
 8000c28:	2380      	movs	r3, #128	; 0x80
 8000c2a:	055b      	lsls	r3, r3, #21
 8000c2c:	4013      	ands	r3, r2
 8000c2e:	603b      	str	r3, [r7, #0]
 8000c30:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c32:	46c0      	nop			; (mov r8, r8)
 8000c34:	46bd      	mov	sp, r7
 8000c36:	b002      	add	sp, #8
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	46c0      	nop			; (mov r8, r8)
 8000c3c:	40021000 	.word	0x40021000

08000c40 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b084      	sub	sp, #16
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM14)
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	4a0e      	ldr	r2, [pc, #56]	; (8000c88 <HAL_TIM_Base_MspInit+0x48>)
 8000c4e:	4293      	cmp	r3, r2
 8000c50:	d115      	bne.n	8000c7e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 8000c52:	4b0e      	ldr	r3, [pc, #56]	; (8000c8c <HAL_TIM_Base_MspInit+0x4c>)
 8000c54:	69da      	ldr	r2, [r3, #28]
 8000c56:	4b0d      	ldr	r3, [pc, #52]	; (8000c8c <HAL_TIM_Base_MspInit+0x4c>)
 8000c58:	2180      	movs	r1, #128	; 0x80
 8000c5a:	0049      	lsls	r1, r1, #1
 8000c5c:	430a      	orrs	r2, r1
 8000c5e:	61da      	str	r2, [r3, #28]
 8000c60:	4b0a      	ldr	r3, [pc, #40]	; (8000c8c <HAL_TIM_Base_MspInit+0x4c>)
 8000c62:	69da      	ldr	r2, [r3, #28]
 8000c64:	2380      	movs	r3, #128	; 0x80
 8000c66:	005b      	lsls	r3, r3, #1
 8000c68:	4013      	ands	r3, r2
 8000c6a:	60fb      	str	r3, [r7, #12]
 8000c6c:	68fb      	ldr	r3, [r7, #12]
    /* TIM14 interrupt Init */
    HAL_NVIC_SetPriority(TIM14_IRQn, 0, 0);
 8000c6e:	2200      	movs	r2, #0
 8000c70:	2100      	movs	r1, #0
 8000c72:	2013      	movs	r0, #19
 8000c74:	f000 f9da 	bl	800102c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM14_IRQn);
 8000c78:	2013      	movs	r0, #19
 8000c7a:	f000 f9ec 	bl	8001056 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8000c7e:	46c0      	nop			; (mov r8, r8)
 8000c80:	46bd      	mov	sp, r7
 8000c82:	b004      	add	sp, #16
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	46c0      	nop			; (mov r8, r8)
 8000c88:	40002000 	.word	0x40002000
 8000c8c:	40021000 	.word	0x40021000

08000c90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c94:	e7fe      	b.n	8000c94 <NMI_Handler+0x4>

08000c96 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c96:	b580      	push	{r7, lr}
 8000c98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c9a:	e7fe      	b.n	8000c9a <HardFault_Handler+0x4>

08000c9c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000ca0:	46c0      	nop			; (mov r8, r8)
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}

08000ca6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ca6:	b580      	push	{r7, lr}
 8000ca8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000caa:	46c0      	nop			; (mov r8, r8)
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bd80      	pop	{r7, pc}

08000cb0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cb4:	f000 f8ce 	bl	8000e54 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cb8:	46c0      	nop			; (mov r8, r8)
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}

08000cbe <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 8000cbe:	b580      	push	{r7, lr}
 8000cc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */

  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT1_Pin);
 8000cc2:	2008      	movs	r0, #8
 8000cc4:	f000 fb72 	bl	80013ac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 8000cc8:	46c0      	nop			; (mov r8, r8)
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}

08000cce <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8000cce:	b580      	push	{r7, lr}
 8000cd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT2_Pin);
 8000cd2:	2010      	movs	r0, #16
 8000cd4:	f000 fb6a 	bl	80013ac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8000cd8:	46c0      	nop			; (mov r8, r8)
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}
	...

08000ce0 <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM14_IRQn 0 */

  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8000ce4:	4b03      	ldr	r3, [pc, #12]	; (8000cf4 <TIM14_IRQHandler+0x14>)
 8000ce6:	0018      	movs	r0, r3
 8000ce8:	f001 f856 	bl	8001d98 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 8000cec:	46c0      	nop			; (mov r8, r8)
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	46c0      	nop			; (mov r8, r8)
 8000cf4:	20000090 	.word	0x20000090

08000cf8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b086      	sub	sp, #24
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d00:	4a14      	ldr	r2, [pc, #80]	; (8000d54 <_sbrk+0x5c>)
 8000d02:	4b15      	ldr	r3, [pc, #84]	; (8000d58 <_sbrk+0x60>)
 8000d04:	1ad3      	subs	r3, r2, r3
 8000d06:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d08:	697b      	ldr	r3, [r7, #20]
 8000d0a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d0c:	4b13      	ldr	r3, [pc, #76]	; (8000d5c <_sbrk+0x64>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d102      	bne.n	8000d1a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d14:	4b11      	ldr	r3, [pc, #68]	; (8000d5c <_sbrk+0x64>)
 8000d16:	4a12      	ldr	r2, [pc, #72]	; (8000d60 <_sbrk+0x68>)
 8000d18:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d1a:	4b10      	ldr	r3, [pc, #64]	; (8000d5c <_sbrk+0x64>)
 8000d1c:	681a      	ldr	r2, [r3, #0]
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	18d3      	adds	r3, r2, r3
 8000d22:	693a      	ldr	r2, [r7, #16]
 8000d24:	429a      	cmp	r2, r3
 8000d26:	d207      	bcs.n	8000d38 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d28:	f001 f9f0 	bl	800210c <__errno>
 8000d2c:	0003      	movs	r3, r0
 8000d2e:	220c      	movs	r2, #12
 8000d30:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d32:	2301      	movs	r3, #1
 8000d34:	425b      	negs	r3, r3
 8000d36:	e009      	b.n	8000d4c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d38:	4b08      	ldr	r3, [pc, #32]	; (8000d5c <_sbrk+0x64>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d3e:	4b07      	ldr	r3, [pc, #28]	; (8000d5c <_sbrk+0x64>)
 8000d40:	681a      	ldr	r2, [r3, #0]
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	18d2      	adds	r2, r2, r3
 8000d46:	4b05      	ldr	r3, [pc, #20]	; (8000d5c <_sbrk+0x64>)
 8000d48:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000d4a:	68fb      	ldr	r3, [r7, #12]
}
 8000d4c:	0018      	movs	r0, r3
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	b006      	add	sp, #24
 8000d52:	bd80      	pop	{r7, pc}
 8000d54:	20001000 	.word	0x20001000
 8000d58:	00000400 	.word	0x00000400
 8000d5c:	200000f4 	.word	0x200000f4
 8000d60:	20000110 	.word	0x20000110

08000d64 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000d68:	46c0      	nop			; (mov r8, r8)
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}
	...

08000d70 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000d70:	480d      	ldr	r0, [pc, #52]	; (8000da8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000d72:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d74:	480d      	ldr	r0, [pc, #52]	; (8000dac <LoopForever+0x6>)
  ldr r1, =_edata
 8000d76:	490e      	ldr	r1, [pc, #56]	; (8000db0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d78:	4a0e      	ldr	r2, [pc, #56]	; (8000db4 <LoopForever+0xe>)
  movs r3, #0
 8000d7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d7c:	e002      	b.n	8000d84 <LoopCopyDataInit>

08000d7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d82:	3304      	adds	r3, #4

08000d84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d88:	d3f9      	bcc.n	8000d7e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d8a:	4a0b      	ldr	r2, [pc, #44]	; (8000db8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d8c:	4c0b      	ldr	r4, [pc, #44]	; (8000dbc <LoopForever+0x16>)
  movs r3, #0
 8000d8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d90:	e001      	b.n	8000d96 <LoopFillZerobss>

08000d92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d94:	3204      	adds	r2, #4

08000d96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d98:	d3fb      	bcc.n	8000d92 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000d9a:	f7ff ffe3 	bl	8000d64 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000d9e:	f001 f9bb 	bl	8002118 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000da2:	f7ff fd7f 	bl	80008a4 <main>

08000da6 <LoopForever>:

LoopForever:
    b LoopForever
 8000da6:	e7fe      	b.n	8000da6 <LoopForever>
  ldr   r0, =_estack
 8000da8:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 8000dac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000db0:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000db4:	08002b30 	.word	0x08002b30
  ldr r2, =_sbss
 8000db8:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000dbc:	2000010c 	.word	0x2000010c

08000dc0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000dc0:	e7fe      	b.n	8000dc0 <ADC1_IRQHandler>
	...

08000dc4 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000dc8:	4b07      	ldr	r3, [pc, #28]	; (8000de8 <HAL_Init+0x24>)
 8000dca:	681a      	ldr	r2, [r3, #0]
 8000dcc:	4b06      	ldr	r3, [pc, #24]	; (8000de8 <HAL_Init+0x24>)
 8000dce:	2110      	movs	r1, #16
 8000dd0:	430a      	orrs	r2, r1
 8000dd2:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000dd4:	2003      	movs	r0, #3
 8000dd6:	f000 f809 	bl	8000dec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000dda:	f7ff ff0d 	bl	8000bf8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000dde:	2300      	movs	r3, #0
}
 8000de0:	0018      	movs	r0, r3
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	46c0      	nop			; (mov r8, r8)
 8000de8:	40022000 	.word	0x40022000

08000dec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dec:	b590      	push	{r4, r7, lr}
 8000dee:	b083      	sub	sp, #12
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000df4:	4b14      	ldr	r3, [pc, #80]	; (8000e48 <HAL_InitTick+0x5c>)
 8000df6:	681c      	ldr	r4, [r3, #0]
 8000df8:	4b14      	ldr	r3, [pc, #80]	; (8000e4c <HAL_InitTick+0x60>)
 8000dfa:	781b      	ldrb	r3, [r3, #0]
 8000dfc:	0019      	movs	r1, r3
 8000dfe:	23fa      	movs	r3, #250	; 0xfa
 8000e00:	0098      	lsls	r0, r3, #2
 8000e02:	f7ff f98b 	bl	800011c <__udivsi3>
 8000e06:	0003      	movs	r3, r0
 8000e08:	0019      	movs	r1, r3
 8000e0a:	0020      	movs	r0, r4
 8000e0c:	f7ff f986 	bl	800011c <__udivsi3>
 8000e10:	0003      	movs	r3, r0
 8000e12:	0018      	movs	r0, r3
 8000e14:	f000 f92f 	bl	8001076 <HAL_SYSTICK_Config>
 8000e18:	1e03      	subs	r3, r0, #0
 8000e1a:	d001      	beq.n	8000e20 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000e1c:	2301      	movs	r3, #1
 8000e1e:	e00f      	b.n	8000e40 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	2b03      	cmp	r3, #3
 8000e24:	d80b      	bhi.n	8000e3e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e26:	6879      	ldr	r1, [r7, #4]
 8000e28:	2301      	movs	r3, #1
 8000e2a:	425b      	negs	r3, r3
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	0018      	movs	r0, r3
 8000e30:	f000 f8fc 	bl	800102c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e34:	4b06      	ldr	r3, [pc, #24]	; (8000e50 <HAL_InitTick+0x64>)
 8000e36:	687a      	ldr	r2, [r7, #4]
 8000e38:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	e000      	b.n	8000e40 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000e3e:	2301      	movs	r3, #1
}
 8000e40:	0018      	movs	r0, r3
 8000e42:	46bd      	mov	sp, r7
 8000e44:	b003      	add	sp, #12
 8000e46:	bd90      	pop	{r4, r7, pc}
 8000e48:	20000004 	.word	0x20000004
 8000e4c:	2000000c 	.word	0x2000000c
 8000e50:	20000008 	.word	0x20000008

08000e54 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e58:	4b05      	ldr	r3, [pc, #20]	; (8000e70 <HAL_IncTick+0x1c>)
 8000e5a:	781b      	ldrb	r3, [r3, #0]
 8000e5c:	001a      	movs	r2, r3
 8000e5e:	4b05      	ldr	r3, [pc, #20]	; (8000e74 <HAL_IncTick+0x20>)
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	18d2      	adds	r2, r2, r3
 8000e64:	4b03      	ldr	r3, [pc, #12]	; (8000e74 <HAL_IncTick+0x20>)
 8000e66:	601a      	str	r2, [r3, #0]
}
 8000e68:	46c0      	nop			; (mov r8, r8)
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	46c0      	nop			; (mov r8, r8)
 8000e70:	2000000c 	.word	0x2000000c
 8000e74:	200000f8 	.word	0x200000f8

08000e78 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	af00      	add	r7, sp, #0
  return uwTick;
 8000e7c:	4b02      	ldr	r3, [pc, #8]	; (8000e88 <HAL_GetTick+0x10>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
}
 8000e80:	0018      	movs	r0, r3
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	46c0      	nop			; (mov r8, r8)
 8000e88:	200000f8 	.word	0x200000f8

08000e8c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b084      	sub	sp, #16
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e94:	f7ff fff0 	bl	8000e78 <HAL_GetTick>
 8000e98:	0003      	movs	r3, r0
 8000e9a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	3301      	adds	r3, #1
 8000ea4:	d005      	beq.n	8000eb2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ea6:	4b0a      	ldr	r3, [pc, #40]	; (8000ed0 <HAL_Delay+0x44>)
 8000ea8:	781b      	ldrb	r3, [r3, #0]
 8000eaa:	001a      	movs	r2, r3
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	189b      	adds	r3, r3, r2
 8000eb0:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000eb2:	46c0      	nop			; (mov r8, r8)
 8000eb4:	f7ff ffe0 	bl	8000e78 <HAL_GetTick>
 8000eb8:	0002      	movs	r2, r0
 8000eba:	68bb      	ldr	r3, [r7, #8]
 8000ebc:	1ad3      	subs	r3, r2, r3
 8000ebe:	68fa      	ldr	r2, [r7, #12]
 8000ec0:	429a      	cmp	r2, r3
 8000ec2:	d8f7      	bhi.n	8000eb4 <HAL_Delay+0x28>
  {
  }
}
 8000ec4:	46c0      	nop			; (mov r8, r8)
 8000ec6:	46c0      	nop			; (mov r8, r8)
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	b004      	add	sp, #16
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	46c0      	nop			; (mov r8, r8)
 8000ed0:	2000000c 	.word	0x2000000c

08000ed4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b082      	sub	sp, #8
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	0002      	movs	r2, r0
 8000edc:	1dfb      	adds	r3, r7, #7
 8000ede:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000ee0:	1dfb      	adds	r3, r7, #7
 8000ee2:	781b      	ldrb	r3, [r3, #0]
 8000ee4:	2b7f      	cmp	r3, #127	; 0x7f
 8000ee6:	d809      	bhi.n	8000efc <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ee8:	1dfb      	adds	r3, r7, #7
 8000eea:	781b      	ldrb	r3, [r3, #0]
 8000eec:	001a      	movs	r2, r3
 8000eee:	231f      	movs	r3, #31
 8000ef0:	401a      	ands	r2, r3
 8000ef2:	4b04      	ldr	r3, [pc, #16]	; (8000f04 <__NVIC_EnableIRQ+0x30>)
 8000ef4:	2101      	movs	r1, #1
 8000ef6:	4091      	lsls	r1, r2
 8000ef8:	000a      	movs	r2, r1
 8000efa:	601a      	str	r2, [r3, #0]
  }
}
 8000efc:	46c0      	nop			; (mov r8, r8)
 8000efe:	46bd      	mov	sp, r7
 8000f00:	b002      	add	sp, #8
 8000f02:	bd80      	pop	{r7, pc}
 8000f04:	e000e100 	.word	0xe000e100

08000f08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f08:	b590      	push	{r4, r7, lr}
 8000f0a:	b083      	sub	sp, #12
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	0002      	movs	r2, r0
 8000f10:	6039      	str	r1, [r7, #0]
 8000f12:	1dfb      	adds	r3, r7, #7
 8000f14:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000f16:	1dfb      	adds	r3, r7, #7
 8000f18:	781b      	ldrb	r3, [r3, #0]
 8000f1a:	2b7f      	cmp	r3, #127	; 0x7f
 8000f1c:	d828      	bhi.n	8000f70 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f1e:	4a2f      	ldr	r2, [pc, #188]	; (8000fdc <__NVIC_SetPriority+0xd4>)
 8000f20:	1dfb      	adds	r3, r7, #7
 8000f22:	781b      	ldrb	r3, [r3, #0]
 8000f24:	b25b      	sxtb	r3, r3
 8000f26:	089b      	lsrs	r3, r3, #2
 8000f28:	33c0      	adds	r3, #192	; 0xc0
 8000f2a:	009b      	lsls	r3, r3, #2
 8000f2c:	589b      	ldr	r3, [r3, r2]
 8000f2e:	1dfa      	adds	r2, r7, #7
 8000f30:	7812      	ldrb	r2, [r2, #0]
 8000f32:	0011      	movs	r1, r2
 8000f34:	2203      	movs	r2, #3
 8000f36:	400a      	ands	r2, r1
 8000f38:	00d2      	lsls	r2, r2, #3
 8000f3a:	21ff      	movs	r1, #255	; 0xff
 8000f3c:	4091      	lsls	r1, r2
 8000f3e:	000a      	movs	r2, r1
 8000f40:	43d2      	mvns	r2, r2
 8000f42:	401a      	ands	r2, r3
 8000f44:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000f46:	683b      	ldr	r3, [r7, #0]
 8000f48:	019b      	lsls	r3, r3, #6
 8000f4a:	22ff      	movs	r2, #255	; 0xff
 8000f4c:	401a      	ands	r2, r3
 8000f4e:	1dfb      	adds	r3, r7, #7
 8000f50:	781b      	ldrb	r3, [r3, #0]
 8000f52:	0018      	movs	r0, r3
 8000f54:	2303      	movs	r3, #3
 8000f56:	4003      	ands	r3, r0
 8000f58:	00db      	lsls	r3, r3, #3
 8000f5a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f5c:	481f      	ldr	r0, [pc, #124]	; (8000fdc <__NVIC_SetPriority+0xd4>)
 8000f5e:	1dfb      	adds	r3, r7, #7
 8000f60:	781b      	ldrb	r3, [r3, #0]
 8000f62:	b25b      	sxtb	r3, r3
 8000f64:	089b      	lsrs	r3, r3, #2
 8000f66:	430a      	orrs	r2, r1
 8000f68:	33c0      	adds	r3, #192	; 0xc0
 8000f6a:	009b      	lsls	r3, r3, #2
 8000f6c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000f6e:	e031      	b.n	8000fd4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f70:	4a1b      	ldr	r2, [pc, #108]	; (8000fe0 <__NVIC_SetPriority+0xd8>)
 8000f72:	1dfb      	adds	r3, r7, #7
 8000f74:	781b      	ldrb	r3, [r3, #0]
 8000f76:	0019      	movs	r1, r3
 8000f78:	230f      	movs	r3, #15
 8000f7a:	400b      	ands	r3, r1
 8000f7c:	3b08      	subs	r3, #8
 8000f7e:	089b      	lsrs	r3, r3, #2
 8000f80:	3306      	adds	r3, #6
 8000f82:	009b      	lsls	r3, r3, #2
 8000f84:	18d3      	adds	r3, r2, r3
 8000f86:	3304      	adds	r3, #4
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	1dfa      	adds	r2, r7, #7
 8000f8c:	7812      	ldrb	r2, [r2, #0]
 8000f8e:	0011      	movs	r1, r2
 8000f90:	2203      	movs	r2, #3
 8000f92:	400a      	ands	r2, r1
 8000f94:	00d2      	lsls	r2, r2, #3
 8000f96:	21ff      	movs	r1, #255	; 0xff
 8000f98:	4091      	lsls	r1, r2
 8000f9a:	000a      	movs	r2, r1
 8000f9c:	43d2      	mvns	r2, r2
 8000f9e:	401a      	ands	r2, r3
 8000fa0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000fa2:	683b      	ldr	r3, [r7, #0]
 8000fa4:	019b      	lsls	r3, r3, #6
 8000fa6:	22ff      	movs	r2, #255	; 0xff
 8000fa8:	401a      	ands	r2, r3
 8000faa:	1dfb      	adds	r3, r7, #7
 8000fac:	781b      	ldrb	r3, [r3, #0]
 8000fae:	0018      	movs	r0, r3
 8000fb0:	2303      	movs	r3, #3
 8000fb2:	4003      	ands	r3, r0
 8000fb4:	00db      	lsls	r3, r3, #3
 8000fb6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000fb8:	4809      	ldr	r0, [pc, #36]	; (8000fe0 <__NVIC_SetPriority+0xd8>)
 8000fba:	1dfb      	adds	r3, r7, #7
 8000fbc:	781b      	ldrb	r3, [r3, #0]
 8000fbe:	001c      	movs	r4, r3
 8000fc0:	230f      	movs	r3, #15
 8000fc2:	4023      	ands	r3, r4
 8000fc4:	3b08      	subs	r3, #8
 8000fc6:	089b      	lsrs	r3, r3, #2
 8000fc8:	430a      	orrs	r2, r1
 8000fca:	3306      	adds	r3, #6
 8000fcc:	009b      	lsls	r3, r3, #2
 8000fce:	18c3      	adds	r3, r0, r3
 8000fd0:	3304      	adds	r3, #4
 8000fd2:	601a      	str	r2, [r3, #0]
}
 8000fd4:	46c0      	nop			; (mov r8, r8)
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	b003      	add	sp, #12
 8000fda:	bd90      	pop	{r4, r7, pc}
 8000fdc:	e000e100 	.word	0xe000e100
 8000fe0:	e000ed00 	.word	0xe000ed00

08000fe4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b082      	sub	sp, #8
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	1e5a      	subs	r2, r3, #1
 8000ff0:	2380      	movs	r3, #128	; 0x80
 8000ff2:	045b      	lsls	r3, r3, #17
 8000ff4:	429a      	cmp	r2, r3
 8000ff6:	d301      	bcc.n	8000ffc <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ff8:	2301      	movs	r3, #1
 8000ffa:	e010      	b.n	800101e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ffc:	4b0a      	ldr	r3, [pc, #40]	; (8001028 <SysTick_Config+0x44>)
 8000ffe:	687a      	ldr	r2, [r7, #4]
 8001000:	3a01      	subs	r2, #1
 8001002:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001004:	2301      	movs	r3, #1
 8001006:	425b      	negs	r3, r3
 8001008:	2103      	movs	r1, #3
 800100a:	0018      	movs	r0, r3
 800100c:	f7ff ff7c 	bl	8000f08 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001010:	4b05      	ldr	r3, [pc, #20]	; (8001028 <SysTick_Config+0x44>)
 8001012:	2200      	movs	r2, #0
 8001014:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001016:	4b04      	ldr	r3, [pc, #16]	; (8001028 <SysTick_Config+0x44>)
 8001018:	2207      	movs	r2, #7
 800101a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800101c:	2300      	movs	r3, #0
}
 800101e:	0018      	movs	r0, r3
 8001020:	46bd      	mov	sp, r7
 8001022:	b002      	add	sp, #8
 8001024:	bd80      	pop	{r7, pc}
 8001026:	46c0      	nop			; (mov r8, r8)
 8001028:	e000e010 	.word	0xe000e010

0800102c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800102c:	b580      	push	{r7, lr}
 800102e:	b084      	sub	sp, #16
 8001030:	af00      	add	r7, sp, #0
 8001032:	60b9      	str	r1, [r7, #8]
 8001034:	607a      	str	r2, [r7, #4]
 8001036:	210f      	movs	r1, #15
 8001038:	187b      	adds	r3, r7, r1
 800103a:	1c02      	adds	r2, r0, #0
 800103c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800103e:	68ba      	ldr	r2, [r7, #8]
 8001040:	187b      	adds	r3, r7, r1
 8001042:	781b      	ldrb	r3, [r3, #0]
 8001044:	b25b      	sxtb	r3, r3
 8001046:	0011      	movs	r1, r2
 8001048:	0018      	movs	r0, r3
 800104a:	f7ff ff5d 	bl	8000f08 <__NVIC_SetPriority>
}
 800104e:	46c0      	nop			; (mov r8, r8)
 8001050:	46bd      	mov	sp, r7
 8001052:	b004      	add	sp, #16
 8001054:	bd80      	pop	{r7, pc}

08001056 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001056:	b580      	push	{r7, lr}
 8001058:	b082      	sub	sp, #8
 800105a:	af00      	add	r7, sp, #0
 800105c:	0002      	movs	r2, r0
 800105e:	1dfb      	adds	r3, r7, #7
 8001060:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001062:	1dfb      	adds	r3, r7, #7
 8001064:	781b      	ldrb	r3, [r3, #0]
 8001066:	b25b      	sxtb	r3, r3
 8001068:	0018      	movs	r0, r3
 800106a:	f7ff ff33 	bl	8000ed4 <__NVIC_EnableIRQ>
}
 800106e:	46c0      	nop			; (mov r8, r8)
 8001070:	46bd      	mov	sp, r7
 8001072:	b002      	add	sp, #8
 8001074:	bd80      	pop	{r7, pc}

08001076 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001076:	b580      	push	{r7, lr}
 8001078:	b082      	sub	sp, #8
 800107a:	af00      	add	r7, sp, #0
 800107c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	0018      	movs	r0, r3
 8001082:	f7ff ffaf 	bl	8000fe4 <SysTick_Config>
 8001086:	0003      	movs	r3, r0
}
 8001088:	0018      	movs	r0, r3
 800108a:	46bd      	mov	sp, r7
 800108c:	b002      	add	sp, #8
 800108e:	bd80      	pop	{r7, pc}

08001090 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b086      	sub	sp, #24
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
 8001098:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800109a:	2300      	movs	r3, #0
 800109c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800109e:	e14f      	b.n	8001340 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	2101      	movs	r1, #1
 80010a6:	697a      	ldr	r2, [r7, #20]
 80010a8:	4091      	lsls	r1, r2
 80010aa:	000a      	movs	r2, r1
 80010ac:	4013      	ands	r3, r2
 80010ae:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d100      	bne.n	80010b8 <HAL_GPIO_Init+0x28>
 80010b6:	e140      	b.n	800133a <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	685b      	ldr	r3, [r3, #4]
 80010bc:	2203      	movs	r2, #3
 80010be:	4013      	ands	r3, r2
 80010c0:	2b01      	cmp	r3, #1
 80010c2:	d005      	beq.n	80010d0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	685b      	ldr	r3, [r3, #4]
 80010c8:	2203      	movs	r2, #3
 80010ca:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80010cc:	2b02      	cmp	r3, #2
 80010ce:	d130      	bne.n	8001132 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	689b      	ldr	r3, [r3, #8]
 80010d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80010d6:	697b      	ldr	r3, [r7, #20]
 80010d8:	005b      	lsls	r3, r3, #1
 80010da:	2203      	movs	r2, #3
 80010dc:	409a      	lsls	r2, r3
 80010de:	0013      	movs	r3, r2
 80010e0:	43da      	mvns	r2, r3
 80010e2:	693b      	ldr	r3, [r7, #16]
 80010e4:	4013      	ands	r3, r2
 80010e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	68da      	ldr	r2, [r3, #12]
 80010ec:	697b      	ldr	r3, [r7, #20]
 80010ee:	005b      	lsls	r3, r3, #1
 80010f0:	409a      	lsls	r2, r3
 80010f2:	0013      	movs	r3, r2
 80010f4:	693a      	ldr	r2, [r7, #16]
 80010f6:	4313      	orrs	r3, r2
 80010f8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	693a      	ldr	r2, [r7, #16]
 80010fe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	685b      	ldr	r3, [r3, #4]
 8001104:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001106:	2201      	movs	r2, #1
 8001108:	697b      	ldr	r3, [r7, #20]
 800110a:	409a      	lsls	r2, r3
 800110c:	0013      	movs	r3, r2
 800110e:	43da      	mvns	r2, r3
 8001110:	693b      	ldr	r3, [r7, #16]
 8001112:	4013      	ands	r3, r2
 8001114:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	685b      	ldr	r3, [r3, #4]
 800111a:	091b      	lsrs	r3, r3, #4
 800111c:	2201      	movs	r2, #1
 800111e:	401a      	ands	r2, r3
 8001120:	697b      	ldr	r3, [r7, #20]
 8001122:	409a      	lsls	r2, r3
 8001124:	0013      	movs	r3, r2
 8001126:	693a      	ldr	r2, [r7, #16]
 8001128:	4313      	orrs	r3, r2
 800112a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	693a      	ldr	r2, [r7, #16]
 8001130:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	685b      	ldr	r3, [r3, #4]
 8001136:	2203      	movs	r2, #3
 8001138:	4013      	ands	r3, r2
 800113a:	2b03      	cmp	r3, #3
 800113c:	d017      	beq.n	800116e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	68db      	ldr	r3, [r3, #12]
 8001142:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001144:	697b      	ldr	r3, [r7, #20]
 8001146:	005b      	lsls	r3, r3, #1
 8001148:	2203      	movs	r2, #3
 800114a:	409a      	lsls	r2, r3
 800114c:	0013      	movs	r3, r2
 800114e:	43da      	mvns	r2, r3
 8001150:	693b      	ldr	r3, [r7, #16]
 8001152:	4013      	ands	r3, r2
 8001154:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	689a      	ldr	r2, [r3, #8]
 800115a:	697b      	ldr	r3, [r7, #20]
 800115c:	005b      	lsls	r3, r3, #1
 800115e:	409a      	lsls	r2, r3
 8001160:	0013      	movs	r3, r2
 8001162:	693a      	ldr	r2, [r7, #16]
 8001164:	4313      	orrs	r3, r2
 8001166:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	693a      	ldr	r2, [r7, #16]
 800116c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	685b      	ldr	r3, [r3, #4]
 8001172:	2203      	movs	r2, #3
 8001174:	4013      	ands	r3, r2
 8001176:	2b02      	cmp	r3, #2
 8001178:	d123      	bne.n	80011c2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800117a:	697b      	ldr	r3, [r7, #20]
 800117c:	08da      	lsrs	r2, r3, #3
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	3208      	adds	r2, #8
 8001182:	0092      	lsls	r2, r2, #2
 8001184:	58d3      	ldr	r3, [r2, r3]
 8001186:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001188:	697b      	ldr	r3, [r7, #20]
 800118a:	2207      	movs	r2, #7
 800118c:	4013      	ands	r3, r2
 800118e:	009b      	lsls	r3, r3, #2
 8001190:	220f      	movs	r2, #15
 8001192:	409a      	lsls	r2, r3
 8001194:	0013      	movs	r3, r2
 8001196:	43da      	mvns	r2, r3
 8001198:	693b      	ldr	r3, [r7, #16]
 800119a:	4013      	ands	r3, r2
 800119c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	691a      	ldr	r2, [r3, #16]
 80011a2:	697b      	ldr	r3, [r7, #20]
 80011a4:	2107      	movs	r1, #7
 80011a6:	400b      	ands	r3, r1
 80011a8:	009b      	lsls	r3, r3, #2
 80011aa:	409a      	lsls	r2, r3
 80011ac:	0013      	movs	r3, r2
 80011ae:	693a      	ldr	r2, [r7, #16]
 80011b0:	4313      	orrs	r3, r2
 80011b2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80011b4:	697b      	ldr	r3, [r7, #20]
 80011b6:	08da      	lsrs	r2, r3, #3
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	3208      	adds	r2, #8
 80011bc:	0092      	lsls	r2, r2, #2
 80011be:	6939      	ldr	r1, [r7, #16]
 80011c0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80011c8:	697b      	ldr	r3, [r7, #20]
 80011ca:	005b      	lsls	r3, r3, #1
 80011cc:	2203      	movs	r2, #3
 80011ce:	409a      	lsls	r2, r3
 80011d0:	0013      	movs	r3, r2
 80011d2:	43da      	mvns	r2, r3
 80011d4:	693b      	ldr	r3, [r7, #16]
 80011d6:	4013      	ands	r3, r2
 80011d8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	685b      	ldr	r3, [r3, #4]
 80011de:	2203      	movs	r2, #3
 80011e0:	401a      	ands	r2, r3
 80011e2:	697b      	ldr	r3, [r7, #20]
 80011e4:	005b      	lsls	r3, r3, #1
 80011e6:	409a      	lsls	r2, r3
 80011e8:	0013      	movs	r3, r2
 80011ea:	693a      	ldr	r2, [r7, #16]
 80011ec:	4313      	orrs	r3, r2
 80011ee:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	693a      	ldr	r2, [r7, #16]
 80011f4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	685a      	ldr	r2, [r3, #4]
 80011fa:	23c0      	movs	r3, #192	; 0xc0
 80011fc:	029b      	lsls	r3, r3, #10
 80011fe:	4013      	ands	r3, r2
 8001200:	d100      	bne.n	8001204 <HAL_GPIO_Init+0x174>
 8001202:	e09a      	b.n	800133a <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001204:	4b54      	ldr	r3, [pc, #336]	; (8001358 <HAL_GPIO_Init+0x2c8>)
 8001206:	699a      	ldr	r2, [r3, #24]
 8001208:	4b53      	ldr	r3, [pc, #332]	; (8001358 <HAL_GPIO_Init+0x2c8>)
 800120a:	2101      	movs	r1, #1
 800120c:	430a      	orrs	r2, r1
 800120e:	619a      	str	r2, [r3, #24]
 8001210:	4b51      	ldr	r3, [pc, #324]	; (8001358 <HAL_GPIO_Init+0x2c8>)
 8001212:	699b      	ldr	r3, [r3, #24]
 8001214:	2201      	movs	r2, #1
 8001216:	4013      	ands	r3, r2
 8001218:	60bb      	str	r3, [r7, #8]
 800121a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800121c:	4a4f      	ldr	r2, [pc, #316]	; (800135c <HAL_GPIO_Init+0x2cc>)
 800121e:	697b      	ldr	r3, [r7, #20]
 8001220:	089b      	lsrs	r3, r3, #2
 8001222:	3302      	adds	r3, #2
 8001224:	009b      	lsls	r3, r3, #2
 8001226:	589b      	ldr	r3, [r3, r2]
 8001228:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800122a:	697b      	ldr	r3, [r7, #20]
 800122c:	2203      	movs	r2, #3
 800122e:	4013      	ands	r3, r2
 8001230:	009b      	lsls	r3, r3, #2
 8001232:	220f      	movs	r2, #15
 8001234:	409a      	lsls	r2, r3
 8001236:	0013      	movs	r3, r2
 8001238:	43da      	mvns	r2, r3
 800123a:	693b      	ldr	r3, [r7, #16]
 800123c:	4013      	ands	r3, r2
 800123e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001240:	687a      	ldr	r2, [r7, #4]
 8001242:	2390      	movs	r3, #144	; 0x90
 8001244:	05db      	lsls	r3, r3, #23
 8001246:	429a      	cmp	r2, r3
 8001248:	d013      	beq.n	8001272 <HAL_GPIO_Init+0x1e2>
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	4a44      	ldr	r2, [pc, #272]	; (8001360 <HAL_GPIO_Init+0x2d0>)
 800124e:	4293      	cmp	r3, r2
 8001250:	d00d      	beq.n	800126e <HAL_GPIO_Init+0x1de>
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	4a43      	ldr	r2, [pc, #268]	; (8001364 <HAL_GPIO_Init+0x2d4>)
 8001256:	4293      	cmp	r3, r2
 8001258:	d007      	beq.n	800126a <HAL_GPIO_Init+0x1da>
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	4a42      	ldr	r2, [pc, #264]	; (8001368 <HAL_GPIO_Init+0x2d8>)
 800125e:	4293      	cmp	r3, r2
 8001260:	d101      	bne.n	8001266 <HAL_GPIO_Init+0x1d6>
 8001262:	2303      	movs	r3, #3
 8001264:	e006      	b.n	8001274 <HAL_GPIO_Init+0x1e4>
 8001266:	2305      	movs	r3, #5
 8001268:	e004      	b.n	8001274 <HAL_GPIO_Init+0x1e4>
 800126a:	2302      	movs	r3, #2
 800126c:	e002      	b.n	8001274 <HAL_GPIO_Init+0x1e4>
 800126e:	2301      	movs	r3, #1
 8001270:	e000      	b.n	8001274 <HAL_GPIO_Init+0x1e4>
 8001272:	2300      	movs	r3, #0
 8001274:	697a      	ldr	r2, [r7, #20]
 8001276:	2103      	movs	r1, #3
 8001278:	400a      	ands	r2, r1
 800127a:	0092      	lsls	r2, r2, #2
 800127c:	4093      	lsls	r3, r2
 800127e:	693a      	ldr	r2, [r7, #16]
 8001280:	4313      	orrs	r3, r2
 8001282:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001284:	4935      	ldr	r1, [pc, #212]	; (800135c <HAL_GPIO_Init+0x2cc>)
 8001286:	697b      	ldr	r3, [r7, #20]
 8001288:	089b      	lsrs	r3, r3, #2
 800128a:	3302      	adds	r3, #2
 800128c:	009b      	lsls	r3, r3, #2
 800128e:	693a      	ldr	r2, [r7, #16]
 8001290:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001292:	4b36      	ldr	r3, [pc, #216]	; (800136c <HAL_GPIO_Init+0x2dc>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	43da      	mvns	r2, r3
 800129c:	693b      	ldr	r3, [r7, #16]
 800129e:	4013      	ands	r3, r2
 80012a0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	685a      	ldr	r2, [r3, #4]
 80012a6:	2380      	movs	r3, #128	; 0x80
 80012a8:	025b      	lsls	r3, r3, #9
 80012aa:	4013      	ands	r3, r2
 80012ac:	d003      	beq.n	80012b6 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 80012ae:	693a      	ldr	r2, [r7, #16]
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	4313      	orrs	r3, r2
 80012b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80012b6:	4b2d      	ldr	r3, [pc, #180]	; (800136c <HAL_GPIO_Init+0x2dc>)
 80012b8:	693a      	ldr	r2, [r7, #16]
 80012ba:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80012bc:	4b2b      	ldr	r3, [pc, #172]	; (800136c <HAL_GPIO_Init+0x2dc>)
 80012be:	685b      	ldr	r3, [r3, #4]
 80012c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	43da      	mvns	r2, r3
 80012c6:	693b      	ldr	r3, [r7, #16]
 80012c8:	4013      	ands	r3, r2
 80012ca:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	685a      	ldr	r2, [r3, #4]
 80012d0:	2380      	movs	r3, #128	; 0x80
 80012d2:	029b      	lsls	r3, r3, #10
 80012d4:	4013      	ands	r3, r2
 80012d6:	d003      	beq.n	80012e0 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 80012d8:	693a      	ldr	r2, [r7, #16]
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	4313      	orrs	r3, r2
 80012de:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80012e0:	4b22      	ldr	r3, [pc, #136]	; (800136c <HAL_GPIO_Init+0x2dc>)
 80012e2:	693a      	ldr	r2, [r7, #16]
 80012e4:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012e6:	4b21      	ldr	r3, [pc, #132]	; (800136c <HAL_GPIO_Init+0x2dc>)
 80012e8:	689b      	ldr	r3, [r3, #8]
 80012ea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	43da      	mvns	r2, r3
 80012f0:	693b      	ldr	r3, [r7, #16]
 80012f2:	4013      	ands	r3, r2
 80012f4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	685a      	ldr	r2, [r3, #4]
 80012fa:	2380      	movs	r3, #128	; 0x80
 80012fc:	035b      	lsls	r3, r3, #13
 80012fe:	4013      	ands	r3, r2
 8001300:	d003      	beq.n	800130a <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8001302:	693a      	ldr	r2, [r7, #16]
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	4313      	orrs	r3, r2
 8001308:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800130a:	4b18      	ldr	r3, [pc, #96]	; (800136c <HAL_GPIO_Init+0x2dc>)
 800130c:	693a      	ldr	r2, [r7, #16]
 800130e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001310:	4b16      	ldr	r3, [pc, #88]	; (800136c <HAL_GPIO_Init+0x2dc>)
 8001312:	68db      	ldr	r3, [r3, #12]
 8001314:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	43da      	mvns	r2, r3
 800131a:	693b      	ldr	r3, [r7, #16]
 800131c:	4013      	ands	r3, r2
 800131e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	685a      	ldr	r2, [r3, #4]
 8001324:	2380      	movs	r3, #128	; 0x80
 8001326:	039b      	lsls	r3, r3, #14
 8001328:	4013      	ands	r3, r2
 800132a:	d003      	beq.n	8001334 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 800132c:	693a      	ldr	r2, [r7, #16]
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	4313      	orrs	r3, r2
 8001332:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001334:	4b0d      	ldr	r3, [pc, #52]	; (800136c <HAL_GPIO_Init+0x2dc>)
 8001336:	693a      	ldr	r2, [r7, #16]
 8001338:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 800133a:	697b      	ldr	r3, [r7, #20]
 800133c:	3301      	adds	r3, #1
 800133e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	681a      	ldr	r2, [r3, #0]
 8001344:	697b      	ldr	r3, [r7, #20]
 8001346:	40da      	lsrs	r2, r3
 8001348:	1e13      	subs	r3, r2, #0
 800134a:	d000      	beq.n	800134e <HAL_GPIO_Init+0x2be>
 800134c:	e6a8      	b.n	80010a0 <HAL_GPIO_Init+0x10>
  } 
}
 800134e:	46c0      	nop			; (mov r8, r8)
 8001350:	46c0      	nop			; (mov r8, r8)
 8001352:	46bd      	mov	sp, r7
 8001354:	b006      	add	sp, #24
 8001356:	bd80      	pop	{r7, pc}
 8001358:	40021000 	.word	0x40021000
 800135c:	40010000 	.word	0x40010000
 8001360:	48000400 	.word	0x48000400
 8001364:	48000800 	.word	0x48000800
 8001368:	48000c00 	.word	0x48000c00
 800136c:	40010400 	.word	0x40010400

08001370 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b082      	sub	sp, #8
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
 8001378:	0008      	movs	r0, r1
 800137a:	0011      	movs	r1, r2
 800137c:	1cbb      	adds	r3, r7, #2
 800137e:	1c02      	adds	r2, r0, #0
 8001380:	801a      	strh	r2, [r3, #0]
 8001382:	1c7b      	adds	r3, r7, #1
 8001384:	1c0a      	adds	r2, r1, #0
 8001386:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001388:	1c7b      	adds	r3, r7, #1
 800138a:	781b      	ldrb	r3, [r3, #0]
 800138c:	2b00      	cmp	r3, #0
 800138e:	d004      	beq.n	800139a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001390:	1cbb      	adds	r3, r7, #2
 8001392:	881a      	ldrh	r2, [r3, #0]
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001398:	e003      	b.n	80013a2 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800139a:	1cbb      	adds	r3, r7, #2
 800139c:	881a      	ldrh	r2, [r3, #0]
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	629a      	str	r2, [r3, #40]	; 0x28
}
 80013a2:	46c0      	nop			; (mov r8, r8)
 80013a4:	46bd      	mov	sp, r7
 80013a6:	b002      	add	sp, #8
 80013a8:	bd80      	pop	{r7, pc}
	...

080013ac <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b082      	sub	sp, #8
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	0002      	movs	r2, r0
 80013b4:	1dbb      	adds	r3, r7, #6
 80013b6:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80013b8:	4b09      	ldr	r3, [pc, #36]	; (80013e0 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80013ba:	695b      	ldr	r3, [r3, #20]
 80013bc:	1dba      	adds	r2, r7, #6
 80013be:	8812      	ldrh	r2, [r2, #0]
 80013c0:	4013      	ands	r3, r2
 80013c2:	d008      	beq.n	80013d6 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80013c4:	4b06      	ldr	r3, [pc, #24]	; (80013e0 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80013c6:	1dba      	adds	r2, r7, #6
 80013c8:	8812      	ldrh	r2, [r2, #0]
 80013ca:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80013cc:	1dbb      	adds	r3, r7, #6
 80013ce:	881b      	ldrh	r3, [r3, #0]
 80013d0:	0018      	movs	r0, r3
 80013d2:	f7ff f977 	bl	80006c4 <HAL_GPIO_EXTI_Callback>
  }
}
 80013d6:	46c0      	nop			; (mov r8, r8)
 80013d8:	46bd      	mov	sp, r7
 80013da:	b002      	add	sp, #8
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	46c0      	nop			; (mov r8, r8)
 80013e0:	40010400 	.word	0x40010400

080013e4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b088      	sub	sp, #32
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d101      	bne.n	80013f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80013f2:	2301      	movs	r3, #1
 80013f4:	e301      	b.n	80019fa <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	2201      	movs	r2, #1
 80013fc:	4013      	ands	r3, r2
 80013fe:	d100      	bne.n	8001402 <HAL_RCC_OscConfig+0x1e>
 8001400:	e08d      	b.n	800151e <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001402:	4bc3      	ldr	r3, [pc, #780]	; (8001710 <HAL_RCC_OscConfig+0x32c>)
 8001404:	685b      	ldr	r3, [r3, #4]
 8001406:	220c      	movs	r2, #12
 8001408:	4013      	ands	r3, r2
 800140a:	2b04      	cmp	r3, #4
 800140c:	d00e      	beq.n	800142c <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800140e:	4bc0      	ldr	r3, [pc, #768]	; (8001710 <HAL_RCC_OscConfig+0x32c>)
 8001410:	685b      	ldr	r3, [r3, #4]
 8001412:	220c      	movs	r2, #12
 8001414:	4013      	ands	r3, r2
 8001416:	2b08      	cmp	r3, #8
 8001418:	d116      	bne.n	8001448 <HAL_RCC_OscConfig+0x64>
 800141a:	4bbd      	ldr	r3, [pc, #756]	; (8001710 <HAL_RCC_OscConfig+0x32c>)
 800141c:	685a      	ldr	r2, [r3, #4]
 800141e:	2380      	movs	r3, #128	; 0x80
 8001420:	025b      	lsls	r3, r3, #9
 8001422:	401a      	ands	r2, r3
 8001424:	2380      	movs	r3, #128	; 0x80
 8001426:	025b      	lsls	r3, r3, #9
 8001428:	429a      	cmp	r2, r3
 800142a:	d10d      	bne.n	8001448 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800142c:	4bb8      	ldr	r3, [pc, #736]	; (8001710 <HAL_RCC_OscConfig+0x32c>)
 800142e:	681a      	ldr	r2, [r3, #0]
 8001430:	2380      	movs	r3, #128	; 0x80
 8001432:	029b      	lsls	r3, r3, #10
 8001434:	4013      	ands	r3, r2
 8001436:	d100      	bne.n	800143a <HAL_RCC_OscConfig+0x56>
 8001438:	e070      	b.n	800151c <HAL_RCC_OscConfig+0x138>
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	685b      	ldr	r3, [r3, #4]
 800143e:	2b00      	cmp	r3, #0
 8001440:	d000      	beq.n	8001444 <HAL_RCC_OscConfig+0x60>
 8001442:	e06b      	b.n	800151c <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8001444:	2301      	movs	r3, #1
 8001446:	e2d8      	b.n	80019fa <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	685b      	ldr	r3, [r3, #4]
 800144c:	2b01      	cmp	r3, #1
 800144e:	d107      	bne.n	8001460 <HAL_RCC_OscConfig+0x7c>
 8001450:	4baf      	ldr	r3, [pc, #700]	; (8001710 <HAL_RCC_OscConfig+0x32c>)
 8001452:	681a      	ldr	r2, [r3, #0]
 8001454:	4bae      	ldr	r3, [pc, #696]	; (8001710 <HAL_RCC_OscConfig+0x32c>)
 8001456:	2180      	movs	r1, #128	; 0x80
 8001458:	0249      	lsls	r1, r1, #9
 800145a:	430a      	orrs	r2, r1
 800145c:	601a      	str	r2, [r3, #0]
 800145e:	e02f      	b.n	80014c0 <HAL_RCC_OscConfig+0xdc>
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	685b      	ldr	r3, [r3, #4]
 8001464:	2b00      	cmp	r3, #0
 8001466:	d10c      	bne.n	8001482 <HAL_RCC_OscConfig+0x9e>
 8001468:	4ba9      	ldr	r3, [pc, #676]	; (8001710 <HAL_RCC_OscConfig+0x32c>)
 800146a:	681a      	ldr	r2, [r3, #0]
 800146c:	4ba8      	ldr	r3, [pc, #672]	; (8001710 <HAL_RCC_OscConfig+0x32c>)
 800146e:	49a9      	ldr	r1, [pc, #676]	; (8001714 <HAL_RCC_OscConfig+0x330>)
 8001470:	400a      	ands	r2, r1
 8001472:	601a      	str	r2, [r3, #0]
 8001474:	4ba6      	ldr	r3, [pc, #664]	; (8001710 <HAL_RCC_OscConfig+0x32c>)
 8001476:	681a      	ldr	r2, [r3, #0]
 8001478:	4ba5      	ldr	r3, [pc, #660]	; (8001710 <HAL_RCC_OscConfig+0x32c>)
 800147a:	49a7      	ldr	r1, [pc, #668]	; (8001718 <HAL_RCC_OscConfig+0x334>)
 800147c:	400a      	ands	r2, r1
 800147e:	601a      	str	r2, [r3, #0]
 8001480:	e01e      	b.n	80014c0 <HAL_RCC_OscConfig+0xdc>
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	685b      	ldr	r3, [r3, #4]
 8001486:	2b05      	cmp	r3, #5
 8001488:	d10e      	bne.n	80014a8 <HAL_RCC_OscConfig+0xc4>
 800148a:	4ba1      	ldr	r3, [pc, #644]	; (8001710 <HAL_RCC_OscConfig+0x32c>)
 800148c:	681a      	ldr	r2, [r3, #0]
 800148e:	4ba0      	ldr	r3, [pc, #640]	; (8001710 <HAL_RCC_OscConfig+0x32c>)
 8001490:	2180      	movs	r1, #128	; 0x80
 8001492:	02c9      	lsls	r1, r1, #11
 8001494:	430a      	orrs	r2, r1
 8001496:	601a      	str	r2, [r3, #0]
 8001498:	4b9d      	ldr	r3, [pc, #628]	; (8001710 <HAL_RCC_OscConfig+0x32c>)
 800149a:	681a      	ldr	r2, [r3, #0]
 800149c:	4b9c      	ldr	r3, [pc, #624]	; (8001710 <HAL_RCC_OscConfig+0x32c>)
 800149e:	2180      	movs	r1, #128	; 0x80
 80014a0:	0249      	lsls	r1, r1, #9
 80014a2:	430a      	orrs	r2, r1
 80014a4:	601a      	str	r2, [r3, #0]
 80014a6:	e00b      	b.n	80014c0 <HAL_RCC_OscConfig+0xdc>
 80014a8:	4b99      	ldr	r3, [pc, #612]	; (8001710 <HAL_RCC_OscConfig+0x32c>)
 80014aa:	681a      	ldr	r2, [r3, #0]
 80014ac:	4b98      	ldr	r3, [pc, #608]	; (8001710 <HAL_RCC_OscConfig+0x32c>)
 80014ae:	4999      	ldr	r1, [pc, #612]	; (8001714 <HAL_RCC_OscConfig+0x330>)
 80014b0:	400a      	ands	r2, r1
 80014b2:	601a      	str	r2, [r3, #0]
 80014b4:	4b96      	ldr	r3, [pc, #600]	; (8001710 <HAL_RCC_OscConfig+0x32c>)
 80014b6:	681a      	ldr	r2, [r3, #0]
 80014b8:	4b95      	ldr	r3, [pc, #596]	; (8001710 <HAL_RCC_OscConfig+0x32c>)
 80014ba:	4997      	ldr	r1, [pc, #604]	; (8001718 <HAL_RCC_OscConfig+0x334>)
 80014bc:	400a      	ands	r2, r1
 80014be:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	685b      	ldr	r3, [r3, #4]
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d014      	beq.n	80014f2 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014c8:	f7ff fcd6 	bl	8000e78 <HAL_GetTick>
 80014cc:	0003      	movs	r3, r0
 80014ce:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014d0:	e008      	b.n	80014e4 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80014d2:	f7ff fcd1 	bl	8000e78 <HAL_GetTick>
 80014d6:	0002      	movs	r2, r0
 80014d8:	69bb      	ldr	r3, [r7, #24]
 80014da:	1ad3      	subs	r3, r2, r3
 80014dc:	2b64      	cmp	r3, #100	; 0x64
 80014de:	d901      	bls.n	80014e4 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 80014e0:	2303      	movs	r3, #3
 80014e2:	e28a      	b.n	80019fa <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014e4:	4b8a      	ldr	r3, [pc, #552]	; (8001710 <HAL_RCC_OscConfig+0x32c>)
 80014e6:	681a      	ldr	r2, [r3, #0]
 80014e8:	2380      	movs	r3, #128	; 0x80
 80014ea:	029b      	lsls	r3, r3, #10
 80014ec:	4013      	ands	r3, r2
 80014ee:	d0f0      	beq.n	80014d2 <HAL_RCC_OscConfig+0xee>
 80014f0:	e015      	b.n	800151e <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014f2:	f7ff fcc1 	bl	8000e78 <HAL_GetTick>
 80014f6:	0003      	movs	r3, r0
 80014f8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014fa:	e008      	b.n	800150e <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80014fc:	f7ff fcbc 	bl	8000e78 <HAL_GetTick>
 8001500:	0002      	movs	r2, r0
 8001502:	69bb      	ldr	r3, [r7, #24]
 8001504:	1ad3      	subs	r3, r2, r3
 8001506:	2b64      	cmp	r3, #100	; 0x64
 8001508:	d901      	bls.n	800150e <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 800150a:	2303      	movs	r3, #3
 800150c:	e275      	b.n	80019fa <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800150e:	4b80      	ldr	r3, [pc, #512]	; (8001710 <HAL_RCC_OscConfig+0x32c>)
 8001510:	681a      	ldr	r2, [r3, #0]
 8001512:	2380      	movs	r3, #128	; 0x80
 8001514:	029b      	lsls	r3, r3, #10
 8001516:	4013      	ands	r3, r2
 8001518:	d1f0      	bne.n	80014fc <HAL_RCC_OscConfig+0x118>
 800151a:	e000      	b.n	800151e <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800151c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	2202      	movs	r2, #2
 8001524:	4013      	ands	r3, r2
 8001526:	d100      	bne.n	800152a <HAL_RCC_OscConfig+0x146>
 8001528:	e069      	b.n	80015fe <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800152a:	4b79      	ldr	r3, [pc, #484]	; (8001710 <HAL_RCC_OscConfig+0x32c>)
 800152c:	685b      	ldr	r3, [r3, #4]
 800152e:	220c      	movs	r2, #12
 8001530:	4013      	ands	r3, r2
 8001532:	d00b      	beq.n	800154c <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001534:	4b76      	ldr	r3, [pc, #472]	; (8001710 <HAL_RCC_OscConfig+0x32c>)
 8001536:	685b      	ldr	r3, [r3, #4]
 8001538:	220c      	movs	r2, #12
 800153a:	4013      	ands	r3, r2
 800153c:	2b08      	cmp	r3, #8
 800153e:	d11c      	bne.n	800157a <HAL_RCC_OscConfig+0x196>
 8001540:	4b73      	ldr	r3, [pc, #460]	; (8001710 <HAL_RCC_OscConfig+0x32c>)
 8001542:	685a      	ldr	r2, [r3, #4]
 8001544:	2380      	movs	r3, #128	; 0x80
 8001546:	025b      	lsls	r3, r3, #9
 8001548:	4013      	ands	r3, r2
 800154a:	d116      	bne.n	800157a <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800154c:	4b70      	ldr	r3, [pc, #448]	; (8001710 <HAL_RCC_OscConfig+0x32c>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	2202      	movs	r2, #2
 8001552:	4013      	ands	r3, r2
 8001554:	d005      	beq.n	8001562 <HAL_RCC_OscConfig+0x17e>
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	68db      	ldr	r3, [r3, #12]
 800155a:	2b01      	cmp	r3, #1
 800155c:	d001      	beq.n	8001562 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800155e:	2301      	movs	r3, #1
 8001560:	e24b      	b.n	80019fa <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001562:	4b6b      	ldr	r3, [pc, #428]	; (8001710 <HAL_RCC_OscConfig+0x32c>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	22f8      	movs	r2, #248	; 0xf8
 8001568:	4393      	bics	r3, r2
 800156a:	0019      	movs	r1, r3
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	691b      	ldr	r3, [r3, #16]
 8001570:	00da      	lsls	r2, r3, #3
 8001572:	4b67      	ldr	r3, [pc, #412]	; (8001710 <HAL_RCC_OscConfig+0x32c>)
 8001574:	430a      	orrs	r2, r1
 8001576:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001578:	e041      	b.n	80015fe <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	68db      	ldr	r3, [r3, #12]
 800157e:	2b00      	cmp	r3, #0
 8001580:	d024      	beq.n	80015cc <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001582:	4b63      	ldr	r3, [pc, #396]	; (8001710 <HAL_RCC_OscConfig+0x32c>)
 8001584:	681a      	ldr	r2, [r3, #0]
 8001586:	4b62      	ldr	r3, [pc, #392]	; (8001710 <HAL_RCC_OscConfig+0x32c>)
 8001588:	2101      	movs	r1, #1
 800158a:	430a      	orrs	r2, r1
 800158c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800158e:	f7ff fc73 	bl	8000e78 <HAL_GetTick>
 8001592:	0003      	movs	r3, r0
 8001594:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001596:	e008      	b.n	80015aa <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001598:	f7ff fc6e 	bl	8000e78 <HAL_GetTick>
 800159c:	0002      	movs	r2, r0
 800159e:	69bb      	ldr	r3, [r7, #24]
 80015a0:	1ad3      	subs	r3, r2, r3
 80015a2:	2b02      	cmp	r3, #2
 80015a4:	d901      	bls.n	80015aa <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 80015a6:	2303      	movs	r3, #3
 80015a8:	e227      	b.n	80019fa <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015aa:	4b59      	ldr	r3, [pc, #356]	; (8001710 <HAL_RCC_OscConfig+0x32c>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	2202      	movs	r2, #2
 80015b0:	4013      	ands	r3, r2
 80015b2:	d0f1      	beq.n	8001598 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015b4:	4b56      	ldr	r3, [pc, #344]	; (8001710 <HAL_RCC_OscConfig+0x32c>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	22f8      	movs	r2, #248	; 0xf8
 80015ba:	4393      	bics	r3, r2
 80015bc:	0019      	movs	r1, r3
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	691b      	ldr	r3, [r3, #16]
 80015c2:	00da      	lsls	r2, r3, #3
 80015c4:	4b52      	ldr	r3, [pc, #328]	; (8001710 <HAL_RCC_OscConfig+0x32c>)
 80015c6:	430a      	orrs	r2, r1
 80015c8:	601a      	str	r2, [r3, #0]
 80015ca:	e018      	b.n	80015fe <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015cc:	4b50      	ldr	r3, [pc, #320]	; (8001710 <HAL_RCC_OscConfig+0x32c>)
 80015ce:	681a      	ldr	r2, [r3, #0]
 80015d0:	4b4f      	ldr	r3, [pc, #316]	; (8001710 <HAL_RCC_OscConfig+0x32c>)
 80015d2:	2101      	movs	r1, #1
 80015d4:	438a      	bics	r2, r1
 80015d6:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015d8:	f7ff fc4e 	bl	8000e78 <HAL_GetTick>
 80015dc:	0003      	movs	r3, r0
 80015de:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015e0:	e008      	b.n	80015f4 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015e2:	f7ff fc49 	bl	8000e78 <HAL_GetTick>
 80015e6:	0002      	movs	r2, r0
 80015e8:	69bb      	ldr	r3, [r7, #24]
 80015ea:	1ad3      	subs	r3, r2, r3
 80015ec:	2b02      	cmp	r3, #2
 80015ee:	d901      	bls.n	80015f4 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 80015f0:	2303      	movs	r3, #3
 80015f2:	e202      	b.n	80019fa <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015f4:	4b46      	ldr	r3, [pc, #280]	; (8001710 <HAL_RCC_OscConfig+0x32c>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	2202      	movs	r2, #2
 80015fa:	4013      	ands	r3, r2
 80015fc:	d1f1      	bne.n	80015e2 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	2208      	movs	r2, #8
 8001604:	4013      	ands	r3, r2
 8001606:	d036      	beq.n	8001676 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	69db      	ldr	r3, [r3, #28]
 800160c:	2b00      	cmp	r3, #0
 800160e:	d019      	beq.n	8001644 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001610:	4b3f      	ldr	r3, [pc, #252]	; (8001710 <HAL_RCC_OscConfig+0x32c>)
 8001612:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001614:	4b3e      	ldr	r3, [pc, #248]	; (8001710 <HAL_RCC_OscConfig+0x32c>)
 8001616:	2101      	movs	r1, #1
 8001618:	430a      	orrs	r2, r1
 800161a:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800161c:	f7ff fc2c 	bl	8000e78 <HAL_GetTick>
 8001620:	0003      	movs	r3, r0
 8001622:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001624:	e008      	b.n	8001638 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001626:	f7ff fc27 	bl	8000e78 <HAL_GetTick>
 800162a:	0002      	movs	r2, r0
 800162c:	69bb      	ldr	r3, [r7, #24]
 800162e:	1ad3      	subs	r3, r2, r3
 8001630:	2b02      	cmp	r3, #2
 8001632:	d901      	bls.n	8001638 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8001634:	2303      	movs	r3, #3
 8001636:	e1e0      	b.n	80019fa <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001638:	4b35      	ldr	r3, [pc, #212]	; (8001710 <HAL_RCC_OscConfig+0x32c>)
 800163a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800163c:	2202      	movs	r2, #2
 800163e:	4013      	ands	r3, r2
 8001640:	d0f1      	beq.n	8001626 <HAL_RCC_OscConfig+0x242>
 8001642:	e018      	b.n	8001676 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001644:	4b32      	ldr	r3, [pc, #200]	; (8001710 <HAL_RCC_OscConfig+0x32c>)
 8001646:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001648:	4b31      	ldr	r3, [pc, #196]	; (8001710 <HAL_RCC_OscConfig+0x32c>)
 800164a:	2101      	movs	r1, #1
 800164c:	438a      	bics	r2, r1
 800164e:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001650:	f7ff fc12 	bl	8000e78 <HAL_GetTick>
 8001654:	0003      	movs	r3, r0
 8001656:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001658:	e008      	b.n	800166c <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800165a:	f7ff fc0d 	bl	8000e78 <HAL_GetTick>
 800165e:	0002      	movs	r2, r0
 8001660:	69bb      	ldr	r3, [r7, #24]
 8001662:	1ad3      	subs	r3, r2, r3
 8001664:	2b02      	cmp	r3, #2
 8001666:	d901      	bls.n	800166c <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8001668:	2303      	movs	r3, #3
 800166a:	e1c6      	b.n	80019fa <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800166c:	4b28      	ldr	r3, [pc, #160]	; (8001710 <HAL_RCC_OscConfig+0x32c>)
 800166e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001670:	2202      	movs	r2, #2
 8001672:	4013      	ands	r3, r2
 8001674:	d1f1      	bne.n	800165a <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	2204      	movs	r2, #4
 800167c:	4013      	ands	r3, r2
 800167e:	d100      	bne.n	8001682 <HAL_RCC_OscConfig+0x29e>
 8001680:	e0b4      	b.n	80017ec <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001682:	201f      	movs	r0, #31
 8001684:	183b      	adds	r3, r7, r0
 8001686:	2200      	movs	r2, #0
 8001688:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800168a:	4b21      	ldr	r3, [pc, #132]	; (8001710 <HAL_RCC_OscConfig+0x32c>)
 800168c:	69da      	ldr	r2, [r3, #28]
 800168e:	2380      	movs	r3, #128	; 0x80
 8001690:	055b      	lsls	r3, r3, #21
 8001692:	4013      	ands	r3, r2
 8001694:	d110      	bne.n	80016b8 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001696:	4b1e      	ldr	r3, [pc, #120]	; (8001710 <HAL_RCC_OscConfig+0x32c>)
 8001698:	69da      	ldr	r2, [r3, #28]
 800169a:	4b1d      	ldr	r3, [pc, #116]	; (8001710 <HAL_RCC_OscConfig+0x32c>)
 800169c:	2180      	movs	r1, #128	; 0x80
 800169e:	0549      	lsls	r1, r1, #21
 80016a0:	430a      	orrs	r2, r1
 80016a2:	61da      	str	r2, [r3, #28]
 80016a4:	4b1a      	ldr	r3, [pc, #104]	; (8001710 <HAL_RCC_OscConfig+0x32c>)
 80016a6:	69da      	ldr	r2, [r3, #28]
 80016a8:	2380      	movs	r3, #128	; 0x80
 80016aa:	055b      	lsls	r3, r3, #21
 80016ac:	4013      	ands	r3, r2
 80016ae:	60fb      	str	r3, [r7, #12]
 80016b0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80016b2:	183b      	adds	r3, r7, r0
 80016b4:	2201      	movs	r2, #1
 80016b6:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016b8:	4b18      	ldr	r3, [pc, #96]	; (800171c <HAL_RCC_OscConfig+0x338>)
 80016ba:	681a      	ldr	r2, [r3, #0]
 80016bc:	2380      	movs	r3, #128	; 0x80
 80016be:	005b      	lsls	r3, r3, #1
 80016c0:	4013      	ands	r3, r2
 80016c2:	d11a      	bne.n	80016fa <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80016c4:	4b15      	ldr	r3, [pc, #84]	; (800171c <HAL_RCC_OscConfig+0x338>)
 80016c6:	681a      	ldr	r2, [r3, #0]
 80016c8:	4b14      	ldr	r3, [pc, #80]	; (800171c <HAL_RCC_OscConfig+0x338>)
 80016ca:	2180      	movs	r1, #128	; 0x80
 80016cc:	0049      	lsls	r1, r1, #1
 80016ce:	430a      	orrs	r2, r1
 80016d0:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016d2:	f7ff fbd1 	bl	8000e78 <HAL_GetTick>
 80016d6:	0003      	movs	r3, r0
 80016d8:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016da:	e008      	b.n	80016ee <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016dc:	f7ff fbcc 	bl	8000e78 <HAL_GetTick>
 80016e0:	0002      	movs	r2, r0
 80016e2:	69bb      	ldr	r3, [r7, #24]
 80016e4:	1ad3      	subs	r3, r2, r3
 80016e6:	2b64      	cmp	r3, #100	; 0x64
 80016e8:	d901      	bls.n	80016ee <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 80016ea:	2303      	movs	r3, #3
 80016ec:	e185      	b.n	80019fa <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016ee:	4b0b      	ldr	r3, [pc, #44]	; (800171c <HAL_RCC_OscConfig+0x338>)
 80016f0:	681a      	ldr	r2, [r3, #0]
 80016f2:	2380      	movs	r3, #128	; 0x80
 80016f4:	005b      	lsls	r3, r3, #1
 80016f6:	4013      	ands	r3, r2
 80016f8:	d0f0      	beq.n	80016dc <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	689b      	ldr	r3, [r3, #8]
 80016fe:	2b01      	cmp	r3, #1
 8001700:	d10e      	bne.n	8001720 <HAL_RCC_OscConfig+0x33c>
 8001702:	4b03      	ldr	r3, [pc, #12]	; (8001710 <HAL_RCC_OscConfig+0x32c>)
 8001704:	6a1a      	ldr	r2, [r3, #32]
 8001706:	4b02      	ldr	r3, [pc, #8]	; (8001710 <HAL_RCC_OscConfig+0x32c>)
 8001708:	2101      	movs	r1, #1
 800170a:	430a      	orrs	r2, r1
 800170c:	621a      	str	r2, [r3, #32]
 800170e:	e035      	b.n	800177c <HAL_RCC_OscConfig+0x398>
 8001710:	40021000 	.word	0x40021000
 8001714:	fffeffff 	.word	0xfffeffff
 8001718:	fffbffff 	.word	0xfffbffff
 800171c:	40007000 	.word	0x40007000
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	689b      	ldr	r3, [r3, #8]
 8001724:	2b00      	cmp	r3, #0
 8001726:	d10c      	bne.n	8001742 <HAL_RCC_OscConfig+0x35e>
 8001728:	4bb6      	ldr	r3, [pc, #728]	; (8001a04 <HAL_RCC_OscConfig+0x620>)
 800172a:	6a1a      	ldr	r2, [r3, #32]
 800172c:	4bb5      	ldr	r3, [pc, #724]	; (8001a04 <HAL_RCC_OscConfig+0x620>)
 800172e:	2101      	movs	r1, #1
 8001730:	438a      	bics	r2, r1
 8001732:	621a      	str	r2, [r3, #32]
 8001734:	4bb3      	ldr	r3, [pc, #716]	; (8001a04 <HAL_RCC_OscConfig+0x620>)
 8001736:	6a1a      	ldr	r2, [r3, #32]
 8001738:	4bb2      	ldr	r3, [pc, #712]	; (8001a04 <HAL_RCC_OscConfig+0x620>)
 800173a:	2104      	movs	r1, #4
 800173c:	438a      	bics	r2, r1
 800173e:	621a      	str	r2, [r3, #32]
 8001740:	e01c      	b.n	800177c <HAL_RCC_OscConfig+0x398>
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	689b      	ldr	r3, [r3, #8]
 8001746:	2b05      	cmp	r3, #5
 8001748:	d10c      	bne.n	8001764 <HAL_RCC_OscConfig+0x380>
 800174a:	4bae      	ldr	r3, [pc, #696]	; (8001a04 <HAL_RCC_OscConfig+0x620>)
 800174c:	6a1a      	ldr	r2, [r3, #32]
 800174e:	4bad      	ldr	r3, [pc, #692]	; (8001a04 <HAL_RCC_OscConfig+0x620>)
 8001750:	2104      	movs	r1, #4
 8001752:	430a      	orrs	r2, r1
 8001754:	621a      	str	r2, [r3, #32]
 8001756:	4bab      	ldr	r3, [pc, #684]	; (8001a04 <HAL_RCC_OscConfig+0x620>)
 8001758:	6a1a      	ldr	r2, [r3, #32]
 800175a:	4baa      	ldr	r3, [pc, #680]	; (8001a04 <HAL_RCC_OscConfig+0x620>)
 800175c:	2101      	movs	r1, #1
 800175e:	430a      	orrs	r2, r1
 8001760:	621a      	str	r2, [r3, #32]
 8001762:	e00b      	b.n	800177c <HAL_RCC_OscConfig+0x398>
 8001764:	4ba7      	ldr	r3, [pc, #668]	; (8001a04 <HAL_RCC_OscConfig+0x620>)
 8001766:	6a1a      	ldr	r2, [r3, #32]
 8001768:	4ba6      	ldr	r3, [pc, #664]	; (8001a04 <HAL_RCC_OscConfig+0x620>)
 800176a:	2101      	movs	r1, #1
 800176c:	438a      	bics	r2, r1
 800176e:	621a      	str	r2, [r3, #32]
 8001770:	4ba4      	ldr	r3, [pc, #656]	; (8001a04 <HAL_RCC_OscConfig+0x620>)
 8001772:	6a1a      	ldr	r2, [r3, #32]
 8001774:	4ba3      	ldr	r3, [pc, #652]	; (8001a04 <HAL_RCC_OscConfig+0x620>)
 8001776:	2104      	movs	r1, #4
 8001778:	438a      	bics	r2, r1
 800177a:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	689b      	ldr	r3, [r3, #8]
 8001780:	2b00      	cmp	r3, #0
 8001782:	d014      	beq.n	80017ae <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001784:	f7ff fb78 	bl	8000e78 <HAL_GetTick>
 8001788:	0003      	movs	r3, r0
 800178a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800178c:	e009      	b.n	80017a2 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800178e:	f7ff fb73 	bl	8000e78 <HAL_GetTick>
 8001792:	0002      	movs	r2, r0
 8001794:	69bb      	ldr	r3, [r7, #24]
 8001796:	1ad3      	subs	r3, r2, r3
 8001798:	4a9b      	ldr	r2, [pc, #620]	; (8001a08 <HAL_RCC_OscConfig+0x624>)
 800179a:	4293      	cmp	r3, r2
 800179c:	d901      	bls.n	80017a2 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 800179e:	2303      	movs	r3, #3
 80017a0:	e12b      	b.n	80019fa <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017a2:	4b98      	ldr	r3, [pc, #608]	; (8001a04 <HAL_RCC_OscConfig+0x620>)
 80017a4:	6a1b      	ldr	r3, [r3, #32]
 80017a6:	2202      	movs	r2, #2
 80017a8:	4013      	ands	r3, r2
 80017aa:	d0f0      	beq.n	800178e <HAL_RCC_OscConfig+0x3aa>
 80017ac:	e013      	b.n	80017d6 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017ae:	f7ff fb63 	bl	8000e78 <HAL_GetTick>
 80017b2:	0003      	movs	r3, r0
 80017b4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017b6:	e009      	b.n	80017cc <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017b8:	f7ff fb5e 	bl	8000e78 <HAL_GetTick>
 80017bc:	0002      	movs	r2, r0
 80017be:	69bb      	ldr	r3, [r7, #24]
 80017c0:	1ad3      	subs	r3, r2, r3
 80017c2:	4a91      	ldr	r2, [pc, #580]	; (8001a08 <HAL_RCC_OscConfig+0x624>)
 80017c4:	4293      	cmp	r3, r2
 80017c6:	d901      	bls.n	80017cc <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 80017c8:	2303      	movs	r3, #3
 80017ca:	e116      	b.n	80019fa <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017cc:	4b8d      	ldr	r3, [pc, #564]	; (8001a04 <HAL_RCC_OscConfig+0x620>)
 80017ce:	6a1b      	ldr	r3, [r3, #32]
 80017d0:	2202      	movs	r2, #2
 80017d2:	4013      	ands	r3, r2
 80017d4:	d1f0      	bne.n	80017b8 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80017d6:	231f      	movs	r3, #31
 80017d8:	18fb      	adds	r3, r7, r3
 80017da:	781b      	ldrb	r3, [r3, #0]
 80017dc:	2b01      	cmp	r3, #1
 80017de:	d105      	bne.n	80017ec <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017e0:	4b88      	ldr	r3, [pc, #544]	; (8001a04 <HAL_RCC_OscConfig+0x620>)
 80017e2:	69da      	ldr	r2, [r3, #28]
 80017e4:	4b87      	ldr	r3, [pc, #540]	; (8001a04 <HAL_RCC_OscConfig+0x620>)
 80017e6:	4989      	ldr	r1, [pc, #548]	; (8001a0c <HAL_RCC_OscConfig+0x628>)
 80017e8:	400a      	ands	r2, r1
 80017ea:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	2210      	movs	r2, #16
 80017f2:	4013      	ands	r3, r2
 80017f4:	d063      	beq.n	80018be <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	695b      	ldr	r3, [r3, #20]
 80017fa:	2b01      	cmp	r3, #1
 80017fc:	d12a      	bne.n	8001854 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80017fe:	4b81      	ldr	r3, [pc, #516]	; (8001a04 <HAL_RCC_OscConfig+0x620>)
 8001800:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001802:	4b80      	ldr	r3, [pc, #512]	; (8001a04 <HAL_RCC_OscConfig+0x620>)
 8001804:	2104      	movs	r1, #4
 8001806:	430a      	orrs	r2, r1
 8001808:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800180a:	4b7e      	ldr	r3, [pc, #504]	; (8001a04 <HAL_RCC_OscConfig+0x620>)
 800180c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800180e:	4b7d      	ldr	r3, [pc, #500]	; (8001a04 <HAL_RCC_OscConfig+0x620>)
 8001810:	2101      	movs	r1, #1
 8001812:	430a      	orrs	r2, r1
 8001814:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001816:	f7ff fb2f 	bl	8000e78 <HAL_GetTick>
 800181a:	0003      	movs	r3, r0
 800181c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800181e:	e008      	b.n	8001832 <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001820:	f7ff fb2a 	bl	8000e78 <HAL_GetTick>
 8001824:	0002      	movs	r2, r0
 8001826:	69bb      	ldr	r3, [r7, #24]
 8001828:	1ad3      	subs	r3, r2, r3
 800182a:	2b02      	cmp	r3, #2
 800182c:	d901      	bls.n	8001832 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 800182e:	2303      	movs	r3, #3
 8001830:	e0e3      	b.n	80019fa <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001832:	4b74      	ldr	r3, [pc, #464]	; (8001a04 <HAL_RCC_OscConfig+0x620>)
 8001834:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001836:	2202      	movs	r2, #2
 8001838:	4013      	ands	r3, r2
 800183a:	d0f1      	beq.n	8001820 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800183c:	4b71      	ldr	r3, [pc, #452]	; (8001a04 <HAL_RCC_OscConfig+0x620>)
 800183e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001840:	22f8      	movs	r2, #248	; 0xf8
 8001842:	4393      	bics	r3, r2
 8001844:	0019      	movs	r1, r3
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	699b      	ldr	r3, [r3, #24]
 800184a:	00da      	lsls	r2, r3, #3
 800184c:	4b6d      	ldr	r3, [pc, #436]	; (8001a04 <HAL_RCC_OscConfig+0x620>)
 800184e:	430a      	orrs	r2, r1
 8001850:	635a      	str	r2, [r3, #52]	; 0x34
 8001852:	e034      	b.n	80018be <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	695b      	ldr	r3, [r3, #20]
 8001858:	3305      	adds	r3, #5
 800185a:	d111      	bne.n	8001880 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 800185c:	4b69      	ldr	r3, [pc, #420]	; (8001a04 <HAL_RCC_OscConfig+0x620>)
 800185e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001860:	4b68      	ldr	r3, [pc, #416]	; (8001a04 <HAL_RCC_OscConfig+0x620>)
 8001862:	2104      	movs	r1, #4
 8001864:	438a      	bics	r2, r1
 8001866:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001868:	4b66      	ldr	r3, [pc, #408]	; (8001a04 <HAL_RCC_OscConfig+0x620>)
 800186a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800186c:	22f8      	movs	r2, #248	; 0xf8
 800186e:	4393      	bics	r3, r2
 8001870:	0019      	movs	r1, r3
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	699b      	ldr	r3, [r3, #24]
 8001876:	00da      	lsls	r2, r3, #3
 8001878:	4b62      	ldr	r3, [pc, #392]	; (8001a04 <HAL_RCC_OscConfig+0x620>)
 800187a:	430a      	orrs	r2, r1
 800187c:	635a      	str	r2, [r3, #52]	; 0x34
 800187e:	e01e      	b.n	80018be <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001880:	4b60      	ldr	r3, [pc, #384]	; (8001a04 <HAL_RCC_OscConfig+0x620>)
 8001882:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001884:	4b5f      	ldr	r3, [pc, #380]	; (8001a04 <HAL_RCC_OscConfig+0x620>)
 8001886:	2104      	movs	r1, #4
 8001888:	430a      	orrs	r2, r1
 800188a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 800188c:	4b5d      	ldr	r3, [pc, #372]	; (8001a04 <HAL_RCC_OscConfig+0x620>)
 800188e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001890:	4b5c      	ldr	r3, [pc, #368]	; (8001a04 <HAL_RCC_OscConfig+0x620>)
 8001892:	2101      	movs	r1, #1
 8001894:	438a      	bics	r2, r1
 8001896:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001898:	f7ff faee 	bl	8000e78 <HAL_GetTick>
 800189c:	0003      	movs	r3, r0
 800189e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80018a0:	e008      	b.n	80018b4 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80018a2:	f7ff fae9 	bl	8000e78 <HAL_GetTick>
 80018a6:	0002      	movs	r2, r0
 80018a8:	69bb      	ldr	r3, [r7, #24]
 80018aa:	1ad3      	subs	r3, r2, r3
 80018ac:	2b02      	cmp	r3, #2
 80018ae:	d901      	bls.n	80018b4 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 80018b0:	2303      	movs	r3, #3
 80018b2:	e0a2      	b.n	80019fa <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80018b4:	4b53      	ldr	r3, [pc, #332]	; (8001a04 <HAL_RCC_OscConfig+0x620>)
 80018b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018b8:	2202      	movs	r2, #2
 80018ba:	4013      	ands	r3, r2
 80018bc:	d1f1      	bne.n	80018a2 <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	6a1b      	ldr	r3, [r3, #32]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d100      	bne.n	80018c8 <HAL_RCC_OscConfig+0x4e4>
 80018c6:	e097      	b.n	80019f8 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80018c8:	4b4e      	ldr	r3, [pc, #312]	; (8001a04 <HAL_RCC_OscConfig+0x620>)
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	220c      	movs	r2, #12
 80018ce:	4013      	ands	r3, r2
 80018d0:	2b08      	cmp	r3, #8
 80018d2:	d100      	bne.n	80018d6 <HAL_RCC_OscConfig+0x4f2>
 80018d4:	e06b      	b.n	80019ae <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	6a1b      	ldr	r3, [r3, #32]
 80018da:	2b02      	cmp	r3, #2
 80018dc:	d14c      	bne.n	8001978 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018de:	4b49      	ldr	r3, [pc, #292]	; (8001a04 <HAL_RCC_OscConfig+0x620>)
 80018e0:	681a      	ldr	r2, [r3, #0]
 80018e2:	4b48      	ldr	r3, [pc, #288]	; (8001a04 <HAL_RCC_OscConfig+0x620>)
 80018e4:	494a      	ldr	r1, [pc, #296]	; (8001a10 <HAL_RCC_OscConfig+0x62c>)
 80018e6:	400a      	ands	r2, r1
 80018e8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018ea:	f7ff fac5 	bl	8000e78 <HAL_GetTick>
 80018ee:	0003      	movs	r3, r0
 80018f0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018f2:	e008      	b.n	8001906 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018f4:	f7ff fac0 	bl	8000e78 <HAL_GetTick>
 80018f8:	0002      	movs	r2, r0
 80018fa:	69bb      	ldr	r3, [r7, #24]
 80018fc:	1ad3      	subs	r3, r2, r3
 80018fe:	2b02      	cmp	r3, #2
 8001900:	d901      	bls.n	8001906 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8001902:	2303      	movs	r3, #3
 8001904:	e079      	b.n	80019fa <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001906:	4b3f      	ldr	r3, [pc, #252]	; (8001a04 <HAL_RCC_OscConfig+0x620>)
 8001908:	681a      	ldr	r2, [r3, #0]
 800190a:	2380      	movs	r3, #128	; 0x80
 800190c:	049b      	lsls	r3, r3, #18
 800190e:	4013      	ands	r3, r2
 8001910:	d1f0      	bne.n	80018f4 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001912:	4b3c      	ldr	r3, [pc, #240]	; (8001a04 <HAL_RCC_OscConfig+0x620>)
 8001914:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001916:	220f      	movs	r2, #15
 8001918:	4393      	bics	r3, r2
 800191a:	0019      	movs	r1, r3
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001920:	4b38      	ldr	r3, [pc, #224]	; (8001a04 <HAL_RCC_OscConfig+0x620>)
 8001922:	430a      	orrs	r2, r1
 8001924:	62da      	str	r2, [r3, #44]	; 0x2c
 8001926:	4b37      	ldr	r3, [pc, #220]	; (8001a04 <HAL_RCC_OscConfig+0x620>)
 8001928:	685b      	ldr	r3, [r3, #4]
 800192a:	4a3a      	ldr	r2, [pc, #232]	; (8001a14 <HAL_RCC_OscConfig+0x630>)
 800192c:	4013      	ands	r3, r2
 800192e:	0019      	movs	r1, r3
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001938:	431a      	orrs	r2, r3
 800193a:	4b32      	ldr	r3, [pc, #200]	; (8001a04 <HAL_RCC_OscConfig+0x620>)
 800193c:	430a      	orrs	r2, r1
 800193e:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001940:	4b30      	ldr	r3, [pc, #192]	; (8001a04 <HAL_RCC_OscConfig+0x620>)
 8001942:	681a      	ldr	r2, [r3, #0]
 8001944:	4b2f      	ldr	r3, [pc, #188]	; (8001a04 <HAL_RCC_OscConfig+0x620>)
 8001946:	2180      	movs	r1, #128	; 0x80
 8001948:	0449      	lsls	r1, r1, #17
 800194a:	430a      	orrs	r2, r1
 800194c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800194e:	f7ff fa93 	bl	8000e78 <HAL_GetTick>
 8001952:	0003      	movs	r3, r0
 8001954:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001956:	e008      	b.n	800196a <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001958:	f7ff fa8e 	bl	8000e78 <HAL_GetTick>
 800195c:	0002      	movs	r2, r0
 800195e:	69bb      	ldr	r3, [r7, #24]
 8001960:	1ad3      	subs	r3, r2, r3
 8001962:	2b02      	cmp	r3, #2
 8001964:	d901      	bls.n	800196a <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8001966:	2303      	movs	r3, #3
 8001968:	e047      	b.n	80019fa <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800196a:	4b26      	ldr	r3, [pc, #152]	; (8001a04 <HAL_RCC_OscConfig+0x620>)
 800196c:	681a      	ldr	r2, [r3, #0]
 800196e:	2380      	movs	r3, #128	; 0x80
 8001970:	049b      	lsls	r3, r3, #18
 8001972:	4013      	ands	r3, r2
 8001974:	d0f0      	beq.n	8001958 <HAL_RCC_OscConfig+0x574>
 8001976:	e03f      	b.n	80019f8 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001978:	4b22      	ldr	r3, [pc, #136]	; (8001a04 <HAL_RCC_OscConfig+0x620>)
 800197a:	681a      	ldr	r2, [r3, #0]
 800197c:	4b21      	ldr	r3, [pc, #132]	; (8001a04 <HAL_RCC_OscConfig+0x620>)
 800197e:	4924      	ldr	r1, [pc, #144]	; (8001a10 <HAL_RCC_OscConfig+0x62c>)
 8001980:	400a      	ands	r2, r1
 8001982:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001984:	f7ff fa78 	bl	8000e78 <HAL_GetTick>
 8001988:	0003      	movs	r3, r0
 800198a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800198c:	e008      	b.n	80019a0 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800198e:	f7ff fa73 	bl	8000e78 <HAL_GetTick>
 8001992:	0002      	movs	r2, r0
 8001994:	69bb      	ldr	r3, [r7, #24]
 8001996:	1ad3      	subs	r3, r2, r3
 8001998:	2b02      	cmp	r3, #2
 800199a:	d901      	bls.n	80019a0 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 800199c:	2303      	movs	r3, #3
 800199e:	e02c      	b.n	80019fa <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019a0:	4b18      	ldr	r3, [pc, #96]	; (8001a04 <HAL_RCC_OscConfig+0x620>)
 80019a2:	681a      	ldr	r2, [r3, #0]
 80019a4:	2380      	movs	r3, #128	; 0x80
 80019a6:	049b      	lsls	r3, r3, #18
 80019a8:	4013      	ands	r3, r2
 80019aa:	d1f0      	bne.n	800198e <HAL_RCC_OscConfig+0x5aa>
 80019ac:	e024      	b.n	80019f8 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	6a1b      	ldr	r3, [r3, #32]
 80019b2:	2b01      	cmp	r3, #1
 80019b4:	d101      	bne.n	80019ba <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 80019b6:	2301      	movs	r3, #1
 80019b8:	e01f      	b.n	80019fa <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80019ba:	4b12      	ldr	r3, [pc, #72]	; (8001a04 <HAL_RCC_OscConfig+0x620>)
 80019bc:	685b      	ldr	r3, [r3, #4]
 80019be:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80019c0:	4b10      	ldr	r3, [pc, #64]	; (8001a04 <HAL_RCC_OscConfig+0x620>)
 80019c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019c4:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80019c6:	697a      	ldr	r2, [r7, #20]
 80019c8:	2380      	movs	r3, #128	; 0x80
 80019ca:	025b      	lsls	r3, r3, #9
 80019cc:	401a      	ands	r2, r3
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019d2:	429a      	cmp	r2, r3
 80019d4:	d10e      	bne.n	80019f4 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80019d6:	693b      	ldr	r3, [r7, #16]
 80019d8:	220f      	movs	r2, #15
 80019da:	401a      	ands	r2, r3
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80019e0:	429a      	cmp	r2, r3
 80019e2:	d107      	bne.n	80019f4 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80019e4:	697a      	ldr	r2, [r7, #20]
 80019e6:	23f0      	movs	r3, #240	; 0xf0
 80019e8:	039b      	lsls	r3, r3, #14
 80019ea:	401a      	ands	r2, r3
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80019f0:	429a      	cmp	r2, r3
 80019f2:	d001      	beq.n	80019f8 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 80019f4:	2301      	movs	r3, #1
 80019f6:	e000      	b.n	80019fa <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 80019f8:	2300      	movs	r3, #0
}
 80019fa:	0018      	movs	r0, r3
 80019fc:	46bd      	mov	sp, r7
 80019fe:	b008      	add	sp, #32
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	46c0      	nop			; (mov r8, r8)
 8001a04:	40021000 	.word	0x40021000
 8001a08:	00001388 	.word	0x00001388
 8001a0c:	efffffff 	.word	0xefffffff
 8001a10:	feffffff 	.word	0xfeffffff
 8001a14:	ffc2ffff 	.word	0xffc2ffff

08001a18 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b084      	sub	sp, #16
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
 8001a20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d101      	bne.n	8001a2c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a28:	2301      	movs	r3, #1
 8001a2a:	e0b3      	b.n	8001b94 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a2c:	4b5b      	ldr	r3, [pc, #364]	; (8001b9c <HAL_RCC_ClockConfig+0x184>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	2201      	movs	r2, #1
 8001a32:	4013      	ands	r3, r2
 8001a34:	683a      	ldr	r2, [r7, #0]
 8001a36:	429a      	cmp	r2, r3
 8001a38:	d911      	bls.n	8001a5e <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a3a:	4b58      	ldr	r3, [pc, #352]	; (8001b9c <HAL_RCC_ClockConfig+0x184>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	2201      	movs	r2, #1
 8001a40:	4393      	bics	r3, r2
 8001a42:	0019      	movs	r1, r3
 8001a44:	4b55      	ldr	r3, [pc, #340]	; (8001b9c <HAL_RCC_ClockConfig+0x184>)
 8001a46:	683a      	ldr	r2, [r7, #0]
 8001a48:	430a      	orrs	r2, r1
 8001a4a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a4c:	4b53      	ldr	r3, [pc, #332]	; (8001b9c <HAL_RCC_ClockConfig+0x184>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	2201      	movs	r2, #1
 8001a52:	4013      	ands	r3, r2
 8001a54:	683a      	ldr	r2, [r7, #0]
 8001a56:	429a      	cmp	r2, r3
 8001a58:	d001      	beq.n	8001a5e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	e09a      	b.n	8001b94 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	2202      	movs	r2, #2
 8001a64:	4013      	ands	r3, r2
 8001a66:	d015      	beq.n	8001a94 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	2204      	movs	r2, #4
 8001a6e:	4013      	ands	r3, r2
 8001a70:	d006      	beq.n	8001a80 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001a72:	4b4b      	ldr	r3, [pc, #300]	; (8001ba0 <HAL_RCC_ClockConfig+0x188>)
 8001a74:	685a      	ldr	r2, [r3, #4]
 8001a76:	4b4a      	ldr	r3, [pc, #296]	; (8001ba0 <HAL_RCC_ClockConfig+0x188>)
 8001a78:	21e0      	movs	r1, #224	; 0xe0
 8001a7a:	00c9      	lsls	r1, r1, #3
 8001a7c:	430a      	orrs	r2, r1
 8001a7e:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a80:	4b47      	ldr	r3, [pc, #284]	; (8001ba0 <HAL_RCC_ClockConfig+0x188>)
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	22f0      	movs	r2, #240	; 0xf0
 8001a86:	4393      	bics	r3, r2
 8001a88:	0019      	movs	r1, r3
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	689a      	ldr	r2, [r3, #8]
 8001a8e:	4b44      	ldr	r3, [pc, #272]	; (8001ba0 <HAL_RCC_ClockConfig+0x188>)
 8001a90:	430a      	orrs	r2, r1
 8001a92:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	2201      	movs	r2, #1
 8001a9a:	4013      	ands	r3, r2
 8001a9c:	d040      	beq.n	8001b20 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	685b      	ldr	r3, [r3, #4]
 8001aa2:	2b01      	cmp	r3, #1
 8001aa4:	d107      	bne.n	8001ab6 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001aa6:	4b3e      	ldr	r3, [pc, #248]	; (8001ba0 <HAL_RCC_ClockConfig+0x188>)
 8001aa8:	681a      	ldr	r2, [r3, #0]
 8001aaa:	2380      	movs	r3, #128	; 0x80
 8001aac:	029b      	lsls	r3, r3, #10
 8001aae:	4013      	ands	r3, r2
 8001ab0:	d114      	bne.n	8001adc <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	e06e      	b.n	8001b94 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	2b02      	cmp	r3, #2
 8001abc:	d107      	bne.n	8001ace <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001abe:	4b38      	ldr	r3, [pc, #224]	; (8001ba0 <HAL_RCC_ClockConfig+0x188>)
 8001ac0:	681a      	ldr	r2, [r3, #0]
 8001ac2:	2380      	movs	r3, #128	; 0x80
 8001ac4:	049b      	lsls	r3, r3, #18
 8001ac6:	4013      	ands	r3, r2
 8001ac8:	d108      	bne.n	8001adc <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001aca:	2301      	movs	r3, #1
 8001acc:	e062      	b.n	8001b94 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ace:	4b34      	ldr	r3, [pc, #208]	; (8001ba0 <HAL_RCC_ClockConfig+0x188>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	2202      	movs	r2, #2
 8001ad4:	4013      	ands	r3, r2
 8001ad6:	d101      	bne.n	8001adc <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001ad8:	2301      	movs	r3, #1
 8001ada:	e05b      	b.n	8001b94 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001adc:	4b30      	ldr	r3, [pc, #192]	; (8001ba0 <HAL_RCC_ClockConfig+0x188>)
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	2203      	movs	r2, #3
 8001ae2:	4393      	bics	r3, r2
 8001ae4:	0019      	movs	r1, r3
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	685a      	ldr	r2, [r3, #4]
 8001aea:	4b2d      	ldr	r3, [pc, #180]	; (8001ba0 <HAL_RCC_ClockConfig+0x188>)
 8001aec:	430a      	orrs	r2, r1
 8001aee:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001af0:	f7ff f9c2 	bl	8000e78 <HAL_GetTick>
 8001af4:	0003      	movs	r3, r0
 8001af6:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001af8:	e009      	b.n	8001b0e <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001afa:	f7ff f9bd 	bl	8000e78 <HAL_GetTick>
 8001afe:	0002      	movs	r2, r0
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	1ad3      	subs	r3, r2, r3
 8001b04:	4a27      	ldr	r2, [pc, #156]	; (8001ba4 <HAL_RCC_ClockConfig+0x18c>)
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d901      	bls.n	8001b0e <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8001b0a:	2303      	movs	r3, #3
 8001b0c:	e042      	b.n	8001b94 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b0e:	4b24      	ldr	r3, [pc, #144]	; (8001ba0 <HAL_RCC_ClockConfig+0x188>)
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	220c      	movs	r2, #12
 8001b14:	401a      	ands	r2, r3
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	009b      	lsls	r3, r3, #2
 8001b1c:	429a      	cmp	r2, r3
 8001b1e:	d1ec      	bne.n	8001afa <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001b20:	4b1e      	ldr	r3, [pc, #120]	; (8001b9c <HAL_RCC_ClockConfig+0x184>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	2201      	movs	r2, #1
 8001b26:	4013      	ands	r3, r2
 8001b28:	683a      	ldr	r2, [r7, #0]
 8001b2a:	429a      	cmp	r2, r3
 8001b2c:	d211      	bcs.n	8001b52 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b2e:	4b1b      	ldr	r3, [pc, #108]	; (8001b9c <HAL_RCC_ClockConfig+0x184>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	2201      	movs	r2, #1
 8001b34:	4393      	bics	r3, r2
 8001b36:	0019      	movs	r1, r3
 8001b38:	4b18      	ldr	r3, [pc, #96]	; (8001b9c <HAL_RCC_ClockConfig+0x184>)
 8001b3a:	683a      	ldr	r2, [r7, #0]
 8001b3c:	430a      	orrs	r2, r1
 8001b3e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b40:	4b16      	ldr	r3, [pc, #88]	; (8001b9c <HAL_RCC_ClockConfig+0x184>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	2201      	movs	r2, #1
 8001b46:	4013      	ands	r3, r2
 8001b48:	683a      	ldr	r2, [r7, #0]
 8001b4a:	429a      	cmp	r2, r3
 8001b4c:	d001      	beq.n	8001b52 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8001b4e:	2301      	movs	r3, #1
 8001b50:	e020      	b.n	8001b94 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	2204      	movs	r2, #4
 8001b58:	4013      	ands	r3, r2
 8001b5a:	d009      	beq.n	8001b70 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001b5c:	4b10      	ldr	r3, [pc, #64]	; (8001ba0 <HAL_RCC_ClockConfig+0x188>)
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	4a11      	ldr	r2, [pc, #68]	; (8001ba8 <HAL_RCC_ClockConfig+0x190>)
 8001b62:	4013      	ands	r3, r2
 8001b64:	0019      	movs	r1, r3
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	68da      	ldr	r2, [r3, #12]
 8001b6a:	4b0d      	ldr	r3, [pc, #52]	; (8001ba0 <HAL_RCC_ClockConfig+0x188>)
 8001b6c:	430a      	orrs	r2, r1
 8001b6e:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001b70:	f000 f820 	bl	8001bb4 <HAL_RCC_GetSysClockFreq>
 8001b74:	0001      	movs	r1, r0
 8001b76:	4b0a      	ldr	r3, [pc, #40]	; (8001ba0 <HAL_RCC_ClockConfig+0x188>)
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	091b      	lsrs	r3, r3, #4
 8001b7c:	220f      	movs	r2, #15
 8001b7e:	4013      	ands	r3, r2
 8001b80:	4a0a      	ldr	r2, [pc, #40]	; (8001bac <HAL_RCC_ClockConfig+0x194>)
 8001b82:	5cd3      	ldrb	r3, [r2, r3]
 8001b84:	000a      	movs	r2, r1
 8001b86:	40da      	lsrs	r2, r3
 8001b88:	4b09      	ldr	r3, [pc, #36]	; (8001bb0 <HAL_RCC_ClockConfig+0x198>)
 8001b8a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001b8c:	2003      	movs	r0, #3
 8001b8e:	f7ff f92d 	bl	8000dec <HAL_InitTick>
  
  return HAL_OK;
 8001b92:	2300      	movs	r3, #0
}
 8001b94:	0018      	movs	r0, r3
 8001b96:	46bd      	mov	sp, r7
 8001b98:	b004      	add	sp, #16
 8001b9a:	bd80      	pop	{r7, pc}
 8001b9c:	40022000 	.word	0x40022000
 8001ba0:	40021000 	.word	0x40021000
 8001ba4:	00001388 	.word	0x00001388
 8001ba8:	fffff8ff 	.word	0xfffff8ff
 8001bac:	08002ae4 	.word	0x08002ae4
 8001bb0:	20000004 	.word	0x20000004

08001bb4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001bb4:	b590      	push	{r4, r7, lr}
 8001bb6:	b08f      	sub	sp, #60	; 0x3c
 8001bb8:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8001bba:	2314      	movs	r3, #20
 8001bbc:	18fb      	adds	r3, r7, r3
 8001bbe:	4a2b      	ldr	r2, [pc, #172]	; (8001c6c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001bc0:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001bc2:	c313      	stmia	r3!, {r0, r1, r4}
 8001bc4:	6812      	ldr	r2, [r2, #0]
 8001bc6:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8001bc8:	1d3b      	adds	r3, r7, #4
 8001bca:	4a29      	ldr	r2, [pc, #164]	; (8001c70 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001bcc:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001bce:	c313      	stmia	r3!, {r0, r1, r4}
 8001bd0:	6812      	ldr	r2, [r2, #0]
 8001bd2:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001bd8:	2300      	movs	r3, #0
 8001bda:	62bb      	str	r3, [r7, #40]	; 0x28
 8001bdc:	2300      	movs	r3, #0
 8001bde:	637b      	str	r3, [r7, #52]	; 0x34
 8001be0:	2300      	movs	r3, #0
 8001be2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8001be4:	2300      	movs	r3, #0
 8001be6:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8001be8:	4b22      	ldr	r3, [pc, #136]	; (8001c74 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001bee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bf0:	220c      	movs	r2, #12
 8001bf2:	4013      	ands	r3, r2
 8001bf4:	2b04      	cmp	r3, #4
 8001bf6:	d002      	beq.n	8001bfe <HAL_RCC_GetSysClockFreq+0x4a>
 8001bf8:	2b08      	cmp	r3, #8
 8001bfa:	d003      	beq.n	8001c04 <HAL_RCC_GetSysClockFreq+0x50>
 8001bfc:	e02d      	b.n	8001c5a <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001bfe:	4b1e      	ldr	r3, [pc, #120]	; (8001c78 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001c00:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001c02:	e02d      	b.n	8001c60 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001c04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c06:	0c9b      	lsrs	r3, r3, #18
 8001c08:	220f      	movs	r2, #15
 8001c0a:	4013      	ands	r3, r2
 8001c0c:	2214      	movs	r2, #20
 8001c0e:	18ba      	adds	r2, r7, r2
 8001c10:	5cd3      	ldrb	r3, [r2, r3]
 8001c12:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001c14:	4b17      	ldr	r3, [pc, #92]	; (8001c74 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001c16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c18:	220f      	movs	r2, #15
 8001c1a:	4013      	ands	r3, r2
 8001c1c:	1d3a      	adds	r2, r7, #4
 8001c1e:	5cd3      	ldrb	r3, [r2, r3]
 8001c20:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001c22:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001c24:	2380      	movs	r3, #128	; 0x80
 8001c26:	025b      	lsls	r3, r3, #9
 8001c28:	4013      	ands	r3, r2
 8001c2a:	d009      	beq.n	8001c40 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001c2c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001c2e:	4812      	ldr	r0, [pc, #72]	; (8001c78 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001c30:	f7fe fa74 	bl	800011c <__udivsi3>
 8001c34:	0003      	movs	r3, r0
 8001c36:	001a      	movs	r2, r3
 8001c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c3a:	4353      	muls	r3, r2
 8001c3c:	637b      	str	r3, [r7, #52]	; 0x34
 8001c3e:	e009      	b.n	8001c54 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001c40:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001c42:	000a      	movs	r2, r1
 8001c44:	0152      	lsls	r2, r2, #5
 8001c46:	1a52      	subs	r2, r2, r1
 8001c48:	0193      	lsls	r3, r2, #6
 8001c4a:	1a9b      	subs	r3, r3, r2
 8001c4c:	00db      	lsls	r3, r3, #3
 8001c4e:	185b      	adds	r3, r3, r1
 8001c50:	021b      	lsls	r3, r3, #8
 8001c52:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8001c54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c56:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001c58:	e002      	b.n	8001c60 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001c5a:	4b07      	ldr	r3, [pc, #28]	; (8001c78 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001c5c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001c5e:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001c60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001c62:	0018      	movs	r0, r3
 8001c64:	46bd      	mov	sp, r7
 8001c66:	b00f      	add	sp, #60	; 0x3c
 8001c68:	bd90      	pop	{r4, r7, pc}
 8001c6a:	46c0      	nop			; (mov r8, r8)
 8001c6c:	08002ab0 	.word	0x08002ab0
 8001c70:	08002ac0 	.word	0x08002ac0
 8001c74:	40021000 	.word	0x40021000
 8001c78:	007a1200 	.word	0x007a1200

08001c7c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b082      	sub	sp, #8
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d101      	bne.n	8001c8e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	e042      	b.n	8001d14 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	223d      	movs	r2, #61	; 0x3d
 8001c92:	5c9b      	ldrb	r3, [r3, r2]
 8001c94:	b2db      	uxtb	r3, r3
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d107      	bne.n	8001caa <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	223c      	movs	r2, #60	; 0x3c
 8001c9e:	2100      	movs	r1, #0
 8001ca0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	0018      	movs	r0, r3
 8001ca6:	f7fe ffcb 	bl	8000c40 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	223d      	movs	r2, #61	; 0x3d
 8001cae:	2102      	movs	r1, #2
 8001cb0:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681a      	ldr	r2, [r3, #0]
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	3304      	adds	r3, #4
 8001cba:	0019      	movs	r1, r3
 8001cbc:	0010      	movs	r0, r2
 8001cbe:	f000 f9a9 	bl	8002014 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	2246      	movs	r2, #70	; 0x46
 8001cc6:	2101      	movs	r1, #1
 8001cc8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	223e      	movs	r2, #62	; 0x3e
 8001cce:	2101      	movs	r1, #1
 8001cd0:	5499      	strb	r1, [r3, r2]
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	223f      	movs	r2, #63	; 0x3f
 8001cd6:	2101      	movs	r1, #1
 8001cd8:	5499      	strb	r1, [r3, r2]
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	2240      	movs	r2, #64	; 0x40
 8001cde:	2101      	movs	r1, #1
 8001ce0:	5499      	strb	r1, [r3, r2]
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	2241      	movs	r2, #65	; 0x41
 8001ce6:	2101      	movs	r1, #1
 8001ce8:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	2242      	movs	r2, #66	; 0x42
 8001cee:	2101      	movs	r1, #1
 8001cf0:	5499      	strb	r1, [r3, r2]
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	2243      	movs	r2, #67	; 0x43
 8001cf6:	2101      	movs	r1, #1
 8001cf8:	5499      	strb	r1, [r3, r2]
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	2244      	movs	r2, #68	; 0x44
 8001cfe:	2101      	movs	r1, #1
 8001d00:	5499      	strb	r1, [r3, r2]
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	2245      	movs	r2, #69	; 0x45
 8001d06:	2101      	movs	r1, #1
 8001d08:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	223d      	movs	r2, #61	; 0x3d
 8001d0e:	2101      	movs	r1, #1
 8001d10:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001d12:	2300      	movs	r3, #0
}
 8001d14:	0018      	movs	r0, r3
 8001d16:	46bd      	mov	sp, r7
 8001d18:	b002      	add	sp, #8
 8001d1a:	bd80      	pop	{r7, pc}

08001d1c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b084      	sub	sp, #16
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	223d      	movs	r2, #61	; 0x3d
 8001d28:	5c9b      	ldrb	r3, [r3, r2]
 8001d2a:	b2db      	uxtb	r3, r3
 8001d2c:	2b01      	cmp	r3, #1
 8001d2e:	d001      	beq.n	8001d34 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8001d30:	2301      	movs	r3, #1
 8001d32:	e028      	b.n	8001d86 <HAL_TIM_Base_Start+0x6a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	223d      	movs	r2, #61	; 0x3d
 8001d38:	2102      	movs	r1, #2
 8001d3a:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4a13      	ldr	r2, [pc, #76]	; (8001d90 <HAL_TIM_Base_Start+0x74>)
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d004      	beq.n	8001d50 <HAL_TIM_Base_Start+0x34>
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	4a12      	ldr	r2, [pc, #72]	; (8001d94 <HAL_TIM_Base_Start+0x78>)
 8001d4c:	4293      	cmp	r3, r2
 8001d4e:	d111      	bne.n	8001d74 <HAL_TIM_Base_Start+0x58>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	689b      	ldr	r3, [r3, #8]
 8001d56:	2207      	movs	r2, #7
 8001d58:	4013      	ands	r3, r2
 8001d5a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	2b06      	cmp	r3, #6
 8001d60:	d010      	beq.n	8001d84 <HAL_TIM_Base_Start+0x68>
    {
      __HAL_TIM_ENABLE(htim);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	681a      	ldr	r2, [r3, #0]
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	2101      	movs	r1, #1
 8001d6e:	430a      	orrs	r2, r1
 8001d70:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d72:	e007      	b.n	8001d84 <HAL_TIM_Base_Start+0x68>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	681a      	ldr	r2, [r3, #0]
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	2101      	movs	r1, #1
 8001d80:	430a      	orrs	r2, r1
 8001d82:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001d84:	2300      	movs	r3, #0
}
 8001d86:	0018      	movs	r0, r3
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	b004      	add	sp, #16
 8001d8c:	bd80      	pop	{r7, pc}
 8001d8e:	46c0      	nop			; (mov r8, r8)
 8001d90:	40012c00 	.word	0x40012c00
 8001d94:	40000400 	.word	0x40000400

08001d98 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b082      	sub	sp, #8
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	691b      	ldr	r3, [r3, #16]
 8001da6:	2202      	movs	r2, #2
 8001da8:	4013      	ands	r3, r2
 8001daa:	2b02      	cmp	r3, #2
 8001dac:	d124      	bne.n	8001df8 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	68db      	ldr	r3, [r3, #12]
 8001db4:	2202      	movs	r2, #2
 8001db6:	4013      	ands	r3, r2
 8001db8:	2b02      	cmp	r3, #2
 8001dba:	d11d      	bne.n	8001df8 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	2203      	movs	r2, #3
 8001dc2:	4252      	negs	r2, r2
 8001dc4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	2201      	movs	r2, #1
 8001dca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	699b      	ldr	r3, [r3, #24]
 8001dd2:	2203      	movs	r2, #3
 8001dd4:	4013      	ands	r3, r2
 8001dd6:	d004      	beq.n	8001de2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	0018      	movs	r0, r3
 8001ddc:	f000 f902 	bl	8001fe4 <HAL_TIM_IC_CaptureCallback>
 8001de0:	e007      	b.n	8001df2 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	0018      	movs	r0, r3
 8001de6:	f000 f8f5 	bl	8001fd4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	0018      	movs	r0, r3
 8001dee:	f000 f901 	bl	8001ff4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	2200      	movs	r2, #0
 8001df6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	691b      	ldr	r3, [r3, #16]
 8001dfe:	2204      	movs	r2, #4
 8001e00:	4013      	ands	r3, r2
 8001e02:	2b04      	cmp	r3, #4
 8001e04:	d125      	bne.n	8001e52 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	68db      	ldr	r3, [r3, #12]
 8001e0c:	2204      	movs	r2, #4
 8001e0e:	4013      	ands	r3, r2
 8001e10:	2b04      	cmp	r3, #4
 8001e12:	d11e      	bne.n	8001e52 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	2205      	movs	r2, #5
 8001e1a:	4252      	negs	r2, r2
 8001e1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2202      	movs	r2, #2
 8001e22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	699a      	ldr	r2, [r3, #24]
 8001e2a:	23c0      	movs	r3, #192	; 0xc0
 8001e2c:	009b      	lsls	r3, r3, #2
 8001e2e:	4013      	ands	r3, r2
 8001e30:	d004      	beq.n	8001e3c <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	0018      	movs	r0, r3
 8001e36:	f000 f8d5 	bl	8001fe4 <HAL_TIM_IC_CaptureCallback>
 8001e3a:	e007      	b.n	8001e4c <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	0018      	movs	r0, r3
 8001e40:	f000 f8c8 	bl	8001fd4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	0018      	movs	r0, r3
 8001e48:	f000 f8d4 	bl	8001ff4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2200      	movs	r2, #0
 8001e50:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	691b      	ldr	r3, [r3, #16]
 8001e58:	2208      	movs	r2, #8
 8001e5a:	4013      	ands	r3, r2
 8001e5c:	2b08      	cmp	r3, #8
 8001e5e:	d124      	bne.n	8001eaa <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	68db      	ldr	r3, [r3, #12]
 8001e66:	2208      	movs	r2, #8
 8001e68:	4013      	ands	r3, r2
 8001e6a:	2b08      	cmp	r3, #8
 8001e6c:	d11d      	bne.n	8001eaa <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	2209      	movs	r2, #9
 8001e74:	4252      	negs	r2, r2
 8001e76:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2204      	movs	r2, #4
 8001e7c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	69db      	ldr	r3, [r3, #28]
 8001e84:	2203      	movs	r2, #3
 8001e86:	4013      	ands	r3, r2
 8001e88:	d004      	beq.n	8001e94 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	0018      	movs	r0, r3
 8001e8e:	f000 f8a9 	bl	8001fe4 <HAL_TIM_IC_CaptureCallback>
 8001e92:	e007      	b.n	8001ea4 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	0018      	movs	r0, r3
 8001e98:	f000 f89c 	bl	8001fd4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	0018      	movs	r0, r3
 8001ea0:	f000 f8a8 	bl	8001ff4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	691b      	ldr	r3, [r3, #16]
 8001eb0:	2210      	movs	r2, #16
 8001eb2:	4013      	ands	r3, r2
 8001eb4:	2b10      	cmp	r3, #16
 8001eb6:	d125      	bne.n	8001f04 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	68db      	ldr	r3, [r3, #12]
 8001ebe:	2210      	movs	r2, #16
 8001ec0:	4013      	ands	r3, r2
 8001ec2:	2b10      	cmp	r3, #16
 8001ec4:	d11e      	bne.n	8001f04 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	2211      	movs	r2, #17
 8001ecc:	4252      	negs	r2, r2
 8001ece:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2208      	movs	r2, #8
 8001ed4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	69da      	ldr	r2, [r3, #28]
 8001edc:	23c0      	movs	r3, #192	; 0xc0
 8001ede:	009b      	lsls	r3, r3, #2
 8001ee0:	4013      	ands	r3, r2
 8001ee2:	d004      	beq.n	8001eee <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	0018      	movs	r0, r3
 8001ee8:	f000 f87c 	bl	8001fe4 <HAL_TIM_IC_CaptureCallback>
 8001eec:	e007      	b.n	8001efe <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	0018      	movs	r0, r3
 8001ef2:	f000 f86f 	bl	8001fd4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	0018      	movs	r0, r3
 8001efa:	f000 f87b 	bl	8001ff4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	2200      	movs	r2, #0
 8001f02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	691b      	ldr	r3, [r3, #16]
 8001f0a:	2201      	movs	r2, #1
 8001f0c:	4013      	ands	r3, r2
 8001f0e:	2b01      	cmp	r3, #1
 8001f10:	d10f      	bne.n	8001f32 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	68db      	ldr	r3, [r3, #12]
 8001f18:	2201      	movs	r2, #1
 8001f1a:	4013      	ands	r3, r2
 8001f1c:	2b01      	cmp	r3, #1
 8001f1e:	d108      	bne.n	8001f32 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	2202      	movs	r2, #2
 8001f26:	4252      	negs	r2, r2
 8001f28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	0018      	movs	r0, r3
 8001f2e:	f000 f849 	bl	8001fc4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	691b      	ldr	r3, [r3, #16]
 8001f38:	2280      	movs	r2, #128	; 0x80
 8001f3a:	4013      	ands	r3, r2
 8001f3c:	2b80      	cmp	r3, #128	; 0x80
 8001f3e:	d10f      	bne.n	8001f60 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	68db      	ldr	r3, [r3, #12]
 8001f46:	2280      	movs	r2, #128	; 0x80
 8001f48:	4013      	ands	r3, r2
 8001f4a:	2b80      	cmp	r3, #128	; 0x80
 8001f4c:	d108      	bne.n	8001f60 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	2281      	movs	r2, #129	; 0x81
 8001f54:	4252      	negs	r2, r2
 8001f56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	0018      	movs	r0, r3
 8001f5c:	f000 f8ce 	bl	80020fc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	691b      	ldr	r3, [r3, #16]
 8001f66:	2240      	movs	r2, #64	; 0x40
 8001f68:	4013      	ands	r3, r2
 8001f6a:	2b40      	cmp	r3, #64	; 0x40
 8001f6c:	d10f      	bne.n	8001f8e <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	68db      	ldr	r3, [r3, #12]
 8001f74:	2240      	movs	r2, #64	; 0x40
 8001f76:	4013      	ands	r3, r2
 8001f78:	2b40      	cmp	r3, #64	; 0x40
 8001f7a:	d108      	bne.n	8001f8e <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	2241      	movs	r2, #65	; 0x41
 8001f82:	4252      	negs	r2, r2
 8001f84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	0018      	movs	r0, r3
 8001f8a:	f000 f83b 	bl	8002004 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	691b      	ldr	r3, [r3, #16]
 8001f94:	2220      	movs	r2, #32
 8001f96:	4013      	ands	r3, r2
 8001f98:	2b20      	cmp	r3, #32
 8001f9a:	d10f      	bne.n	8001fbc <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	68db      	ldr	r3, [r3, #12]
 8001fa2:	2220      	movs	r2, #32
 8001fa4:	4013      	ands	r3, r2
 8001fa6:	2b20      	cmp	r3, #32
 8001fa8:	d108      	bne.n	8001fbc <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	2221      	movs	r2, #33	; 0x21
 8001fb0:	4252      	negs	r2, r2
 8001fb2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	0018      	movs	r0, r3
 8001fb8:	f000 f898 	bl	80020ec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001fbc:	46c0      	nop			; (mov r8, r8)
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	b002      	add	sp, #8
 8001fc2:	bd80      	pop	{r7, pc}

08001fc4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b082      	sub	sp, #8
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8001fcc:	46c0      	nop			; (mov r8, r8)
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	b002      	add	sp, #8
 8001fd2:	bd80      	pop	{r7, pc}

08001fd4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b082      	sub	sp, #8
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001fdc:	46c0      	nop			; (mov r8, r8)
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	b002      	add	sp, #8
 8001fe2:	bd80      	pop	{r7, pc}

08001fe4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b082      	sub	sp, #8
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001fec:	46c0      	nop			; (mov r8, r8)
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	b002      	add	sp, #8
 8001ff2:	bd80      	pop	{r7, pc}

08001ff4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b082      	sub	sp, #8
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001ffc:	46c0      	nop			; (mov r8, r8)
 8001ffe:	46bd      	mov	sp, r7
 8002000:	b002      	add	sp, #8
 8002002:	bd80      	pop	{r7, pc}

08002004 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b082      	sub	sp, #8
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800200c:	46c0      	nop			; (mov r8, r8)
 800200e:	46bd      	mov	sp, r7
 8002010:	b002      	add	sp, #8
 8002012:	bd80      	pop	{r7, pc}

08002014 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b084      	sub	sp, #16
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
 800201c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	4a2b      	ldr	r2, [pc, #172]	; (80020d4 <TIM_Base_SetConfig+0xc0>)
 8002028:	4293      	cmp	r3, r2
 800202a:	d003      	beq.n	8002034 <TIM_Base_SetConfig+0x20>
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	4a2a      	ldr	r2, [pc, #168]	; (80020d8 <TIM_Base_SetConfig+0xc4>)
 8002030:	4293      	cmp	r3, r2
 8002032:	d108      	bne.n	8002046 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	2270      	movs	r2, #112	; 0x70
 8002038:	4393      	bics	r3, r2
 800203a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	685b      	ldr	r3, [r3, #4]
 8002040:	68fa      	ldr	r2, [r7, #12]
 8002042:	4313      	orrs	r3, r2
 8002044:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	4a22      	ldr	r2, [pc, #136]	; (80020d4 <TIM_Base_SetConfig+0xc0>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d00f      	beq.n	800206e <TIM_Base_SetConfig+0x5a>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	4a21      	ldr	r2, [pc, #132]	; (80020d8 <TIM_Base_SetConfig+0xc4>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d00b      	beq.n	800206e <TIM_Base_SetConfig+0x5a>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	4a20      	ldr	r2, [pc, #128]	; (80020dc <TIM_Base_SetConfig+0xc8>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d007      	beq.n	800206e <TIM_Base_SetConfig+0x5a>
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	4a1f      	ldr	r2, [pc, #124]	; (80020e0 <TIM_Base_SetConfig+0xcc>)
 8002062:	4293      	cmp	r3, r2
 8002064:	d003      	beq.n	800206e <TIM_Base_SetConfig+0x5a>
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	4a1e      	ldr	r2, [pc, #120]	; (80020e4 <TIM_Base_SetConfig+0xd0>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d108      	bne.n	8002080 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	4a1d      	ldr	r2, [pc, #116]	; (80020e8 <TIM_Base_SetConfig+0xd4>)
 8002072:	4013      	ands	r3, r2
 8002074:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	68db      	ldr	r3, [r3, #12]
 800207a:	68fa      	ldr	r2, [r7, #12]
 800207c:	4313      	orrs	r3, r2
 800207e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	2280      	movs	r2, #128	; 0x80
 8002084:	4393      	bics	r3, r2
 8002086:	001a      	movs	r2, r3
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	695b      	ldr	r3, [r3, #20]
 800208c:	4313      	orrs	r3, r2
 800208e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	68fa      	ldr	r2, [r7, #12]
 8002094:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	689a      	ldr	r2, [r3, #8]
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	681a      	ldr	r2, [r3, #0]
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	4a0a      	ldr	r2, [pc, #40]	; (80020d4 <TIM_Base_SetConfig+0xc0>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d007      	beq.n	80020be <TIM_Base_SetConfig+0xaa>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	4a0b      	ldr	r2, [pc, #44]	; (80020e0 <TIM_Base_SetConfig+0xcc>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d003      	beq.n	80020be <TIM_Base_SetConfig+0xaa>
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	4a0a      	ldr	r2, [pc, #40]	; (80020e4 <TIM_Base_SetConfig+0xd0>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d103      	bne.n	80020c6 <TIM_Base_SetConfig+0xb2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	691a      	ldr	r2, [r3, #16]
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2201      	movs	r2, #1
 80020ca:	615a      	str	r2, [r3, #20]
}
 80020cc:	46c0      	nop			; (mov r8, r8)
 80020ce:	46bd      	mov	sp, r7
 80020d0:	b004      	add	sp, #16
 80020d2:	bd80      	pop	{r7, pc}
 80020d4:	40012c00 	.word	0x40012c00
 80020d8:	40000400 	.word	0x40000400
 80020dc:	40002000 	.word	0x40002000
 80020e0:	40014400 	.word	0x40014400
 80020e4:	40014800 	.word	0x40014800
 80020e8:	fffffcff 	.word	0xfffffcff

080020ec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b082      	sub	sp, #8
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80020f4:	46c0      	nop			; (mov r8, r8)
 80020f6:	46bd      	mov	sp, r7
 80020f8:	b002      	add	sp, #8
 80020fa:	bd80      	pop	{r7, pc}

080020fc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b082      	sub	sp, #8
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002104:	46c0      	nop			; (mov r8, r8)
 8002106:	46bd      	mov	sp, r7
 8002108:	b002      	add	sp, #8
 800210a:	bd80      	pop	{r7, pc}

0800210c <__errno>:
 800210c:	4b01      	ldr	r3, [pc, #4]	; (8002114 <__errno+0x8>)
 800210e:	6818      	ldr	r0, [r3, #0]
 8002110:	4770      	bx	lr
 8002112:	46c0      	nop			; (mov r8, r8)
 8002114:	20000010 	.word	0x20000010

08002118 <__libc_init_array>:
 8002118:	b570      	push	{r4, r5, r6, lr}
 800211a:	2600      	movs	r6, #0
 800211c:	4d0c      	ldr	r5, [pc, #48]	; (8002150 <__libc_init_array+0x38>)
 800211e:	4c0d      	ldr	r4, [pc, #52]	; (8002154 <__libc_init_array+0x3c>)
 8002120:	1b64      	subs	r4, r4, r5
 8002122:	10a4      	asrs	r4, r4, #2
 8002124:	42a6      	cmp	r6, r4
 8002126:	d109      	bne.n	800213c <__libc_init_array+0x24>
 8002128:	2600      	movs	r6, #0
 800212a:	f000 fc8b 	bl	8002a44 <_init>
 800212e:	4d0a      	ldr	r5, [pc, #40]	; (8002158 <__libc_init_array+0x40>)
 8002130:	4c0a      	ldr	r4, [pc, #40]	; (800215c <__libc_init_array+0x44>)
 8002132:	1b64      	subs	r4, r4, r5
 8002134:	10a4      	asrs	r4, r4, #2
 8002136:	42a6      	cmp	r6, r4
 8002138:	d105      	bne.n	8002146 <__libc_init_array+0x2e>
 800213a:	bd70      	pop	{r4, r5, r6, pc}
 800213c:	00b3      	lsls	r3, r6, #2
 800213e:	58eb      	ldr	r3, [r5, r3]
 8002140:	4798      	blx	r3
 8002142:	3601      	adds	r6, #1
 8002144:	e7ee      	b.n	8002124 <__libc_init_array+0xc>
 8002146:	00b3      	lsls	r3, r6, #2
 8002148:	58eb      	ldr	r3, [r5, r3]
 800214a:	4798      	blx	r3
 800214c:	3601      	adds	r6, #1
 800214e:	e7f2      	b.n	8002136 <__libc_init_array+0x1e>
 8002150:	08002b28 	.word	0x08002b28
 8002154:	08002b28 	.word	0x08002b28
 8002158:	08002b28 	.word	0x08002b28
 800215c:	08002b2c 	.word	0x08002b2c

08002160 <memset>:
 8002160:	0003      	movs	r3, r0
 8002162:	1882      	adds	r2, r0, r2
 8002164:	4293      	cmp	r3, r2
 8002166:	d100      	bne.n	800216a <memset+0xa>
 8002168:	4770      	bx	lr
 800216a:	7019      	strb	r1, [r3, #0]
 800216c:	3301      	adds	r3, #1
 800216e:	e7f9      	b.n	8002164 <memset+0x4>

08002170 <siprintf>:
 8002170:	b40e      	push	{r1, r2, r3}
 8002172:	b500      	push	{lr}
 8002174:	490b      	ldr	r1, [pc, #44]	; (80021a4 <siprintf+0x34>)
 8002176:	b09c      	sub	sp, #112	; 0x70
 8002178:	ab1d      	add	r3, sp, #116	; 0x74
 800217a:	9002      	str	r0, [sp, #8]
 800217c:	9006      	str	r0, [sp, #24]
 800217e:	9107      	str	r1, [sp, #28]
 8002180:	9104      	str	r1, [sp, #16]
 8002182:	4809      	ldr	r0, [pc, #36]	; (80021a8 <siprintf+0x38>)
 8002184:	4909      	ldr	r1, [pc, #36]	; (80021ac <siprintf+0x3c>)
 8002186:	cb04      	ldmia	r3!, {r2}
 8002188:	9105      	str	r1, [sp, #20]
 800218a:	6800      	ldr	r0, [r0, #0]
 800218c:	a902      	add	r1, sp, #8
 800218e:	9301      	str	r3, [sp, #4]
 8002190:	f000 f870 	bl	8002274 <_svfiprintf_r>
 8002194:	2300      	movs	r3, #0
 8002196:	9a02      	ldr	r2, [sp, #8]
 8002198:	7013      	strb	r3, [r2, #0]
 800219a:	b01c      	add	sp, #112	; 0x70
 800219c:	bc08      	pop	{r3}
 800219e:	b003      	add	sp, #12
 80021a0:	4718      	bx	r3
 80021a2:	46c0      	nop			; (mov r8, r8)
 80021a4:	7fffffff 	.word	0x7fffffff
 80021a8:	20000010 	.word	0x20000010
 80021ac:	ffff0208 	.word	0xffff0208

080021b0 <__ssputs_r>:
 80021b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80021b2:	688e      	ldr	r6, [r1, #8]
 80021b4:	b085      	sub	sp, #20
 80021b6:	0007      	movs	r7, r0
 80021b8:	000c      	movs	r4, r1
 80021ba:	9203      	str	r2, [sp, #12]
 80021bc:	9301      	str	r3, [sp, #4]
 80021be:	429e      	cmp	r6, r3
 80021c0:	d83c      	bhi.n	800223c <__ssputs_r+0x8c>
 80021c2:	2390      	movs	r3, #144	; 0x90
 80021c4:	898a      	ldrh	r2, [r1, #12]
 80021c6:	00db      	lsls	r3, r3, #3
 80021c8:	421a      	tst	r2, r3
 80021ca:	d034      	beq.n	8002236 <__ssputs_r+0x86>
 80021cc:	6909      	ldr	r1, [r1, #16]
 80021ce:	6823      	ldr	r3, [r4, #0]
 80021d0:	6960      	ldr	r0, [r4, #20]
 80021d2:	1a5b      	subs	r3, r3, r1
 80021d4:	9302      	str	r3, [sp, #8]
 80021d6:	2303      	movs	r3, #3
 80021d8:	4343      	muls	r3, r0
 80021da:	0fdd      	lsrs	r5, r3, #31
 80021dc:	18ed      	adds	r5, r5, r3
 80021de:	9b01      	ldr	r3, [sp, #4]
 80021e0:	9802      	ldr	r0, [sp, #8]
 80021e2:	3301      	adds	r3, #1
 80021e4:	181b      	adds	r3, r3, r0
 80021e6:	106d      	asrs	r5, r5, #1
 80021e8:	42ab      	cmp	r3, r5
 80021ea:	d900      	bls.n	80021ee <__ssputs_r+0x3e>
 80021ec:	001d      	movs	r5, r3
 80021ee:	0553      	lsls	r3, r2, #21
 80021f0:	d532      	bpl.n	8002258 <__ssputs_r+0xa8>
 80021f2:	0029      	movs	r1, r5
 80021f4:	0038      	movs	r0, r7
 80021f6:	f000 fb53 	bl	80028a0 <_malloc_r>
 80021fa:	1e06      	subs	r6, r0, #0
 80021fc:	d109      	bne.n	8002212 <__ssputs_r+0x62>
 80021fe:	230c      	movs	r3, #12
 8002200:	603b      	str	r3, [r7, #0]
 8002202:	2340      	movs	r3, #64	; 0x40
 8002204:	2001      	movs	r0, #1
 8002206:	89a2      	ldrh	r2, [r4, #12]
 8002208:	4240      	negs	r0, r0
 800220a:	4313      	orrs	r3, r2
 800220c:	81a3      	strh	r3, [r4, #12]
 800220e:	b005      	add	sp, #20
 8002210:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002212:	9a02      	ldr	r2, [sp, #8]
 8002214:	6921      	ldr	r1, [r4, #16]
 8002216:	f000 faba 	bl	800278e <memcpy>
 800221a:	89a3      	ldrh	r3, [r4, #12]
 800221c:	4a14      	ldr	r2, [pc, #80]	; (8002270 <__ssputs_r+0xc0>)
 800221e:	401a      	ands	r2, r3
 8002220:	2380      	movs	r3, #128	; 0x80
 8002222:	4313      	orrs	r3, r2
 8002224:	81a3      	strh	r3, [r4, #12]
 8002226:	9b02      	ldr	r3, [sp, #8]
 8002228:	6126      	str	r6, [r4, #16]
 800222a:	18f6      	adds	r6, r6, r3
 800222c:	6026      	str	r6, [r4, #0]
 800222e:	6165      	str	r5, [r4, #20]
 8002230:	9e01      	ldr	r6, [sp, #4]
 8002232:	1aed      	subs	r5, r5, r3
 8002234:	60a5      	str	r5, [r4, #8]
 8002236:	9b01      	ldr	r3, [sp, #4]
 8002238:	429e      	cmp	r6, r3
 800223a:	d900      	bls.n	800223e <__ssputs_r+0x8e>
 800223c:	9e01      	ldr	r6, [sp, #4]
 800223e:	0032      	movs	r2, r6
 8002240:	9903      	ldr	r1, [sp, #12]
 8002242:	6820      	ldr	r0, [r4, #0]
 8002244:	f000 faac 	bl	80027a0 <memmove>
 8002248:	68a3      	ldr	r3, [r4, #8]
 800224a:	2000      	movs	r0, #0
 800224c:	1b9b      	subs	r3, r3, r6
 800224e:	60a3      	str	r3, [r4, #8]
 8002250:	6823      	ldr	r3, [r4, #0]
 8002252:	199e      	adds	r6, r3, r6
 8002254:	6026      	str	r6, [r4, #0]
 8002256:	e7da      	b.n	800220e <__ssputs_r+0x5e>
 8002258:	002a      	movs	r2, r5
 800225a:	0038      	movs	r0, r7
 800225c:	f000 fb96 	bl	800298c <_realloc_r>
 8002260:	1e06      	subs	r6, r0, #0
 8002262:	d1e0      	bne.n	8002226 <__ssputs_r+0x76>
 8002264:	0038      	movs	r0, r7
 8002266:	6921      	ldr	r1, [r4, #16]
 8002268:	f000 faae 	bl	80027c8 <_free_r>
 800226c:	e7c7      	b.n	80021fe <__ssputs_r+0x4e>
 800226e:	46c0      	nop			; (mov r8, r8)
 8002270:	fffffb7f 	.word	0xfffffb7f

08002274 <_svfiprintf_r>:
 8002274:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002276:	b0a1      	sub	sp, #132	; 0x84
 8002278:	9003      	str	r0, [sp, #12]
 800227a:	001d      	movs	r5, r3
 800227c:	898b      	ldrh	r3, [r1, #12]
 800227e:	000f      	movs	r7, r1
 8002280:	0016      	movs	r6, r2
 8002282:	061b      	lsls	r3, r3, #24
 8002284:	d511      	bpl.n	80022aa <_svfiprintf_r+0x36>
 8002286:	690b      	ldr	r3, [r1, #16]
 8002288:	2b00      	cmp	r3, #0
 800228a:	d10e      	bne.n	80022aa <_svfiprintf_r+0x36>
 800228c:	2140      	movs	r1, #64	; 0x40
 800228e:	f000 fb07 	bl	80028a0 <_malloc_r>
 8002292:	6038      	str	r0, [r7, #0]
 8002294:	6138      	str	r0, [r7, #16]
 8002296:	2800      	cmp	r0, #0
 8002298:	d105      	bne.n	80022a6 <_svfiprintf_r+0x32>
 800229a:	230c      	movs	r3, #12
 800229c:	9a03      	ldr	r2, [sp, #12]
 800229e:	3801      	subs	r0, #1
 80022a0:	6013      	str	r3, [r2, #0]
 80022a2:	b021      	add	sp, #132	; 0x84
 80022a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80022a6:	2340      	movs	r3, #64	; 0x40
 80022a8:	617b      	str	r3, [r7, #20]
 80022aa:	2300      	movs	r3, #0
 80022ac:	ac08      	add	r4, sp, #32
 80022ae:	6163      	str	r3, [r4, #20]
 80022b0:	3320      	adds	r3, #32
 80022b2:	7663      	strb	r3, [r4, #25]
 80022b4:	3310      	adds	r3, #16
 80022b6:	76a3      	strb	r3, [r4, #26]
 80022b8:	9507      	str	r5, [sp, #28]
 80022ba:	0035      	movs	r5, r6
 80022bc:	782b      	ldrb	r3, [r5, #0]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d001      	beq.n	80022c6 <_svfiprintf_r+0x52>
 80022c2:	2b25      	cmp	r3, #37	; 0x25
 80022c4:	d147      	bne.n	8002356 <_svfiprintf_r+0xe2>
 80022c6:	1bab      	subs	r3, r5, r6
 80022c8:	9305      	str	r3, [sp, #20]
 80022ca:	42b5      	cmp	r5, r6
 80022cc:	d00c      	beq.n	80022e8 <_svfiprintf_r+0x74>
 80022ce:	0032      	movs	r2, r6
 80022d0:	0039      	movs	r1, r7
 80022d2:	9803      	ldr	r0, [sp, #12]
 80022d4:	f7ff ff6c 	bl	80021b0 <__ssputs_r>
 80022d8:	1c43      	adds	r3, r0, #1
 80022da:	d100      	bne.n	80022de <_svfiprintf_r+0x6a>
 80022dc:	e0ae      	b.n	800243c <_svfiprintf_r+0x1c8>
 80022de:	6962      	ldr	r2, [r4, #20]
 80022e0:	9b05      	ldr	r3, [sp, #20]
 80022e2:	4694      	mov	ip, r2
 80022e4:	4463      	add	r3, ip
 80022e6:	6163      	str	r3, [r4, #20]
 80022e8:	782b      	ldrb	r3, [r5, #0]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d100      	bne.n	80022f0 <_svfiprintf_r+0x7c>
 80022ee:	e0a5      	b.n	800243c <_svfiprintf_r+0x1c8>
 80022f0:	2201      	movs	r2, #1
 80022f2:	2300      	movs	r3, #0
 80022f4:	4252      	negs	r2, r2
 80022f6:	6062      	str	r2, [r4, #4]
 80022f8:	a904      	add	r1, sp, #16
 80022fa:	3254      	adds	r2, #84	; 0x54
 80022fc:	1852      	adds	r2, r2, r1
 80022fe:	1c6e      	adds	r6, r5, #1
 8002300:	6023      	str	r3, [r4, #0]
 8002302:	60e3      	str	r3, [r4, #12]
 8002304:	60a3      	str	r3, [r4, #8]
 8002306:	7013      	strb	r3, [r2, #0]
 8002308:	65a3      	str	r3, [r4, #88]	; 0x58
 800230a:	2205      	movs	r2, #5
 800230c:	7831      	ldrb	r1, [r6, #0]
 800230e:	4854      	ldr	r0, [pc, #336]	; (8002460 <_svfiprintf_r+0x1ec>)
 8002310:	f000 fa32 	bl	8002778 <memchr>
 8002314:	1c75      	adds	r5, r6, #1
 8002316:	2800      	cmp	r0, #0
 8002318:	d11f      	bne.n	800235a <_svfiprintf_r+0xe6>
 800231a:	6822      	ldr	r2, [r4, #0]
 800231c:	06d3      	lsls	r3, r2, #27
 800231e:	d504      	bpl.n	800232a <_svfiprintf_r+0xb6>
 8002320:	2353      	movs	r3, #83	; 0x53
 8002322:	a904      	add	r1, sp, #16
 8002324:	185b      	adds	r3, r3, r1
 8002326:	2120      	movs	r1, #32
 8002328:	7019      	strb	r1, [r3, #0]
 800232a:	0713      	lsls	r3, r2, #28
 800232c:	d504      	bpl.n	8002338 <_svfiprintf_r+0xc4>
 800232e:	2353      	movs	r3, #83	; 0x53
 8002330:	a904      	add	r1, sp, #16
 8002332:	185b      	adds	r3, r3, r1
 8002334:	212b      	movs	r1, #43	; 0x2b
 8002336:	7019      	strb	r1, [r3, #0]
 8002338:	7833      	ldrb	r3, [r6, #0]
 800233a:	2b2a      	cmp	r3, #42	; 0x2a
 800233c:	d016      	beq.n	800236c <_svfiprintf_r+0xf8>
 800233e:	0035      	movs	r5, r6
 8002340:	2100      	movs	r1, #0
 8002342:	200a      	movs	r0, #10
 8002344:	68e3      	ldr	r3, [r4, #12]
 8002346:	782a      	ldrb	r2, [r5, #0]
 8002348:	1c6e      	adds	r6, r5, #1
 800234a:	3a30      	subs	r2, #48	; 0x30
 800234c:	2a09      	cmp	r2, #9
 800234e:	d94e      	bls.n	80023ee <_svfiprintf_r+0x17a>
 8002350:	2900      	cmp	r1, #0
 8002352:	d111      	bne.n	8002378 <_svfiprintf_r+0x104>
 8002354:	e017      	b.n	8002386 <_svfiprintf_r+0x112>
 8002356:	3501      	adds	r5, #1
 8002358:	e7b0      	b.n	80022bc <_svfiprintf_r+0x48>
 800235a:	4b41      	ldr	r3, [pc, #260]	; (8002460 <_svfiprintf_r+0x1ec>)
 800235c:	6822      	ldr	r2, [r4, #0]
 800235e:	1ac0      	subs	r0, r0, r3
 8002360:	2301      	movs	r3, #1
 8002362:	4083      	lsls	r3, r0
 8002364:	4313      	orrs	r3, r2
 8002366:	002e      	movs	r6, r5
 8002368:	6023      	str	r3, [r4, #0]
 800236a:	e7ce      	b.n	800230a <_svfiprintf_r+0x96>
 800236c:	9b07      	ldr	r3, [sp, #28]
 800236e:	1d19      	adds	r1, r3, #4
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	9107      	str	r1, [sp, #28]
 8002374:	2b00      	cmp	r3, #0
 8002376:	db01      	blt.n	800237c <_svfiprintf_r+0x108>
 8002378:	930b      	str	r3, [sp, #44]	; 0x2c
 800237a:	e004      	b.n	8002386 <_svfiprintf_r+0x112>
 800237c:	425b      	negs	r3, r3
 800237e:	60e3      	str	r3, [r4, #12]
 8002380:	2302      	movs	r3, #2
 8002382:	4313      	orrs	r3, r2
 8002384:	6023      	str	r3, [r4, #0]
 8002386:	782b      	ldrb	r3, [r5, #0]
 8002388:	2b2e      	cmp	r3, #46	; 0x2e
 800238a:	d10a      	bne.n	80023a2 <_svfiprintf_r+0x12e>
 800238c:	786b      	ldrb	r3, [r5, #1]
 800238e:	2b2a      	cmp	r3, #42	; 0x2a
 8002390:	d135      	bne.n	80023fe <_svfiprintf_r+0x18a>
 8002392:	9b07      	ldr	r3, [sp, #28]
 8002394:	3502      	adds	r5, #2
 8002396:	1d1a      	adds	r2, r3, #4
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	9207      	str	r2, [sp, #28]
 800239c:	2b00      	cmp	r3, #0
 800239e:	db2b      	blt.n	80023f8 <_svfiprintf_r+0x184>
 80023a0:	9309      	str	r3, [sp, #36]	; 0x24
 80023a2:	4e30      	ldr	r6, [pc, #192]	; (8002464 <_svfiprintf_r+0x1f0>)
 80023a4:	2203      	movs	r2, #3
 80023a6:	0030      	movs	r0, r6
 80023a8:	7829      	ldrb	r1, [r5, #0]
 80023aa:	f000 f9e5 	bl	8002778 <memchr>
 80023ae:	2800      	cmp	r0, #0
 80023b0:	d006      	beq.n	80023c0 <_svfiprintf_r+0x14c>
 80023b2:	2340      	movs	r3, #64	; 0x40
 80023b4:	1b80      	subs	r0, r0, r6
 80023b6:	4083      	lsls	r3, r0
 80023b8:	6822      	ldr	r2, [r4, #0]
 80023ba:	3501      	adds	r5, #1
 80023bc:	4313      	orrs	r3, r2
 80023be:	6023      	str	r3, [r4, #0]
 80023c0:	7829      	ldrb	r1, [r5, #0]
 80023c2:	2206      	movs	r2, #6
 80023c4:	4828      	ldr	r0, [pc, #160]	; (8002468 <_svfiprintf_r+0x1f4>)
 80023c6:	1c6e      	adds	r6, r5, #1
 80023c8:	7621      	strb	r1, [r4, #24]
 80023ca:	f000 f9d5 	bl	8002778 <memchr>
 80023ce:	2800      	cmp	r0, #0
 80023d0:	d03c      	beq.n	800244c <_svfiprintf_r+0x1d8>
 80023d2:	4b26      	ldr	r3, [pc, #152]	; (800246c <_svfiprintf_r+0x1f8>)
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d125      	bne.n	8002424 <_svfiprintf_r+0x1b0>
 80023d8:	2207      	movs	r2, #7
 80023da:	9b07      	ldr	r3, [sp, #28]
 80023dc:	3307      	adds	r3, #7
 80023de:	4393      	bics	r3, r2
 80023e0:	3308      	adds	r3, #8
 80023e2:	9307      	str	r3, [sp, #28]
 80023e4:	6963      	ldr	r3, [r4, #20]
 80023e6:	9a04      	ldr	r2, [sp, #16]
 80023e8:	189b      	adds	r3, r3, r2
 80023ea:	6163      	str	r3, [r4, #20]
 80023ec:	e765      	b.n	80022ba <_svfiprintf_r+0x46>
 80023ee:	4343      	muls	r3, r0
 80023f0:	0035      	movs	r5, r6
 80023f2:	2101      	movs	r1, #1
 80023f4:	189b      	adds	r3, r3, r2
 80023f6:	e7a6      	b.n	8002346 <_svfiprintf_r+0xd2>
 80023f8:	2301      	movs	r3, #1
 80023fa:	425b      	negs	r3, r3
 80023fc:	e7d0      	b.n	80023a0 <_svfiprintf_r+0x12c>
 80023fe:	2300      	movs	r3, #0
 8002400:	200a      	movs	r0, #10
 8002402:	001a      	movs	r2, r3
 8002404:	3501      	adds	r5, #1
 8002406:	6063      	str	r3, [r4, #4]
 8002408:	7829      	ldrb	r1, [r5, #0]
 800240a:	1c6e      	adds	r6, r5, #1
 800240c:	3930      	subs	r1, #48	; 0x30
 800240e:	2909      	cmp	r1, #9
 8002410:	d903      	bls.n	800241a <_svfiprintf_r+0x1a6>
 8002412:	2b00      	cmp	r3, #0
 8002414:	d0c5      	beq.n	80023a2 <_svfiprintf_r+0x12e>
 8002416:	9209      	str	r2, [sp, #36]	; 0x24
 8002418:	e7c3      	b.n	80023a2 <_svfiprintf_r+0x12e>
 800241a:	4342      	muls	r2, r0
 800241c:	0035      	movs	r5, r6
 800241e:	2301      	movs	r3, #1
 8002420:	1852      	adds	r2, r2, r1
 8002422:	e7f1      	b.n	8002408 <_svfiprintf_r+0x194>
 8002424:	ab07      	add	r3, sp, #28
 8002426:	9300      	str	r3, [sp, #0]
 8002428:	003a      	movs	r2, r7
 800242a:	0021      	movs	r1, r4
 800242c:	4b10      	ldr	r3, [pc, #64]	; (8002470 <_svfiprintf_r+0x1fc>)
 800242e:	9803      	ldr	r0, [sp, #12]
 8002430:	e000      	b.n	8002434 <_svfiprintf_r+0x1c0>
 8002432:	bf00      	nop
 8002434:	9004      	str	r0, [sp, #16]
 8002436:	9b04      	ldr	r3, [sp, #16]
 8002438:	3301      	adds	r3, #1
 800243a:	d1d3      	bne.n	80023e4 <_svfiprintf_r+0x170>
 800243c:	89bb      	ldrh	r3, [r7, #12]
 800243e:	980d      	ldr	r0, [sp, #52]	; 0x34
 8002440:	065b      	lsls	r3, r3, #25
 8002442:	d400      	bmi.n	8002446 <_svfiprintf_r+0x1d2>
 8002444:	e72d      	b.n	80022a2 <_svfiprintf_r+0x2e>
 8002446:	2001      	movs	r0, #1
 8002448:	4240      	negs	r0, r0
 800244a:	e72a      	b.n	80022a2 <_svfiprintf_r+0x2e>
 800244c:	ab07      	add	r3, sp, #28
 800244e:	9300      	str	r3, [sp, #0]
 8002450:	003a      	movs	r2, r7
 8002452:	0021      	movs	r1, r4
 8002454:	4b06      	ldr	r3, [pc, #24]	; (8002470 <_svfiprintf_r+0x1fc>)
 8002456:	9803      	ldr	r0, [sp, #12]
 8002458:	f000 f87c 	bl	8002554 <_printf_i>
 800245c:	e7ea      	b.n	8002434 <_svfiprintf_r+0x1c0>
 800245e:	46c0      	nop			; (mov r8, r8)
 8002460:	08002af4 	.word	0x08002af4
 8002464:	08002afa 	.word	0x08002afa
 8002468:	08002afe 	.word	0x08002afe
 800246c:	00000000 	.word	0x00000000
 8002470:	080021b1 	.word	0x080021b1

08002474 <_printf_common>:
 8002474:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002476:	0015      	movs	r5, r2
 8002478:	9301      	str	r3, [sp, #4]
 800247a:	688a      	ldr	r2, [r1, #8]
 800247c:	690b      	ldr	r3, [r1, #16]
 800247e:	000c      	movs	r4, r1
 8002480:	9000      	str	r0, [sp, #0]
 8002482:	4293      	cmp	r3, r2
 8002484:	da00      	bge.n	8002488 <_printf_common+0x14>
 8002486:	0013      	movs	r3, r2
 8002488:	0022      	movs	r2, r4
 800248a:	602b      	str	r3, [r5, #0]
 800248c:	3243      	adds	r2, #67	; 0x43
 800248e:	7812      	ldrb	r2, [r2, #0]
 8002490:	2a00      	cmp	r2, #0
 8002492:	d001      	beq.n	8002498 <_printf_common+0x24>
 8002494:	3301      	adds	r3, #1
 8002496:	602b      	str	r3, [r5, #0]
 8002498:	6823      	ldr	r3, [r4, #0]
 800249a:	069b      	lsls	r3, r3, #26
 800249c:	d502      	bpl.n	80024a4 <_printf_common+0x30>
 800249e:	682b      	ldr	r3, [r5, #0]
 80024a0:	3302      	adds	r3, #2
 80024a2:	602b      	str	r3, [r5, #0]
 80024a4:	6822      	ldr	r2, [r4, #0]
 80024a6:	2306      	movs	r3, #6
 80024a8:	0017      	movs	r7, r2
 80024aa:	401f      	ands	r7, r3
 80024ac:	421a      	tst	r2, r3
 80024ae:	d027      	beq.n	8002500 <_printf_common+0x8c>
 80024b0:	0023      	movs	r3, r4
 80024b2:	3343      	adds	r3, #67	; 0x43
 80024b4:	781b      	ldrb	r3, [r3, #0]
 80024b6:	1e5a      	subs	r2, r3, #1
 80024b8:	4193      	sbcs	r3, r2
 80024ba:	6822      	ldr	r2, [r4, #0]
 80024bc:	0692      	lsls	r2, r2, #26
 80024be:	d430      	bmi.n	8002522 <_printf_common+0xae>
 80024c0:	0022      	movs	r2, r4
 80024c2:	9901      	ldr	r1, [sp, #4]
 80024c4:	9800      	ldr	r0, [sp, #0]
 80024c6:	9e08      	ldr	r6, [sp, #32]
 80024c8:	3243      	adds	r2, #67	; 0x43
 80024ca:	47b0      	blx	r6
 80024cc:	1c43      	adds	r3, r0, #1
 80024ce:	d025      	beq.n	800251c <_printf_common+0xa8>
 80024d0:	2306      	movs	r3, #6
 80024d2:	6820      	ldr	r0, [r4, #0]
 80024d4:	682a      	ldr	r2, [r5, #0]
 80024d6:	68e1      	ldr	r1, [r4, #12]
 80024d8:	2500      	movs	r5, #0
 80024da:	4003      	ands	r3, r0
 80024dc:	2b04      	cmp	r3, #4
 80024de:	d103      	bne.n	80024e8 <_printf_common+0x74>
 80024e0:	1a8d      	subs	r5, r1, r2
 80024e2:	43eb      	mvns	r3, r5
 80024e4:	17db      	asrs	r3, r3, #31
 80024e6:	401d      	ands	r5, r3
 80024e8:	68a3      	ldr	r3, [r4, #8]
 80024ea:	6922      	ldr	r2, [r4, #16]
 80024ec:	4293      	cmp	r3, r2
 80024ee:	dd01      	ble.n	80024f4 <_printf_common+0x80>
 80024f0:	1a9b      	subs	r3, r3, r2
 80024f2:	18ed      	adds	r5, r5, r3
 80024f4:	2700      	movs	r7, #0
 80024f6:	42bd      	cmp	r5, r7
 80024f8:	d120      	bne.n	800253c <_printf_common+0xc8>
 80024fa:	2000      	movs	r0, #0
 80024fc:	e010      	b.n	8002520 <_printf_common+0xac>
 80024fe:	3701      	adds	r7, #1
 8002500:	68e3      	ldr	r3, [r4, #12]
 8002502:	682a      	ldr	r2, [r5, #0]
 8002504:	1a9b      	subs	r3, r3, r2
 8002506:	42bb      	cmp	r3, r7
 8002508:	ddd2      	ble.n	80024b0 <_printf_common+0x3c>
 800250a:	0022      	movs	r2, r4
 800250c:	2301      	movs	r3, #1
 800250e:	9901      	ldr	r1, [sp, #4]
 8002510:	9800      	ldr	r0, [sp, #0]
 8002512:	9e08      	ldr	r6, [sp, #32]
 8002514:	3219      	adds	r2, #25
 8002516:	47b0      	blx	r6
 8002518:	1c43      	adds	r3, r0, #1
 800251a:	d1f0      	bne.n	80024fe <_printf_common+0x8a>
 800251c:	2001      	movs	r0, #1
 800251e:	4240      	negs	r0, r0
 8002520:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002522:	2030      	movs	r0, #48	; 0x30
 8002524:	18e1      	adds	r1, r4, r3
 8002526:	3143      	adds	r1, #67	; 0x43
 8002528:	7008      	strb	r0, [r1, #0]
 800252a:	0021      	movs	r1, r4
 800252c:	1c5a      	adds	r2, r3, #1
 800252e:	3145      	adds	r1, #69	; 0x45
 8002530:	7809      	ldrb	r1, [r1, #0]
 8002532:	18a2      	adds	r2, r4, r2
 8002534:	3243      	adds	r2, #67	; 0x43
 8002536:	3302      	adds	r3, #2
 8002538:	7011      	strb	r1, [r2, #0]
 800253a:	e7c1      	b.n	80024c0 <_printf_common+0x4c>
 800253c:	0022      	movs	r2, r4
 800253e:	2301      	movs	r3, #1
 8002540:	9901      	ldr	r1, [sp, #4]
 8002542:	9800      	ldr	r0, [sp, #0]
 8002544:	9e08      	ldr	r6, [sp, #32]
 8002546:	321a      	adds	r2, #26
 8002548:	47b0      	blx	r6
 800254a:	1c43      	adds	r3, r0, #1
 800254c:	d0e6      	beq.n	800251c <_printf_common+0xa8>
 800254e:	3701      	adds	r7, #1
 8002550:	e7d1      	b.n	80024f6 <_printf_common+0x82>
	...

08002554 <_printf_i>:
 8002554:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002556:	b08b      	sub	sp, #44	; 0x2c
 8002558:	9206      	str	r2, [sp, #24]
 800255a:	000a      	movs	r2, r1
 800255c:	3243      	adds	r2, #67	; 0x43
 800255e:	9307      	str	r3, [sp, #28]
 8002560:	9005      	str	r0, [sp, #20]
 8002562:	9204      	str	r2, [sp, #16]
 8002564:	7e0a      	ldrb	r2, [r1, #24]
 8002566:	000c      	movs	r4, r1
 8002568:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800256a:	2a78      	cmp	r2, #120	; 0x78
 800256c:	d807      	bhi.n	800257e <_printf_i+0x2a>
 800256e:	2a62      	cmp	r2, #98	; 0x62
 8002570:	d809      	bhi.n	8002586 <_printf_i+0x32>
 8002572:	2a00      	cmp	r2, #0
 8002574:	d100      	bne.n	8002578 <_printf_i+0x24>
 8002576:	e0c1      	b.n	80026fc <_printf_i+0x1a8>
 8002578:	2a58      	cmp	r2, #88	; 0x58
 800257a:	d100      	bne.n	800257e <_printf_i+0x2a>
 800257c:	e08c      	b.n	8002698 <_printf_i+0x144>
 800257e:	0026      	movs	r6, r4
 8002580:	3642      	adds	r6, #66	; 0x42
 8002582:	7032      	strb	r2, [r6, #0]
 8002584:	e022      	b.n	80025cc <_printf_i+0x78>
 8002586:	0010      	movs	r0, r2
 8002588:	3863      	subs	r0, #99	; 0x63
 800258a:	2815      	cmp	r0, #21
 800258c:	d8f7      	bhi.n	800257e <_printf_i+0x2a>
 800258e:	f7fd fdbb 	bl	8000108 <__gnu_thumb1_case_shi>
 8002592:	0016      	.short	0x0016
 8002594:	fff6001f 	.word	0xfff6001f
 8002598:	fff6fff6 	.word	0xfff6fff6
 800259c:	001ffff6 	.word	0x001ffff6
 80025a0:	fff6fff6 	.word	0xfff6fff6
 80025a4:	fff6fff6 	.word	0xfff6fff6
 80025a8:	003600a8 	.word	0x003600a8
 80025ac:	fff6009a 	.word	0xfff6009a
 80025b0:	00b9fff6 	.word	0x00b9fff6
 80025b4:	0036fff6 	.word	0x0036fff6
 80025b8:	fff6fff6 	.word	0xfff6fff6
 80025bc:	009e      	.short	0x009e
 80025be:	0026      	movs	r6, r4
 80025c0:	681a      	ldr	r2, [r3, #0]
 80025c2:	3642      	adds	r6, #66	; 0x42
 80025c4:	1d11      	adds	r1, r2, #4
 80025c6:	6019      	str	r1, [r3, #0]
 80025c8:	6813      	ldr	r3, [r2, #0]
 80025ca:	7033      	strb	r3, [r6, #0]
 80025cc:	2301      	movs	r3, #1
 80025ce:	e0a7      	b.n	8002720 <_printf_i+0x1cc>
 80025d0:	6808      	ldr	r0, [r1, #0]
 80025d2:	6819      	ldr	r1, [r3, #0]
 80025d4:	1d0a      	adds	r2, r1, #4
 80025d6:	0605      	lsls	r5, r0, #24
 80025d8:	d50b      	bpl.n	80025f2 <_printf_i+0x9e>
 80025da:	680d      	ldr	r5, [r1, #0]
 80025dc:	601a      	str	r2, [r3, #0]
 80025de:	2d00      	cmp	r5, #0
 80025e0:	da03      	bge.n	80025ea <_printf_i+0x96>
 80025e2:	232d      	movs	r3, #45	; 0x2d
 80025e4:	9a04      	ldr	r2, [sp, #16]
 80025e6:	426d      	negs	r5, r5
 80025e8:	7013      	strb	r3, [r2, #0]
 80025ea:	4b61      	ldr	r3, [pc, #388]	; (8002770 <_printf_i+0x21c>)
 80025ec:	270a      	movs	r7, #10
 80025ee:	9303      	str	r3, [sp, #12]
 80025f0:	e01b      	b.n	800262a <_printf_i+0xd6>
 80025f2:	680d      	ldr	r5, [r1, #0]
 80025f4:	601a      	str	r2, [r3, #0]
 80025f6:	0641      	lsls	r1, r0, #25
 80025f8:	d5f1      	bpl.n	80025de <_printf_i+0x8a>
 80025fa:	b22d      	sxth	r5, r5
 80025fc:	e7ef      	b.n	80025de <_printf_i+0x8a>
 80025fe:	680d      	ldr	r5, [r1, #0]
 8002600:	6819      	ldr	r1, [r3, #0]
 8002602:	1d08      	adds	r0, r1, #4
 8002604:	6018      	str	r0, [r3, #0]
 8002606:	062e      	lsls	r6, r5, #24
 8002608:	d501      	bpl.n	800260e <_printf_i+0xba>
 800260a:	680d      	ldr	r5, [r1, #0]
 800260c:	e003      	b.n	8002616 <_printf_i+0xc2>
 800260e:	066d      	lsls	r5, r5, #25
 8002610:	d5fb      	bpl.n	800260a <_printf_i+0xb6>
 8002612:	680d      	ldr	r5, [r1, #0]
 8002614:	b2ad      	uxth	r5, r5
 8002616:	4b56      	ldr	r3, [pc, #344]	; (8002770 <_printf_i+0x21c>)
 8002618:	2708      	movs	r7, #8
 800261a:	9303      	str	r3, [sp, #12]
 800261c:	2a6f      	cmp	r2, #111	; 0x6f
 800261e:	d000      	beq.n	8002622 <_printf_i+0xce>
 8002620:	3702      	adds	r7, #2
 8002622:	0023      	movs	r3, r4
 8002624:	2200      	movs	r2, #0
 8002626:	3343      	adds	r3, #67	; 0x43
 8002628:	701a      	strb	r2, [r3, #0]
 800262a:	6863      	ldr	r3, [r4, #4]
 800262c:	60a3      	str	r3, [r4, #8]
 800262e:	2b00      	cmp	r3, #0
 8002630:	db03      	blt.n	800263a <_printf_i+0xe6>
 8002632:	2204      	movs	r2, #4
 8002634:	6821      	ldr	r1, [r4, #0]
 8002636:	4391      	bics	r1, r2
 8002638:	6021      	str	r1, [r4, #0]
 800263a:	2d00      	cmp	r5, #0
 800263c:	d102      	bne.n	8002644 <_printf_i+0xf0>
 800263e:	9e04      	ldr	r6, [sp, #16]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d00c      	beq.n	800265e <_printf_i+0x10a>
 8002644:	9e04      	ldr	r6, [sp, #16]
 8002646:	0028      	movs	r0, r5
 8002648:	0039      	movs	r1, r7
 800264a:	f7fd fded 	bl	8000228 <__aeabi_uidivmod>
 800264e:	9b03      	ldr	r3, [sp, #12]
 8002650:	3e01      	subs	r6, #1
 8002652:	5c5b      	ldrb	r3, [r3, r1]
 8002654:	7033      	strb	r3, [r6, #0]
 8002656:	002b      	movs	r3, r5
 8002658:	0005      	movs	r5, r0
 800265a:	429f      	cmp	r7, r3
 800265c:	d9f3      	bls.n	8002646 <_printf_i+0xf2>
 800265e:	2f08      	cmp	r7, #8
 8002660:	d109      	bne.n	8002676 <_printf_i+0x122>
 8002662:	6823      	ldr	r3, [r4, #0]
 8002664:	07db      	lsls	r3, r3, #31
 8002666:	d506      	bpl.n	8002676 <_printf_i+0x122>
 8002668:	6863      	ldr	r3, [r4, #4]
 800266a:	6922      	ldr	r2, [r4, #16]
 800266c:	4293      	cmp	r3, r2
 800266e:	dc02      	bgt.n	8002676 <_printf_i+0x122>
 8002670:	2330      	movs	r3, #48	; 0x30
 8002672:	3e01      	subs	r6, #1
 8002674:	7033      	strb	r3, [r6, #0]
 8002676:	9b04      	ldr	r3, [sp, #16]
 8002678:	1b9b      	subs	r3, r3, r6
 800267a:	6123      	str	r3, [r4, #16]
 800267c:	9b07      	ldr	r3, [sp, #28]
 800267e:	0021      	movs	r1, r4
 8002680:	9300      	str	r3, [sp, #0]
 8002682:	9805      	ldr	r0, [sp, #20]
 8002684:	9b06      	ldr	r3, [sp, #24]
 8002686:	aa09      	add	r2, sp, #36	; 0x24
 8002688:	f7ff fef4 	bl	8002474 <_printf_common>
 800268c:	1c43      	adds	r3, r0, #1
 800268e:	d14c      	bne.n	800272a <_printf_i+0x1d6>
 8002690:	2001      	movs	r0, #1
 8002692:	4240      	negs	r0, r0
 8002694:	b00b      	add	sp, #44	; 0x2c
 8002696:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002698:	3145      	adds	r1, #69	; 0x45
 800269a:	700a      	strb	r2, [r1, #0]
 800269c:	4a34      	ldr	r2, [pc, #208]	; (8002770 <_printf_i+0x21c>)
 800269e:	9203      	str	r2, [sp, #12]
 80026a0:	681a      	ldr	r2, [r3, #0]
 80026a2:	6821      	ldr	r1, [r4, #0]
 80026a4:	ca20      	ldmia	r2!, {r5}
 80026a6:	601a      	str	r2, [r3, #0]
 80026a8:	0608      	lsls	r0, r1, #24
 80026aa:	d516      	bpl.n	80026da <_printf_i+0x186>
 80026ac:	07cb      	lsls	r3, r1, #31
 80026ae:	d502      	bpl.n	80026b6 <_printf_i+0x162>
 80026b0:	2320      	movs	r3, #32
 80026b2:	4319      	orrs	r1, r3
 80026b4:	6021      	str	r1, [r4, #0]
 80026b6:	2710      	movs	r7, #16
 80026b8:	2d00      	cmp	r5, #0
 80026ba:	d1b2      	bne.n	8002622 <_printf_i+0xce>
 80026bc:	2320      	movs	r3, #32
 80026be:	6822      	ldr	r2, [r4, #0]
 80026c0:	439a      	bics	r2, r3
 80026c2:	6022      	str	r2, [r4, #0]
 80026c4:	e7ad      	b.n	8002622 <_printf_i+0xce>
 80026c6:	2220      	movs	r2, #32
 80026c8:	6809      	ldr	r1, [r1, #0]
 80026ca:	430a      	orrs	r2, r1
 80026cc:	6022      	str	r2, [r4, #0]
 80026ce:	0022      	movs	r2, r4
 80026d0:	2178      	movs	r1, #120	; 0x78
 80026d2:	3245      	adds	r2, #69	; 0x45
 80026d4:	7011      	strb	r1, [r2, #0]
 80026d6:	4a27      	ldr	r2, [pc, #156]	; (8002774 <_printf_i+0x220>)
 80026d8:	e7e1      	b.n	800269e <_printf_i+0x14a>
 80026da:	0648      	lsls	r0, r1, #25
 80026dc:	d5e6      	bpl.n	80026ac <_printf_i+0x158>
 80026de:	b2ad      	uxth	r5, r5
 80026e0:	e7e4      	b.n	80026ac <_printf_i+0x158>
 80026e2:	681a      	ldr	r2, [r3, #0]
 80026e4:	680d      	ldr	r5, [r1, #0]
 80026e6:	1d10      	adds	r0, r2, #4
 80026e8:	6949      	ldr	r1, [r1, #20]
 80026ea:	6018      	str	r0, [r3, #0]
 80026ec:	6813      	ldr	r3, [r2, #0]
 80026ee:	062e      	lsls	r6, r5, #24
 80026f0:	d501      	bpl.n	80026f6 <_printf_i+0x1a2>
 80026f2:	6019      	str	r1, [r3, #0]
 80026f4:	e002      	b.n	80026fc <_printf_i+0x1a8>
 80026f6:	066d      	lsls	r5, r5, #25
 80026f8:	d5fb      	bpl.n	80026f2 <_printf_i+0x19e>
 80026fa:	8019      	strh	r1, [r3, #0]
 80026fc:	2300      	movs	r3, #0
 80026fe:	9e04      	ldr	r6, [sp, #16]
 8002700:	6123      	str	r3, [r4, #16]
 8002702:	e7bb      	b.n	800267c <_printf_i+0x128>
 8002704:	681a      	ldr	r2, [r3, #0]
 8002706:	1d11      	adds	r1, r2, #4
 8002708:	6019      	str	r1, [r3, #0]
 800270a:	6816      	ldr	r6, [r2, #0]
 800270c:	2100      	movs	r1, #0
 800270e:	0030      	movs	r0, r6
 8002710:	6862      	ldr	r2, [r4, #4]
 8002712:	f000 f831 	bl	8002778 <memchr>
 8002716:	2800      	cmp	r0, #0
 8002718:	d001      	beq.n	800271e <_printf_i+0x1ca>
 800271a:	1b80      	subs	r0, r0, r6
 800271c:	6060      	str	r0, [r4, #4]
 800271e:	6863      	ldr	r3, [r4, #4]
 8002720:	6123      	str	r3, [r4, #16]
 8002722:	2300      	movs	r3, #0
 8002724:	9a04      	ldr	r2, [sp, #16]
 8002726:	7013      	strb	r3, [r2, #0]
 8002728:	e7a8      	b.n	800267c <_printf_i+0x128>
 800272a:	6923      	ldr	r3, [r4, #16]
 800272c:	0032      	movs	r2, r6
 800272e:	9906      	ldr	r1, [sp, #24]
 8002730:	9805      	ldr	r0, [sp, #20]
 8002732:	9d07      	ldr	r5, [sp, #28]
 8002734:	47a8      	blx	r5
 8002736:	1c43      	adds	r3, r0, #1
 8002738:	d0aa      	beq.n	8002690 <_printf_i+0x13c>
 800273a:	6823      	ldr	r3, [r4, #0]
 800273c:	079b      	lsls	r3, r3, #30
 800273e:	d415      	bmi.n	800276c <_printf_i+0x218>
 8002740:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002742:	68e0      	ldr	r0, [r4, #12]
 8002744:	4298      	cmp	r0, r3
 8002746:	daa5      	bge.n	8002694 <_printf_i+0x140>
 8002748:	0018      	movs	r0, r3
 800274a:	e7a3      	b.n	8002694 <_printf_i+0x140>
 800274c:	0022      	movs	r2, r4
 800274e:	2301      	movs	r3, #1
 8002750:	9906      	ldr	r1, [sp, #24]
 8002752:	9805      	ldr	r0, [sp, #20]
 8002754:	9e07      	ldr	r6, [sp, #28]
 8002756:	3219      	adds	r2, #25
 8002758:	47b0      	blx	r6
 800275a:	1c43      	adds	r3, r0, #1
 800275c:	d098      	beq.n	8002690 <_printf_i+0x13c>
 800275e:	3501      	adds	r5, #1
 8002760:	68e3      	ldr	r3, [r4, #12]
 8002762:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002764:	1a9b      	subs	r3, r3, r2
 8002766:	42ab      	cmp	r3, r5
 8002768:	dcf0      	bgt.n	800274c <_printf_i+0x1f8>
 800276a:	e7e9      	b.n	8002740 <_printf_i+0x1ec>
 800276c:	2500      	movs	r5, #0
 800276e:	e7f7      	b.n	8002760 <_printf_i+0x20c>
 8002770:	08002b05 	.word	0x08002b05
 8002774:	08002b16 	.word	0x08002b16

08002778 <memchr>:
 8002778:	b2c9      	uxtb	r1, r1
 800277a:	1882      	adds	r2, r0, r2
 800277c:	4290      	cmp	r0, r2
 800277e:	d101      	bne.n	8002784 <memchr+0xc>
 8002780:	2000      	movs	r0, #0
 8002782:	4770      	bx	lr
 8002784:	7803      	ldrb	r3, [r0, #0]
 8002786:	428b      	cmp	r3, r1
 8002788:	d0fb      	beq.n	8002782 <memchr+0xa>
 800278a:	3001      	adds	r0, #1
 800278c:	e7f6      	b.n	800277c <memchr+0x4>

0800278e <memcpy>:
 800278e:	2300      	movs	r3, #0
 8002790:	b510      	push	{r4, lr}
 8002792:	429a      	cmp	r2, r3
 8002794:	d100      	bne.n	8002798 <memcpy+0xa>
 8002796:	bd10      	pop	{r4, pc}
 8002798:	5ccc      	ldrb	r4, [r1, r3]
 800279a:	54c4      	strb	r4, [r0, r3]
 800279c:	3301      	adds	r3, #1
 800279e:	e7f8      	b.n	8002792 <memcpy+0x4>

080027a0 <memmove>:
 80027a0:	b510      	push	{r4, lr}
 80027a2:	4288      	cmp	r0, r1
 80027a4:	d902      	bls.n	80027ac <memmove+0xc>
 80027a6:	188b      	adds	r3, r1, r2
 80027a8:	4298      	cmp	r0, r3
 80027aa:	d303      	bcc.n	80027b4 <memmove+0x14>
 80027ac:	2300      	movs	r3, #0
 80027ae:	e007      	b.n	80027c0 <memmove+0x20>
 80027b0:	5c8b      	ldrb	r3, [r1, r2]
 80027b2:	5483      	strb	r3, [r0, r2]
 80027b4:	3a01      	subs	r2, #1
 80027b6:	d2fb      	bcs.n	80027b0 <memmove+0x10>
 80027b8:	bd10      	pop	{r4, pc}
 80027ba:	5ccc      	ldrb	r4, [r1, r3]
 80027bc:	54c4      	strb	r4, [r0, r3]
 80027be:	3301      	adds	r3, #1
 80027c0:	429a      	cmp	r2, r3
 80027c2:	d1fa      	bne.n	80027ba <memmove+0x1a>
 80027c4:	e7f8      	b.n	80027b8 <memmove+0x18>
	...

080027c8 <_free_r>:
 80027c8:	b570      	push	{r4, r5, r6, lr}
 80027ca:	0005      	movs	r5, r0
 80027cc:	2900      	cmp	r1, #0
 80027ce:	d010      	beq.n	80027f2 <_free_r+0x2a>
 80027d0:	1f0c      	subs	r4, r1, #4
 80027d2:	6823      	ldr	r3, [r4, #0]
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	da00      	bge.n	80027da <_free_r+0x12>
 80027d8:	18e4      	adds	r4, r4, r3
 80027da:	0028      	movs	r0, r5
 80027dc:	f000 f918 	bl	8002a10 <__malloc_lock>
 80027e0:	4a1d      	ldr	r2, [pc, #116]	; (8002858 <_free_r+0x90>)
 80027e2:	6813      	ldr	r3, [r2, #0]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d105      	bne.n	80027f4 <_free_r+0x2c>
 80027e8:	6063      	str	r3, [r4, #4]
 80027ea:	6014      	str	r4, [r2, #0]
 80027ec:	0028      	movs	r0, r5
 80027ee:	f000 f917 	bl	8002a20 <__malloc_unlock>
 80027f2:	bd70      	pop	{r4, r5, r6, pc}
 80027f4:	42a3      	cmp	r3, r4
 80027f6:	d908      	bls.n	800280a <_free_r+0x42>
 80027f8:	6821      	ldr	r1, [r4, #0]
 80027fa:	1860      	adds	r0, r4, r1
 80027fc:	4283      	cmp	r3, r0
 80027fe:	d1f3      	bne.n	80027e8 <_free_r+0x20>
 8002800:	6818      	ldr	r0, [r3, #0]
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	1841      	adds	r1, r0, r1
 8002806:	6021      	str	r1, [r4, #0]
 8002808:	e7ee      	b.n	80027e8 <_free_r+0x20>
 800280a:	001a      	movs	r2, r3
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d001      	beq.n	8002816 <_free_r+0x4e>
 8002812:	42a3      	cmp	r3, r4
 8002814:	d9f9      	bls.n	800280a <_free_r+0x42>
 8002816:	6811      	ldr	r1, [r2, #0]
 8002818:	1850      	adds	r0, r2, r1
 800281a:	42a0      	cmp	r0, r4
 800281c:	d10b      	bne.n	8002836 <_free_r+0x6e>
 800281e:	6820      	ldr	r0, [r4, #0]
 8002820:	1809      	adds	r1, r1, r0
 8002822:	1850      	adds	r0, r2, r1
 8002824:	6011      	str	r1, [r2, #0]
 8002826:	4283      	cmp	r3, r0
 8002828:	d1e0      	bne.n	80027ec <_free_r+0x24>
 800282a:	6818      	ldr	r0, [r3, #0]
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	1841      	adds	r1, r0, r1
 8002830:	6011      	str	r1, [r2, #0]
 8002832:	6053      	str	r3, [r2, #4]
 8002834:	e7da      	b.n	80027ec <_free_r+0x24>
 8002836:	42a0      	cmp	r0, r4
 8002838:	d902      	bls.n	8002840 <_free_r+0x78>
 800283a:	230c      	movs	r3, #12
 800283c:	602b      	str	r3, [r5, #0]
 800283e:	e7d5      	b.n	80027ec <_free_r+0x24>
 8002840:	6821      	ldr	r1, [r4, #0]
 8002842:	1860      	adds	r0, r4, r1
 8002844:	4283      	cmp	r3, r0
 8002846:	d103      	bne.n	8002850 <_free_r+0x88>
 8002848:	6818      	ldr	r0, [r3, #0]
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	1841      	adds	r1, r0, r1
 800284e:	6021      	str	r1, [r4, #0]
 8002850:	6063      	str	r3, [r4, #4]
 8002852:	6054      	str	r4, [r2, #4]
 8002854:	e7ca      	b.n	80027ec <_free_r+0x24>
 8002856:	46c0      	nop			; (mov r8, r8)
 8002858:	200000fc 	.word	0x200000fc

0800285c <sbrk_aligned>:
 800285c:	b570      	push	{r4, r5, r6, lr}
 800285e:	4e0f      	ldr	r6, [pc, #60]	; (800289c <sbrk_aligned+0x40>)
 8002860:	000d      	movs	r5, r1
 8002862:	6831      	ldr	r1, [r6, #0]
 8002864:	0004      	movs	r4, r0
 8002866:	2900      	cmp	r1, #0
 8002868:	d102      	bne.n	8002870 <sbrk_aligned+0x14>
 800286a:	f000 f8bf 	bl	80029ec <_sbrk_r>
 800286e:	6030      	str	r0, [r6, #0]
 8002870:	0029      	movs	r1, r5
 8002872:	0020      	movs	r0, r4
 8002874:	f000 f8ba 	bl	80029ec <_sbrk_r>
 8002878:	1c43      	adds	r3, r0, #1
 800287a:	d00a      	beq.n	8002892 <sbrk_aligned+0x36>
 800287c:	2303      	movs	r3, #3
 800287e:	1cc5      	adds	r5, r0, #3
 8002880:	439d      	bics	r5, r3
 8002882:	42a8      	cmp	r0, r5
 8002884:	d007      	beq.n	8002896 <sbrk_aligned+0x3a>
 8002886:	1a29      	subs	r1, r5, r0
 8002888:	0020      	movs	r0, r4
 800288a:	f000 f8af 	bl	80029ec <_sbrk_r>
 800288e:	1c43      	adds	r3, r0, #1
 8002890:	d101      	bne.n	8002896 <sbrk_aligned+0x3a>
 8002892:	2501      	movs	r5, #1
 8002894:	426d      	negs	r5, r5
 8002896:	0028      	movs	r0, r5
 8002898:	bd70      	pop	{r4, r5, r6, pc}
 800289a:	46c0      	nop			; (mov r8, r8)
 800289c:	20000100 	.word	0x20000100

080028a0 <_malloc_r>:
 80028a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80028a2:	2203      	movs	r2, #3
 80028a4:	1ccb      	adds	r3, r1, #3
 80028a6:	4393      	bics	r3, r2
 80028a8:	3308      	adds	r3, #8
 80028aa:	0006      	movs	r6, r0
 80028ac:	001f      	movs	r7, r3
 80028ae:	2b0c      	cmp	r3, #12
 80028b0:	d232      	bcs.n	8002918 <_malloc_r+0x78>
 80028b2:	270c      	movs	r7, #12
 80028b4:	42b9      	cmp	r1, r7
 80028b6:	d831      	bhi.n	800291c <_malloc_r+0x7c>
 80028b8:	0030      	movs	r0, r6
 80028ba:	f000 f8a9 	bl	8002a10 <__malloc_lock>
 80028be:	4d32      	ldr	r5, [pc, #200]	; (8002988 <_malloc_r+0xe8>)
 80028c0:	682b      	ldr	r3, [r5, #0]
 80028c2:	001c      	movs	r4, r3
 80028c4:	2c00      	cmp	r4, #0
 80028c6:	d12e      	bne.n	8002926 <_malloc_r+0x86>
 80028c8:	0039      	movs	r1, r7
 80028ca:	0030      	movs	r0, r6
 80028cc:	f7ff ffc6 	bl	800285c <sbrk_aligned>
 80028d0:	0004      	movs	r4, r0
 80028d2:	1c43      	adds	r3, r0, #1
 80028d4:	d11e      	bne.n	8002914 <_malloc_r+0x74>
 80028d6:	682c      	ldr	r4, [r5, #0]
 80028d8:	0025      	movs	r5, r4
 80028da:	2d00      	cmp	r5, #0
 80028dc:	d14a      	bne.n	8002974 <_malloc_r+0xd4>
 80028de:	6823      	ldr	r3, [r4, #0]
 80028e0:	0029      	movs	r1, r5
 80028e2:	18e3      	adds	r3, r4, r3
 80028e4:	0030      	movs	r0, r6
 80028e6:	9301      	str	r3, [sp, #4]
 80028e8:	f000 f880 	bl	80029ec <_sbrk_r>
 80028ec:	9b01      	ldr	r3, [sp, #4]
 80028ee:	4283      	cmp	r3, r0
 80028f0:	d143      	bne.n	800297a <_malloc_r+0xda>
 80028f2:	6823      	ldr	r3, [r4, #0]
 80028f4:	3703      	adds	r7, #3
 80028f6:	1aff      	subs	r7, r7, r3
 80028f8:	2303      	movs	r3, #3
 80028fa:	439f      	bics	r7, r3
 80028fc:	3708      	adds	r7, #8
 80028fe:	2f0c      	cmp	r7, #12
 8002900:	d200      	bcs.n	8002904 <_malloc_r+0x64>
 8002902:	270c      	movs	r7, #12
 8002904:	0039      	movs	r1, r7
 8002906:	0030      	movs	r0, r6
 8002908:	f7ff ffa8 	bl	800285c <sbrk_aligned>
 800290c:	1c43      	adds	r3, r0, #1
 800290e:	d034      	beq.n	800297a <_malloc_r+0xda>
 8002910:	6823      	ldr	r3, [r4, #0]
 8002912:	19df      	adds	r7, r3, r7
 8002914:	6027      	str	r7, [r4, #0]
 8002916:	e013      	b.n	8002940 <_malloc_r+0xa0>
 8002918:	2b00      	cmp	r3, #0
 800291a:	dacb      	bge.n	80028b4 <_malloc_r+0x14>
 800291c:	230c      	movs	r3, #12
 800291e:	2500      	movs	r5, #0
 8002920:	6033      	str	r3, [r6, #0]
 8002922:	0028      	movs	r0, r5
 8002924:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002926:	6822      	ldr	r2, [r4, #0]
 8002928:	1bd1      	subs	r1, r2, r7
 800292a:	d420      	bmi.n	800296e <_malloc_r+0xce>
 800292c:	290b      	cmp	r1, #11
 800292e:	d917      	bls.n	8002960 <_malloc_r+0xc0>
 8002930:	19e2      	adds	r2, r4, r7
 8002932:	6027      	str	r7, [r4, #0]
 8002934:	42a3      	cmp	r3, r4
 8002936:	d111      	bne.n	800295c <_malloc_r+0xbc>
 8002938:	602a      	str	r2, [r5, #0]
 800293a:	6863      	ldr	r3, [r4, #4]
 800293c:	6011      	str	r1, [r2, #0]
 800293e:	6053      	str	r3, [r2, #4]
 8002940:	0030      	movs	r0, r6
 8002942:	0025      	movs	r5, r4
 8002944:	f000 f86c 	bl	8002a20 <__malloc_unlock>
 8002948:	2207      	movs	r2, #7
 800294a:	350b      	adds	r5, #11
 800294c:	1d23      	adds	r3, r4, #4
 800294e:	4395      	bics	r5, r2
 8002950:	1aea      	subs	r2, r5, r3
 8002952:	429d      	cmp	r5, r3
 8002954:	d0e5      	beq.n	8002922 <_malloc_r+0x82>
 8002956:	1b5b      	subs	r3, r3, r5
 8002958:	50a3      	str	r3, [r4, r2]
 800295a:	e7e2      	b.n	8002922 <_malloc_r+0x82>
 800295c:	605a      	str	r2, [r3, #4]
 800295e:	e7ec      	b.n	800293a <_malloc_r+0x9a>
 8002960:	6862      	ldr	r2, [r4, #4]
 8002962:	42a3      	cmp	r3, r4
 8002964:	d101      	bne.n	800296a <_malloc_r+0xca>
 8002966:	602a      	str	r2, [r5, #0]
 8002968:	e7ea      	b.n	8002940 <_malloc_r+0xa0>
 800296a:	605a      	str	r2, [r3, #4]
 800296c:	e7e8      	b.n	8002940 <_malloc_r+0xa0>
 800296e:	0023      	movs	r3, r4
 8002970:	6864      	ldr	r4, [r4, #4]
 8002972:	e7a7      	b.n	80028c4 <_malloc_r+0x24>
 8002974:	002c      	movs	r4, r5
 8002976:	686d      	ldr	r5, [r5, #4]
 8002978:	e7af      	b.n	80028da <_malloc_r+0x3a>
 800297a:	230c      	movs	r3, #12
 800297c:	0030      	movs	r0, r6
 800297e:	6033      	str	r3, [r6, #0]
 8002980:	f000 f84e 	bl	8002a20 <__malloc_unlock>
 8002984:	e7cd      	b.n	8002922 <_malloc_r+0x82>
 8002986:	46c0      	nop			; (mov r8, r8)
 8002988:	200000fc 	.word	0x200000fc

0800298c <_realloc_r>:
 800298c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800298e:	0007      	movs	r7, r0
 8002990:	000e      	movs	r6, r1
 8002992:	0014      	movs	r4, r2
 8002994:	2900      	cmp	r1, #0
 8002996:	d105      	bne.n	80029a4 <_realloc_r+0x18>
 8002998:	0011      	movs	r1, r2
 800299a:	f7ff ff81 	bl	80028a0 <_malloc_r>
 800299e:	0005      	movs	r5, r0
 80029a0:	0028      	movs	r0, r5
 80029a2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80029a4:	2a00      	cmp	r2, #0
 80029a6:	d103      	bne.n	80029b0 <_realloc_r+0x24>
 80029a8:	f7ff ff0e 	bl	80027c8 <_free_r>
 80029ac:	0025      	movs	r5, r4
 80029ae:	e7f7      	b.n	80029a0 <_realloc_r+0x14>
 80029b0:	f000 f83e 	bl	8002a30 <_malloc_usable_size_r>
 80029b4:	9001      	str	r0, [sp, #4]
 80029b6:	4284      	cmp	r4, r0
 80029b8:	d803      	bhi.n	80029c2 <_realloc_r+0x36>
 80029ba:	0035      	movs	r5, r6
 80029bc:	0843      	lsrs	r3, r0, #1
 80029be:	42a3      	cmp	r3, r4
 80029c0:	d3ee      	bcc.n	80029a0 <_realloc_r+0x14>
 80029c2:	0021      	movs	r1, r4
 80029c4:	0038      	movs	r0, r7
 80029c6:	f7ff ff6b 	bl	80028a0 <_malloc_r>
 80029ca:	1e05      	subs	r5, r0, #0
 80029cc:	d0e8      	beq.n	80029a0 <_realloc_r+0x14>
 80029ce:	9b01      	ldr	r3, [sp, #4]
 80029d0:	0022      	movs	r2, r4
 80029d2:	429c      	cmp	r4, r3
 80029d4:	d900      	bls.n	80029d8 <_realloc_r+0x4c>
 80029d6:	001a      	movs	r2, r3
 80029d8:	0031      	movs	r1, r6
 80029da:	0028      	movs	r0, r5
 80029dc:	f7ff fed7 	bl	800278e <memcpy>
 80029e0:	0031      	movs	r1, r6
 80029e2:	0038      	movs	r0, r7
 80029e4:	f7ff fef0 	bl	80027c8 <_free_r>
 80029e8:	e7da      	b.n	80029a0 <_realloc_r+0x14>
	...

080029ec <_sbrk_r>:
 80029ec:	2300      	movs	r3, #0
 80029ee:	b570      	push	{r4, r5, r6, lr}
 80029f0:	4d06      	ldr	r5, [pc, #24]	; (8002a0c <_sbrk_r+0x20>)
 80029f2:	0004      	movs	r4, r0
 80029f4:	0008      	movs	r0, r1
 80029f6:	602b      	str	r3, [r5, #0]
 80029f8:	f7fe f97e 	bl	8000cf8 <_sbrk>
 80029fc:	1c43      	adds	r3, r0, #1
 80029fe:	d103      	bne.n	8002a08 <_sbrk_r+0x1c>
 8002a00:	682b      	ldr	r3, [r5, #0]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d000      	beq.n	8002a08 <_sbrk_r+0x1c>
 8002a06:	6023      	str	r3, [r4, #0]
 8002a08:	bd70      	pop	{r4, r5, r6, pc}
 8002a0a:	46c0      	nop			; (mov r8, r8)
 8002a0c:	20000104 	.word	0x20000104

08002a10 <__malloc_lock>:
 8002a10:	b510      	push	{r4, lr}
 8002a12:	4802      	ldr	r0, [pc, #8]	; (8002a1c <__malloc_lock+0xc>)
 8002a14:	f000 f814 	bl	8002a40 <__retarget_lock_acquire_recursive>
 8002a18:	bd10      	pop	{r4, pc}
 8002a1a:	46c0      	nop			; (mov r8, r8)
 8002a1c:	20000108 	.word	0x20000108

08002a20 <__malloc_unlock>:
 8002a20:	b510      	push	{r4, lr}
 8002a22:	4802      	ldr	r0, [pc, #8]	; (8002a2c <__malloc_unlock+0xc>)
 8002a24:	f000 f80d 	bl	8002a42 <__retarget_lock_release_recursive>
 8002a28:	bd10      	pop	{r4, pc}
 8002a2a:	46c0      	nop			; (mov r8, r8)
 8002a2c:	20000108 	.word	0x20000108

08002a30 <_malloc_usable_size_r>:
 8002a30:	1f0b      	subs	r3, r1, #4
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	1f18      	subs	r0, r3, #4
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	da01      	bge.n	8002a3e <_malloc_usable_size_r+0xe>
 8002a3a:	580b      	ldr	r3, [r1, r0]
 8002a3c:	18c0      	adds	r0, r0, r3
 8002a3e:	4770      	bx	lr

08002a40 <__retarget_lock_acquire_recursive>:
 8002a40:	4770      	bx	lr

08002a42 <__retarget_lock_release_recursive>:
 8002a42:	4770      	bx	lr

08002a44 <_init>:
 8002a44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a46:	46c0      	nop			; (mov r8, r8)
 8002a48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a4a:	bc08      	pop	{r3}
 8002a4c:	469e      	mov	lr, r3
 8002a4e:	4770      	bx	lr

08002a50 <_fini>:
 8002a50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a52:	46c0      	nop			; (mov r8, r8)
 8002a54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a56:	bc08      	pop	{r3}
 8002a58:	469e      	mov	lr, r3
 8002a5a:	4770      	bx	lr
